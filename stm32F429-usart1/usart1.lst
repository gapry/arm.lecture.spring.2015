
usart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001240  080001ac  080001ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080013ec  080013ec  000093ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000024  20000000  08001454  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 ._user_heap_stack 00000400  20000024  20000024  00010024  2**0
                  ALLOC
  5 .ARM.attributes 00000031  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003bce  00000000  00000000  00010055  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d53  00000000  00000000  00013c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001cab  00000000  00000000  00014976  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004e8  00000000  00000000  00016628  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000488  00000000  00000000  00016b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c38  00000000  00000000  00016f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000016e9  00000000  00000000  00018bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  0001a2b9  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000928  00000000  00000000  0001a32c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	08000535 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl}
 8000008:	08000391 	stmdaeq	r0, {r0, r4, r7, r8, r9}
 800000c:	08000395 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9}
 8000010:	08000399 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9}
 8000014:	0800039d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9}
 8000018:	080003a1 	stmdaeq	r0, {r0, r5, r7, r8, r9}
	...
 800002c:	080003a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9}
 8000030:	080003a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080003ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9}
 800003c:	080003b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9}
 8000040:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000044:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000048:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800004c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000050:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000054:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000058:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800005c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000060:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000064:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000068:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800006c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000070:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000074:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000078:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800007c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000080:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000084:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000088:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800008c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000090:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000094:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000098:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800009c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000a0:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000a4:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000a8:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000ac:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000b0:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000b4:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000b8:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000bc:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000c0:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000c4:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000c8:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000cc:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000d0:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000d4:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000d8:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000dc:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000e0:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000e4:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000e8:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000ec:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000f0:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000f4:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000f8:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80000fc:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000100:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000104:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000108:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800010c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000110:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000114:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000118:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800011c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000120:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000124:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000128:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800012c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000130:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000134:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000138:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800013c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000140:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000144:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000148:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800014c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000150:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000154:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000158:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800015c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000160:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000164:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000168:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800016c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000170:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000174:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000178:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800017c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000180:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000184:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000188:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800018c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000190:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000194:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 8000198:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 800019c:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80001a0:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80001a4:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}
 80001a8:	08000581 	stmdaeq	r0, {r0, r7, r8, sl}

Disassembly of section .text:

080001ac <fibonacci>:
    .text
    .global fibonacci
    .type fibonacci, function
@ arm isa 
fibonacci:
	push {lr}
 80001ac:	b500      	push	{lr}
	mov r0, #100	
 80001ae:	f04f 0064 	mov.w	r0, #100	; 0x64

	pop {pc}
 80001b2:	bd00      	pop	{pc}
 80001b4:	08001454 	stmdaeq	r0, {r2, r4, r6, sl, ip}
 80001b8:	20000000 	andcs	r0, r0, r0
 80001bc:	20000024 	andcs	r0, r0, r4, lsr #32
 80001c0:	20000024 	andcs	r0, r0, r4, lsr #32
 80001c4:	20000024 	andcs	r0, r0, r4, lsr #32

080001c8 <RCC_Configuration>:
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

void RCC_Configuration(void)
{
 80001c8:	b508      	push	{r3, lr}
      /* --------------------------- System Clocks Configuration -----------------*/
      /* USART1 clock enable */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80001ca:	2010      	movs	r0, #16
 80001cc:	2101      	movs	r1, #1
 80001ce:	f000 fd7f 	bl	8000cd0 <RCC_APB2PeriphClockCmd>
      /* GPIOA clock enable */
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80001d2:	2001      	movs	r0, #1
 80001d4:	4601      	mov	r1, r0
}
 80001d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
      /* --------------------------- System Clocks Configuration -----------------*/
      /* USART1 clock enable */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
      /* GPIOA clock enable */
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80001da:	f000 bd49 	b.w	8000c70 <RCC_AHB1PeriphClockCmd>
 80001de:	bf00      	nop

080001e0 <GPIO_Configuration>:
}
 
/**************************************************************************************/
 
void GPIO_Configuration(void)
{
 80001e0:	b530      	push	{r4, r5, lr}
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80001e2:	4c0f      	ldr	r4, [pc, #60]	; (8000220 <GPIO_Configuration+0x40>)
}
 
/**************************************************************************************/
 
void GPIO_Configuration(void)
{
 80001e4:	b083      	sub	sp, #12
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001e6:	2300      	movs	r3, #0
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80001e8:	2202      	movs	r2, #2
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80001ea:	4620      	mov	r0, r4
 80001ec:	4669      	mov	r1, sp
void GPIO_Configuration(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 80001ee:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001f2:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80001f6:	f88d 3007 	strb.w	r3, [sp, #7]
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80001fa:	f88d 2004 	strb.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001fe:	f88d 2005 	strb.w	r2, [sp, #5]
void GPIO_Configuration(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8000202:	9500      	str	r5, [sp, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000204:	f000 fad4 	bl	80007b0 <GPIO_Init>

    /* Connect USART pins to AF */
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);   // USART1_TX
 8000208:	4620      	mov	r0, r4
 800020a:	2109      	movs	r1, #9
 800020c:	2207      	movs	r2, #7
 800020e:	f000 fb6d 	bl	80008ec <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);  // USART1_RX
 8000212:	4620      	mov	r0, r4
 8000214:	210a      	movs	r1, #10
 8000216:	2207      	movs	r2, #7
 8000218:	f000 fb68 	bl	80008ec <GPIO_PinAFConfig>
}
 800021c:	b003      	add	sp, #12
 800021e:	bd30      	pop	{r4, r5, pc}
 8000220:	40020000 	andmi	r0, r2, r0

08000224 <USART1_Configuration>:
 
/**************************************************************************************/
 
void USART1_Configuration(void)
{
 8000224:	b530      	push	{r4, r5, lr}
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    USART_Init(USART1, &USART_InitStructure);
 8000226:	4c0d      	ldr	r4, [pc, #52]	; (800025c <USART1_Configuration+0x38>)
}
 
/**************************************************************************************/
 
void USART1_Configuration(void)
{
 8000228:	b085      	sub	sp, #20
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800022a:	2300      	movs	r3, #0
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800022c:	220c      	movs	r2, #12
    USART_Init(USART1, &USART_InitStructure);
 800022e:	4620      	mov	r0, r4
 8000230:	4669      	mov	r1, sp
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 115200;
 8000232:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000236:	f8ad 3004 	strh.w	r3, [sp, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800023a:	f8ad 3006 	strh.w	r3, [sp, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 800023e:	f8ad 3008 	strh.w	r3, [sp, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000242:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000246:	f8ad 200a 	strh.w	r2, [sp, #10]
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 115200;
 800024a:	9500      	str	r5, [sp, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    USART_Init(USART1, &USART_InitStructure);
 800024c:	f000 fe88 	bl	8000f60 <USART_Init>
    USART_Cmd(USART1, ENABLE);
 8000250:	4620      	mov	r0, r4
 8000252:	2101      	movs	r1, #1
 8000254:	f000 ff0a 	bl	800106c <USART_Cmd>
}
 8000258:	b005      	add	sp, #20
 800025a:	bd30      	pop	{r4, r5, pc}
 800025c:	40011000 	andmi	r1, r1, r0

08000260 <USART1_puts>:

void USART1_puts(char* s)
{
 8000260:	b510      	push	{r4, lr}
    while(*s) {
 8000262:	7803      	ldrb	r3, [r0, #0]
 8000264:	b173      	cbz	r3, 8000284 <USART1_puts+0x24>
 8000266:	1e44      	subs	r4, r0, #1
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 8000268:	4807      	ldr	r0, [pc, #28]	; (8000288 <USART1_puts+0x28>)
 800026a:	2180      	movs	r1, #128	; 0x80
 800026c:	f000 fff6 	bl	800125c <USART_GetFlagStatus>
 8000270:	2800      	cmp	r0, #0
 8000272:	d0f9      	beq.n	8000268 <USART1_puts+0x8>
        USART_SendData(USART1, *s);
 8000274:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <USART1_puts+0x28>)
 800027a:	f000 ff2b 	bl	80010d4 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 800027e:	7863      	ldrb	r3, [r4, #1]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f1      	bne.n	8000268 <USART1_puts+0x8>
 8000284:	bd10      	pop	{r4, pc}
 8000286:	bf00      	nop
 8000288:	40011000 	andmi	r1, r1, r0

0800028c <st_printf>:
        s++;
    }
}

void st_printf(const char* fmt, ...)
{
 800028c:	b40f      	push	{r0, r1, r2, r3}
 800028e:	b5b0      	push	{r4, r5, r7, lr}
 8000290:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
	int* sp = __builtin_frame_address(0);
	sp += 2;

	char str[10000] = {'\0'};
 8000298:	2100      	movs	r1, #0
 800029a:	f242 7210 	movw	r2, #10000	; 0x2710
 800029e:	4638      	mov	r0, r7
 80002a0:	f001 f85a 	bl	8001358 <memset>
	char* it = str + sizeof(str) - 1;

	int num = 17; 

	do {
		*--it = '0' + num % 10;
 80002a4:	f242 720e 	movw	r2, #9998	; 0x270e
 80002a8:	f242 730d 	movw	r3, #9997	; 0x270d
 80002ac:	2137      	movs	r1, #55	; 0x37
 80002ae:	2431      	movs	r4, #49	; 0x31
 80002b0:	54b9      	strb	r1, [r7, r2]
 80002b2:	54fc      	strb	r4, [r7, r3]
 80002b4:	18bd      	adds	r5, r7, r2
}

void USART1_puts(char* s)
{
    while(*s) {
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 80002b6:	4813      	ldr	r0, [pc, #76]	; (8000304 <st_printf+0x78>)
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	f000 ffcf 	bl	800125c <USART_GetFlagStatus>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d0f9      	beq.n	80002b6 <st_printf+0x2a>
        USART_SendData(USART1, *s);
 80002c2:	4621      	mov	r1, r4
 80002c4:	480f      	ldr	r0, [pc, #60]	; (8000304 <st_printf+0x78>)
 80002c6:	f000 ff05 	bl	80010d4 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 80002ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80002ce:	2c00      	cmp	r4, #0
 80002d0:	d1f1      	bne.n	80002b6 <st_printf+0x2a>
 80002d2:	4d0d      	ldr	r5, [pc, #52]	; (8000308 <st_printf+0x7c>)
 80002d4:	240d      	movs	r4, #13
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <st_printf+0x78>)
 80002d8:	2180      	movs	r1, #128	; 0x80
 80002da:	f000 ffbf 	bl	800125c <USART_GetFlagStatus>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d0f9      	beq.n	80002d6 <st_printf+0x4a>
        USART_SendData(USART1, *s);
 80002e2:	4621      	mov	r1, r4
 80002e4:	4807      	ldr	r0, [pc, #28]	; (8000304 <st_printf+0x78>)
 80002e6:	f000 fef5 	bl	80010d4 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 80002ea:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80002ee:	2c00      	cmp	r4, #0
 80002f0:	d1f1      	bne.n	80002d6 <st_printf+0x4a>
		*--it = '0' + num % 10;
	} while (num /= 10);

	USART1_puts(it);
	USART1_puts("\r\n");
}
 80002f2:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40011000 	andmi	r1, r1, r0
 8000308:	08001404 	stmdaeq	r0, {r2, sl, ip}

0800030c <main>:

/**************************************************************************************/
int main(void)
{
 800030c:	b510      	push	{r4, lr}
    RCC_Configuration();
 800030e:	f7ff ff5b 	bl	80001c8 <RCC_Configuration>
    GPIO_Configuration();
 8000312:	f7ff ff65 	bl	80001e0 <GPIO_Configuration>
    USART1_Configuration();
 8000316:	f7ff ff85 	bl	8000224 <USART1_Configuration>


	USART1_puts("Testing!\r\n");
 800031a:	4818      	ldr	r0, [pc, #96]	; (800037c <main+0x70>)
 800031c:	f7ff ffa0 	bl	8000260 <USART1_puts>
    USART1_puts("Hello World!\r\n");
 8000320:	4817      	ldr	r0, [pc, #92]	; (8000380 <main+0x74>)
 8000322:	f7ff ff9d 	bl	8000260 <USART1_puts>
	st_printf("test", 17);
 8000326:	4817      	ldr	r0, [pc, #92]	; (8000384 <main+0x78>)
 8000328:	2111      	movs	r1, #17
 800032a:	f7ff ffaf 	bl	800028c <st_printf>

    USART1_puts("Just for STM32F429I Discovery verify USART1 with USB TTL Cable\r\n");
 800032e:	4816      	ldr	r0, [pc, #88]	; (8000388 <main+0x7c>)
 8000330:	f7ff ff96 	bl	8000260 <USART1_puts>
    while(1)
    {
        while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <main+0x80>)
 8000336:	2120      	movs	r1, #32
 8000338:	f000 ff90 	bl	800125c <USART_GetFlagStatus>
 800033c:	2800      	cmp	r0, #0
 800033e:	d0f9      	beq.n	8000334 <main+0x28>
        char t = USART_ReceiveData(USART1);
 8000340:	4812      	ldr	r0, [pc, #72]	; (800038c <main+0x80>)
 8000342:	f000 fecb 	bl	80010dc <USART_ReceiveData>
        if ((t == '\r')) {
 8000346:	b2c0      	uxtb	r0, r0
 8000348:	280d      	cmp	r0, #13
 800034a:	d00b      	beq.n	8000364 <main+0x58>
 800034c:	b284      	uxth	r4, r0
            while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
            USART_SendData(USART1, t);
            t = '\n';
        }
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <main+0x80>)
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	f000 ff83 	bl	800125c <USART_GetFlagStatus>
 8000356:	2800      	cmp	r0, #0
 8000358:	d0f9      	beq.n	800034e <main+0x42>
        USART_SendData(USART1, t);
 800035a:	4621      	mov	r1, r4
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <main+0x80>)
 800035e:	f000 feb9 	bl	80010d4 <USART_SendData>
    }
 8000362:	e7e7      	b.n	8000334 <main+0x28>
    while(1)
    {
        while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
        char t = USART_ReceiveData(USART1);
        if ((t == '\r')) {
            while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <main+0x80>)
 8000366:	2180      	movs	r1, #128	; 0x80
 8000368:	f000 ff78 	bl	800125c <USART_GetFlagStatus>
 800036c:	2800      	cmp	r0, #0
 800036e:	d0f9      	beq.n	8000364 <main+0x58>
            USART_SendData(USART1, t);
 8000370:	4806      	ldr	r0, [pc, #24]	; (800038c <main+0x80>)
 8000372:	210d      	movs	r1, #13
 8000374:	f000 feae 	bl	80010d4 <USART_SendData>
 8000378:	240a      	movs	r4, #10
 800037a:	e7e8      	b.n	800034e <main+0x42>
 800037c:	080013ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip}
 8000380:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
 8000384:	08001408 	stmdaeq	r0, {r3, sl, ip}
 8000388:	08001410 	stmdaeq	r0, {r4, sl, ip}
 800038c:	40011000 	andmi	r1, r1, r0

08000390 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000394:	e7fe      	b.n	8000394 <HardFault_Handler>
 8000396:	bf00      	nop

08000398 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000398:	e7fe      	b.n	8000398 <MemManage_Handler>
 800039a:	bf00      	nop

0800039c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800039c:	e7fe      	b.n	800039c <BusFault_Handler>
 800039e:	bf00      	nop

080003a0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003a0:	e7fe      	b.n	80003a0 <UsageFault_Handler>
 80003a2:	bf00      	nop

080003a4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop

080003a8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop

080003ac <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003b4:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <SystemInit+0xf8>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003b6:	483e      	ldr	r0, [pc, #248]	; (80004b0 <SystemInit+0xfc>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003b8:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ba:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003bc:	f041 0101 	orr.w	r1, r1, #1
 80003c0:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c2:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003c4:	6819      	ldr	r1, [r3, #0]
 80003c6:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80003ca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80003ce:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003d0:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003d2:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d4:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003d6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80003da:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003dc:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003de:	9200      	str	r2, [sp, #0]
 80003e0:	9201      	str	r2, [sp, #4]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003e8:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003ea:	461a      	mov	r2, r3
 80003ec:	e003      	b.n	80003f6 <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003ee:	9b00      	ldr	r3, [sp, #0]
 80003f0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80003f4:	d009      	beq.n	800040a <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003f6:	6813      	ldr	r3, [r2, #0]
 80003f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fc:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80003fe:	9b00      	ldr	r3, [sp, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000404:	9b01      	ldr	r3, [sp, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f1      	beq.n	80003ee <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <SystemInit+0xf8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000412:	bf18      	it	ne
 8000414:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000416:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000418:	9b01      	ldr	r3, [sp, #4]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d042      	beq.n	80004a4 <SystemInit+0xf0>
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800041e:	4a23      	ldr	r2, [pc, #140]	; (80004ac <SystemInit+0xf8>)
    PWR->CR |= PWR_CR_VOS;
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <SystemInit+0x100>)
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000422:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000424:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000428:	6411      	str	r1, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800042a:	6819      	ldr	r1, [r3, #0]
 800042c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000430:	6019      	str	r1, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000432:	6893      	ldr	r3, [r2, #8]
 8000434:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000436:	6893      	ldr	r3, [r2, #8]
 8000438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800043c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800043e:	6893      	ldr	r3, [r2, #8]
 8000440:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000444:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000446:	6813      	ldr	r3, [r2, #0]
 8000448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800044c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	019b      	lsls	r3, r3, #6
 8000452:	d5fc      	bpl.n	800044e <SystemInit+0x9a>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8000454:	4917      	ldr	r1, [pc, #92]	; (80004b4 <SystemInit+0x100>)
 8000456:	680b      	ldr	r3, [r1, #0]
 8000458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800045c:	600b      	str	r3, [r1, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 800045e:	684b      	ldr	r3, [r1, #4]
 8000460:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <SystemInit+0x100>)
 8000462:	03d8      	lsls	r0, r3, #15
 8000464:	d5fb      	bpl.n	800045e <SystemInit+0xaa>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000466:	6813      	ldr	r3, [r2, #0]
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 800046e:	6853      	ldr	r3, [r2, #4]
 8000470:	039b      	lsls	r3, r3, #14
 8000472:	d5fc      	bpl.n	800046e <SystemInit+0xba>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <SystemInit+0x104>)

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000476:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <SystemInit+0xf8>)
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000478:	f240 7105 	movw	r1, #1797	; 0x705
 800047c:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800047e:	6893      	ldr	r3, [r2, #8]
 8000480:	f023 0303 	bic.w	r3, r3, #3
 8000484:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000486:	6893      	ldr	r3, [r2, #8]
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800048e:	6893      	ldr	r3, [r2, #8]
 8000490:	f003 030c 	and.w	r3, r3, #12
 8000494:	2b08      	cmp	r3, #8
 8000496:	d1fa      	bne.n	800048e <SystemInit+0xda>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <SystemInit+0x108>)
 800049a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800049e:	609a      	str	r2, [r3, #8]
#endif
}
 80004a0:	b002      	add	sp, #8
 80004a2:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <SystemInit+0xf8>)
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <SystemInit+0x10c>)
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	e7b8      	b.n	800041e <SystemInit+0x6a>
 80004ac:	40023800 	andmi	r3, r2, r0, lsl #16
 80004b0:	24003010 	strcs	r3, [r0], #-16
 80004b4:	40007000 	andmi	r7, r0, r0
 80004b8:	40023c00 	andmi	r3, r2, r0, lsl #24
 80004bc:	e000ed00 	and	lr, r0, r0, lsl #26
 80004c0:	07405a08 	strbeq	r5, [r0, -r8, lsl #20]

080004c4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004c4:	4b16      	ldr	r3, [pc, #88]	; (8000520 <SystemCoreClockUpdate+0x5c>)
 80004c6:	689a      	ldr	r2, [r3, #8]
 80004c8:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80004cc:	2a04      	cmp	r2, #4
 80004ce:	d024      	beq.n	800051a <SystemCoreClockUpdate+0x56>
 80004d0:	2a08      	cmp	r2, #8
 80004d2:	d00a      	beq.n	80004ea <SystemCoreClockUpdate+0x26>
 80004d4:	4a13      	ldr	r2, [pc, #76]	; (8000524 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <SystemCoreClockUpdate+0x5c>)
 80004d8:	4813      	ldr	r0, [pc, #76]	; (8000528 <SystemCoreClockUpdate+0x64>)
 80004da:	6899      	ldr	r1, [r3, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004de:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80004e2:	5c41      	ldrb	r1, [r0, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004e4:	40ca      	lsrs	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004ea:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004ec:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004ee:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80004f0:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004f2:	bf4c      	ite	mi
 80004f4:	4a0e      	ldrmi	r2, [pc, #56]	; (8000530 <SystemCoreClockUpdate+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004f6:	4a0b      	ldrpl	r2, [pc, #44]	; (8000524 <SystemCoreClockUpdate+0x60>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004f8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004fc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000500:	fbb2 f2f1 	udiv	r2, r2, r1
 8000504:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <SystemCoreClockUpdate+0x5c>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000510:	3301      	adds	r3, #1
 8000512:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8000514:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 8000518:	e7dd      	b.n	80004d6 <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <SystemCoreClockUpdate+0x6c>)
 800051c:	e7db      	b.n	80004d6 <SystemCoreClockUpdate+0x12>
 800051e:	bf00      	nop
 8000520:	40023800 	andmi	r3, r2, r0, lsl #16
 8000524:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8000528:	20000000 	andcs	r0, r0, r0
 800052c:	20000010 	andcs	r0, r0, r0, lsl r0
 8000530:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08000534 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000536:	f000 b804 	b.w	8000542 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 800053c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800053e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000540:	3104      	adds	r1, #4

08000542 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8000546:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000548:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800054a:	f4ff aff6 	bcc.w	800053a <CopyDataInit>
  ldr  r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8000550:	f000 b803 	b.w	800055a <LoopFillZerobss>

08000554 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000554:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000556:	f842 3b04 	str.w	r3, [r2], #4

0800055a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <LoopFillZerobss+0x22>)
  cmp  r2, r3
 800055c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800055e:	f4ff aff9 	bcc.w	8000554 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000562:	f7ff ff27 	bl	80003b4 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8000566:	f7ff fed1 	bl	800030c <main>
  bx  lr    
 800056a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800056c:	08001454 	stmdaeq	r0, {r2, r4, r6, sl, ip}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000570:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 8000574:	20000024 	andcs	r0, r0, r4, lsr #32
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000578:	20000024 	andcs	r0, r0, r4, lsr #32
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800057c:	20000024 	andcs	r0, r0, r4, lsr #32

08000580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000580:	f7ff bffe 	b.w	8000580 <ADC_IRQHandler>

08000584 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000584:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000588:	4b02      	ldr	r3, [pc, #8]	; (8000594 <NVIC_PriorityGroupConfig+0x10>)
 800058a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800058e:	60d8      	str	r0, [r3, #12]
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	and	lr, r0, r0, lsl #26

08000598 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000598:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800059a:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800059c:	b963      	cbnz	r3, 80005b8 <NVIC_Init+0x20>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800059e:	7803      	ldrb	r3, [r0, #0]
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <NVIC_Init+0x70>)
 80005a2:	0959      	lsrs	r1, r3, #5
 80005a4:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005a6:	f003 031f 	and.w	r3, r3, #31
 80005aa:	2001      	movs	r0, #1
 80005ac:	fa00 f303 	lsl.w	r3, r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80005b4:	bcf0      	pop	{r4, r5, r6, r7}
 80005b6:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005ba:	7847      	ldrb	r7, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005bc:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80005be:	7885      	ldrb	r5, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005c0:	7803      	ldrb	r3, [r0, #0]
 80005c2:	4911      	ldr	r1, [pc, #68]	; (8000608 <NVIC_Init+0x70>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005c4:	43d2      	mvns	r2, r2
 80005c6:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80005ca:	f1c2 0404 	rsb	r4, r2, #4
    tmpsub = tmpsub >> tmppriority;
 80005ce:	260f      	movs	r6, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005d0:	b2e4      	uxtb	r4, r4
 80005d2:	fa07 f404 	lsl.w	r4, r7, r4
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80005d6:	fa46 f202 	asr.w	r2, r6, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005da:	b2e4      	uxtb	r4, r4
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80005dc:	402a      	ands	r2, r5
 80005de:	4322      	orrs	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80005e8:	0112      	lsls	r2, r2, #4
 80005ea:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005f0:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f003 021f 	and.w	r2, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005f8:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005fa:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000602:	bcf0      	pop	{r4, r5, r6, r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	and	lr, r0, r0, lsl #2
 800060c:	e000ed00 	and	lr, r0, r0, lsl #26

08000610 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000610:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000614:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <NVIC_SetVectorTable+0x10>)
 800061a:	4308      	orrs	r0, r1
 800061c:	6098      	str	r0, [r3, #8]
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	and	lr, r0, r0, lsl #26

08000624 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <NVIC_SystemLPConfig+0x14>)
 8000626:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000628:	b919      	cbnz	r1, 8000632 <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800062a:	ea22 0000 	bic.w	r0, r2, r0
 800062e:	6118      	str	r0, [r3, #16]
 8000630:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000632:	4310      	orrs	r0, r2
 8000634:	6118      	str	r0, [r3, #16]
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	and	lr, r0, r0, lsl #26

0800063c <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SysTick_CLKSourceConfig+0x14>)
 800063e:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000640:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000642:	bf0c      	ite	eq
 8000644:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000648:	f022 0204 	bicne.w	r2, r2, #4
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	4770      	bx	lr
 8000650:	e000e010 	and	lr, r0, r0, lsl r0

08000654 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000654:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000656:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <GPIO_DeInit+0x130>)
 8000658:	4298      	cmp	r0, r3
 800065a:	d02a      	beq.n	80006b2 <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 800065c:	4b4a      	ldr	r3, [pc, #296]	; (8000788 <GPIO_DeInit+0x134>)
 800065e:	4298      	cmp	r0, r3
 8000660:	d031      	beq.n	80006c6 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000662:	4b4a      	ldr	r3, [pc, #296]	; (800078c <GPIO_DeInit+0x138>)
 8000664:	4298      	cmp	r0, r3
 8000666:	d038      	beq.n	80006da <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000668:	4b49      	ldr	r3, [pc, #292]	; (8000790 <GPIO_DeInit+0x13c>)
 800066a:	4298      	cmp	r0, r3
 800066c:	d03f      	beq.n	80006ee <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800066e:	4b49      	ldr	r3, [pc, #292]	; (8000794 <GPIO_DeInit+0x140>)
 8000670:	4298      	cmp	r0, r3
 8000672:	d046      	beq.n	8000702 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000674:	4b48      	ldr	r3, [pc, #288]	; (8000798 <GPIO_DeInit+0x144>)
 8000676:	4298      	cmp	r0, r3
 8000678:	d04d      	beq.n	8000716 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 800067a:	4b48      	ldr	r3, [pc, #288]	; (800079c <GPIO_DeInit+0x148>)
 800067c:	4298      	cmp	r0, r3
 800067e:	d054      	beq.n	800072a <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000680:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <GPIO_DeInit+0x14c>)
 8000682:	4298      	cmp	r0, r3
 8000684:	d05b      	beq.n	800073e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 8000686:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <GPIO_DeInit+0x150>)
 8000688:	4298      	cmp	r0, r3
 800068a:	d062      	beq.n	8000752 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 800068c:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <GPIO_DeInit+0x154>)
 800068e:	4298      	cmp	r0, r3
 8000690:	d06b      	beq.n	800076a <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8000692:	4b46      	ldr	r3, [pc, #280]	; (80007ac <GPIO_DeInit+0x158>)
 8000694:	4298      	cmp	r0, r3
 8000696:	d000      	beq.n	800069a <GPIO_DeInit+0x46>
 8000698:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800069a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800069e:	2101      	movs	r1, #1
 80006a0:	f000 fb22 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80006a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006a8:	2100      	movs	r1, #0
    }
  }
}
 80006aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80006ae:	f000 bb1b 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80006b2:	2001      	movs	r0, #1
 80006b4:	4601      	mov	r1, r0
 80006b6:	f000 fb17 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80006ba:	2001      	movs	r0, #1
 80006bc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80006c2:	f000 bb11 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80006c6:	2002      	movs	r0, #2
 80006c8:	2101      	movs	r1, #1
 80006ca:	f000 fb0d 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80006ce:	2002      	movs	r0, #2
 80006d0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80006d6:	f000 bb07 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80006da:	2004      	movs	r0, #4
 80006dc:	2101      	movs	r1, #1
 80006de:	f000 fb03 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80006e2:	2004      	movs	r0, #4
 80006e4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80006ea:	f000 bafd 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80006ee:	2008      	movs	r0, #8
 80006f0:	2101      	movs	r1, #1
 80006f2:	f000 faf9 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80006f6:	2008      	movs	r0, #8
 80006f8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80006fe:	f000 baf3 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000702:	2010      	movs	r0, #16
 8000704:	2101      	movs	r1, #1
 8000706:	f000 faef 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800070a:	2010      	movs	r0, #16
 800070c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800070e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000712:	f000 bae9 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000716:	2020      	movs	r0, #32
 8000718:	2101      	movs	r1, #1
 800071a:	f000 fae5 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800071e:	2020      	movs	r0, #32
 8000720:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000726:	f000 badf 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800072a:	2040      	movs	r0, #64	; 0x40
 800072c:	2101      	movs	r1, #1
 800072e:	f000 fadb 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000732:	2040      	movs	r0, #64	; 0x40
 8000734:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800073a:	f000 bad5 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800073e:	2080      	movs	r0, #128	; 0x80
 8000740:	2101      	movs	r1, #1
 8000742:	f000 fad1 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000746:	2080      	movs	r0, #128	; 0x80
 8000748:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800074a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800074e:	f000 bacb 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000752:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000756:	2101      	movs	r1, #1
 8000758:	f000 fac6 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800075c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000760:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000766:	f000 babf 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800076a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800076e:	2101      	movs	r1, #1
 8000770:	f000 faba 	bl	8000ce8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000774:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000778:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800077a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800077e:	f000 bab3 	b.w	8000ce8 <RCC_AHB1PeriphResetCmd>
 8000782:	bf00      	nop
 8000784:	40020000 	andmi	r0, r2, r0
 8000788:	40020400 	andmi	r0, r2, r0, lsl #8
 800078c:	40020800 	andmi	r0, r2, r0, lsl #16
 8000790:	40020c00 	andmi	r0, r2, r0, lsl #24
 8000794:	40021000 	andmi	r1, r2, r0
 8000798:	40021400 	andmi	r1, r2, r0, lsl #8
 800079c:	40021800 	andmi	r1, r2, r0, lsl #16
 80007a0:	40021c00 	andmi	r1, r2, r0, lsl #24
 80007a4:	40022000 	andmi	r2, r2, r0
 80007a8:	40022400 	andmi	r2, r2, r0, lsl #8
 80007ac:	40022800 	andmi	r2, r2, r0, lsl #16

080007b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007b0:	2200      	movs	r2, #0
 80007b2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007b6:	4613      	mov	r3, r2
 80007b8:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007ba:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007bc:	f04f 0803 	mov.w	r8, #3
 80007c0:	e004      	b.n	80007cc <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007c2:	3301      	adds	r3, #1
 80007c4:	2b10      	cmp	r3, #16
 80007c6:	f102 0202 	add.w	r2, r2, #2
 80007ca:	d02c      	beq.n	8000826 <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007cc:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007d0:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 80007d4:	42a5      	cmp	r5, r4
 80007d6:	d1f4      	bne.n	80007c2 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007d8:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007dc:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007e0:	fa08 f402 	lsl.w	r4, r8, r2
 80007e4:	43e4      	mvns	r4, r4
 80007e6:	ea04 0909 	and.w	r9, r4, r9
 80007ea:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007ee:	f8d0 9000 	ldr.w	r9, [r0]
 80007f2:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007f6:	f10c 3cff 	add.w	ip, ip, #4294967295
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007fa:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007fe:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000802:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000806:	d911      	bls.n	800082c <GPIO_Init+0x7c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000808:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800080a:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800080e:	402c      	ands	r4, r5
 8000810:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000812:	68c5      	ldr	r5, [r0, #12]
 8000814:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000818:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800081a:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800081c:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800081e:	60c4      	str	r4, [r0, #12]
 8000820:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000824:	d1d2      	bne.n	80007cc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000826:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800082a:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800082c:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000830:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000834:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000838:	ea04 0a0a 	and.w	sl, r4, sl
 800083c:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000840:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000844:	fa09 f902 	lsl.w	r9, r9, r2
 8000848:	ea49 090a 	orr.w	r9, r9, sl
 800084c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000850:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000854:	ea29 0505 	bic.w	r5, r9, r5
 8000858:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800085a:	6845      	ldr	r5, [r0, #4]
 800085c:	fa0c fc03 	lsl.w	ip, ip, r3
 8000860:	fa1f fc8c 	uxth.w	ip, ip
 8000864:	ea4c 0505 	orr.w	r5, ip, r5
 8000868:	6045      	str	r5, [r0, #4]
 800086a:	e7cd      	b.n	8000808 <GPIO_Init+0x58>

0800086c <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800086c:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800086e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000872:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000874:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000876:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000878:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800087a:	71c3      	strb	r3, [r0, #7]
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000880:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000886:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000888:	9b01      	ldr	r3, [sp, #4]
 800088a:	430b      	orrs	r3, r1
 800088c:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800088e:	9b01      	ldr	r3, [sp, #4]
 8000890:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000892:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000894:	9b01      	ldr	r3, [sp, #4]
 8000896:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000898:	69c3      	ldr	r3, [r0, #28]
 800089a:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800089c:	69c3      	ldr	r3, [r0, #28]
 800089e:	9301      	str	r3, [sp, #4]
}
 80008a0:	b002      	add	sp, #8
 80008a2:	4770      	bx	lr

080008a4 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008a4:	6903      	ldr	r3, [r0, #16]
 80008a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80008a8:	bf0c      	ite	eq
 80008aa:	2000      	moveq	r0, #0
 80008ac:	2001      	movne	r0, #1
 80008ae:	4770      	bx	lr

080008b0 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80008b0:	6900      	ldr	r0, [r0, #16]
}
 80008b2:	b280      	uxth	r0, r0
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop

080008b8 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008b8:	6943      	ldr	r3, [r0, #20]
 80008ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80008bc:	bf0c      	ite	eq
 80008be:	2000      	moveq	r0, #0
 80008c0:	2001      	movne	r0, #1
 80008c2:	4770      	bx	lr

080008c4 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80008c4:	6940      	ldr	r0, [r0, #20]
}
 80008c6:	b280      	uxth	r0, r0
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80008cc:	8301      	strh	r1, [r0, #24]
 80008ce:	4770      	bx	lr

080008d0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80008d0:	8341      	strh	r1, [r0, #26]
 80008d2:	4770      	bx	lr

080008d4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80008d4:	b90a      	cbnz	r2, 80008da <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80008d6:	8341      	strh	r1, [r0, #26]
 80008d8:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80008da:	8301      	strh	r1, [r0, #24]
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80008e0:	6141      	str	r1, [r0, #20]
 80008e2:	4770      	bx	lr

080008e4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80008e4:	6943      	ldr	r3, [r0, #20]
 80008e6:	4059      	eors	r1, r3
 80008e8:	6141      	str	r1, [r0, #20]
 80008ea:	4770      	bx	lr

080008ec <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008ec:	08cb      	lsrs	r3, r1, #3
 80008ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008f2:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008f6:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008f8:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008fa:	6a04      	ldr	r4, [r0, #32]
 80008fc:	230f      	movs	r3, #15
 80008fe:	408b      	lsls	r3, r1
 8000900:	ea24 0303 	bic.w	r3, r4, r3
 8000904:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000906:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8000908:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800090c:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800090e:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000910:	6203      	str	r3, [r0, #32]
}
 8000912:	4770      	bx	lr

08000914 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000918:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800091a:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800091c:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000920:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000922:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000924:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000926:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000928:	4d0c      	ldr	r5, [pc, #48]	; (800095c <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800092a:	4c0d      	ldr	r4, [pc, #52]	; (8000960 <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800092c:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 8000930:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000934:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000936:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000938:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800093c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000940:	6819      	ldr	r1, [r3, #0]
 8000942:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000946:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 8000948:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800094a:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 800094c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	andmi	r3, r2, r0, lsl #16
 8000958:	24003000 	strcs	r3, [r0], #-0
 800095c:	24003010 	strcs	r3, [r0], #-16
 8000960:	20003000 	andcs	r3, r0, r0

08000964 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <RCC_HSEConfig+0xc>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800096a:	7018      	strb	r0, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023802 	andmi	r3, r2, r2, lsl #16

08000974 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000974:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 8000976:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000978:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 800097a:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800097c:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800097e:	039b      	lsls	r3, r3, #14
 8000980:	d40c      	bmi.n	800099c <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000982:	9b01      	ldr	r3, [sp, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000988:	9b01      	ldr	r3, [sp, #4]
 800098a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800098e:	d1f5      	bne.n	800097c <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <RCC_WaitForHSEStartUp+0x34>)
 8000992:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000994:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000998:	b002      	add	sp, #8
 800099a:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 800099c:	9b01      	ldr	r3, [sp, #4]
 800099e:	3301      	adds	r3, #1
 80009a0:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80009a2:	9b01      	ldr	r3, [sp, #4]
 80009a4:	e7f4      	b.n	8000990 <RCC_WaitForHSEStartUp+0x1c>
 80009a6:	bf00      	nop
 80009a8:	40023800 	andmi	r3, r2, r0, lsl #16

080009ac <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <RCC_AdjustHSICalibrationValue+0x10>)
 80009ae:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80009b0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80009b4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80009b8:	6018      	str	r0, [r3, #0]
 80009ba:	4770      	bx	lr
 80009bc:	40023800 	andmi	r3, r2, r0, lsl #16

080009c0 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80009c0:	4b01      	ldr	r3, [pc, #4]	; (80009c8 <RCC_HSICmd+0x8>)
 80009c2:	6018      	str	r0, [r3, #0]
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	42470000 	submi	r0, r7, #0

080009cc <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <RCC_LSEConfig+0x1c>)
 80009ce:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80009d0:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80009d2:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80009d4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80009d6:	d005      	beq.n	80009e4 <RCC_LSEConfig+0x18>
 80009d8:	2804      	cmp	r0, #4
 80009da:	d102      	bne.n	80009e2 <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80009dc:	2205      	movs	r2, #5
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	4770      	bx	lr
 80009e2:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80009e4:	7018      	strb	r0, [r3, #0]
      break;
 80009e6:	4770      	bx	lr
 80009e8:	40023870 	andmi	r3, r2, r0, ror r8

080009ec <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80009ec:	4b01      	ldr	r3, [pc, #4]	; (80009f4 <RCC_LSICmd+0x8>)
 80009ee:	6018      	str	r0, [r3, #0]
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

080009f8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80009f8:	b430      	push	{r4, r5}
 80009fa:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80009fc:	4d06      	ldr	r5, [pc, #24]	; (8000a18 <RCC_PLLConfig+0x20>)
 80009fe:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8000a02:	085b      	lsrs	r3, r3, #1
 8000a04:	4301      	orrs	r1, r0
 8000a06:	3b01      	subs	r3, #1
 8000a08:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8000a0c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000a10:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 8000a12:	bc30      	pop	{r4, r5}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	andmi	r3, r2, r0, lsl #16

08000a1c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000a1c:	4b01      	ldr	r3, [pc, #4]	; (8000a24 <RCC_PLLCmd+0x8>)
 8000a1e:	6018      	str	r0, [r3, #0]
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	42470060 	submi	r0, r7, #96	; 0x60

08000a28 <RCC_PLLI2SConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8000a28:	0712      	lsls	r2, r2, #28
 8000a2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <RCC_PLLI2SConfig+0x14>)
 8000a30:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000a34:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	andmi	r3, r2, r0, lsl #16

08000a40 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000a40:	4b01      	ldr	r3, [pc, #4]	; (8000a48 <RCC_PLLI2SCmd+0x8>)
 8000a42:	6018      	str	r0, [r3, #0]
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	42470068 	submi	r0, r7, #104	; 0x68

08000a4c <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000a4c:	0712      	lsls	r2, r2, #28
 8000a4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000a52:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <RCC_PLLSAIConfig+0x14>)
 8000a54:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000a58:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	andmi	r3, r2, r0, lsl #16

08000a64 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000a64:	4b01      	ldr	r3, [pc, #4]	; (8000a6c <RCC_PLLSAICmd+0x8>)
 8000a66:	6018      	str	r0, [r3, #0]
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	42470070 	submi	r0, r7, #112	; 0x70

08000a70 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000a70:	4b01      	ldr	r3, [pc, #4]	; (8000a78 <RCC_ClockSecuritySystemCmd+0x8>)
 8000a72:	6018      	str	r0, [r3, #0]
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	4247004c 	submi	r0, r7, #76	; 0x4c

08000a7c <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <RCC_MCO1Config+0x10>)
 8000a7e:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000a80:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000a84:	4311      	orrs	r1, r2
 8000a86:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a88:	6098      	str	r0, [r3, #8]
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	andmi	r3, r2, r0, lsl #16

08000a90 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <RCC_MCO2Config+0x10>)
 8000a92:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000a94:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a9c:	6098      	str	r0, [r3, #8]
 8000a9e:	4770      	bx	lr
 8000aa0:	40023800 	andmi	r3, r2, r0, lsl #16

08000aa4 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <RCC_SYSCLKConfig+0x10>)
 8000aa6:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000aa8:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000aac:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000aae:	6098      	str	r0, [r3, #8]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	andmi	r3, r2, r0, lsl #16

08000ab8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <RCC_GetSYSCLKSource+0xc>)
 8000aba:	6898      	ldr	r0, [r3, #8]
}
 8000abc:	f000 000c 	and.w	r0, r0, #12
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	andmi	r3, r2, r0, lsl #16

08000ac8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <RCC_HCLKConfig+0x10>)
 8000aca:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000acc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000ad0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ad2:	6098      	str	r0, [r3, #8]
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	andmi	r3, r2, r0, lsl #16

08000adc <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <RCC_PCLK1Config+0x10>)
 8000ade:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000ae0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000ae4:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ae6:	6098      	str	r0, [r3, #8]
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	andmi	r3, r2, r0, lsl #16

08000af0 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <RCC_PCLK2Config+0x10>)
 8000af2:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000af4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000af8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000afc:	6098      	str	r0, [r3, #8]
 8000afe:	4770      	bx	lr
 8000b00:	40023800 	andmi	r3, r2, r0, lsl #16

08000b04 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <RCC_GetClocksFreq+0x80>)
 8000b06:	6893      	ldr	r3, [r2, #8]
 8000b08:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000b0c:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b0e:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000b10:	d01b      	beq.n	8000b4a <RCC_GetClocksFreq+0x46>
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d01c      	beq.n	8000b50 <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <RCC_GetClocksFreq+0x84>)
 8000b18:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b1a:	491a      	ldr	r1, [pc, #104]	; (8000b84 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b1e:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 8000b20:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000b24:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b26:	40e3      	lsrs	r3, r4
 8000b28:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b2a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8000b2c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000b30:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b32:	fa23 f404 	lsr.w	r4, r3, r4
 8000b36:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b38:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8000b3e:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000b42:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b44:	40d3      	lsrs	r3, r2
 8000b46:	60c3      	str	r3, [r0, #12]
}
 8000b48:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <RCC_GetClocksFreq+0x8c>)
 8000b4c:	6003      	str	r3, [r0, #0]
      break;
 8000b4e:	e7e4      	b.n	8000b1a <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b50:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b52:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b54:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8000b56:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b58:	bf4c      	ite	mi
 8000b5a:	4b0d      	ldrmi	r3, [pc, #52]	; (8000b90 <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b5c:	4b0a      	ldrpl	r3, [pc, #40]	; (8000b88 <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b62:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <RCC_GetClocksFreq+0x80>)
 8000b70:	6852      	ldr	r2, [r2, #4]
 8000b72:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8000b76:	3201      	adds	r2, #1
 8000b78:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b7e:	6003      	str	r3, [r0, #0]
      break;
 8000b80:	e7cb      	b.n	8000b1a <RCC_GetClocksFreq+0x16>
 8000b82:	bf00      	nop
 8000b84:	40023800 	andmi	r3, r2, r0, lsl #16
 8000b88:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8000b8c:	20000014 	andcs	r0, r0, r4, lsl r0
 8000b90:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08000b94 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000b94:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b9c:	d109      	bne.n	8000bb2 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <RCC_RTCCLKConfig+0x2c>)
 8000ba0:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000ba2:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000ba6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bae:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000bb0:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000bb2:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <RCC_RTCCLKConfig+0x2c>)
 8000bb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000bb6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	6718      	str	r0, [r3, #112]	; 0x70
 8000bbe:	4770      	bx	lr
 8000bc0:	40023800 	andmi	r3, r2, r0, lsl #16

08000bc4 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000bc4:	4b01      	ldr	r3, [pc, #4]	; (8000bcc <RCC_RTCCLKCmd+0x8>)
 8000bc6:	6018      	str	r0, [r3, #0]
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

08000bd0 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <RCC_BackupResetCmd+0x8>)
 8000bd2:	6018      	str	r0, [r3, #0]
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	42470e40 	submi	r0, r7, #64, 28	; 0x400

08000bdc <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000bdc:	4b01      	ldr	r3, [pc, #4]	; (8000be4 <RCC_I2SCLKConfig+0x8>)
 8000bde:	6018      	str	r0, [r3, #0]
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	4247015c 	submi	r0, r7, #92, 2

08000be8 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <RCC_SAIPLLI2SClkDivConfig+0x14>)
 8000bea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000bee:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8000bf0:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000bf4:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000bfa:	4770      	bx	lr
 8000bfc:	40023800 	andmi	r3, r2, r0, lsl #16

08000c00 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 8000c02:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000c06:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8000c08:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000c0c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	andmi	r3, r2, r0, lsl #16

08000c1c <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <RCC_SAIBlockACLKConfig+0x14>)
 8000c1e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000c22:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8000c26:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c28:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	andmi	r3, r2, r0, lsl #16

08000c34 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <RCC_SAIBlockBCLKConfig+0x14>)
 8000c36:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8000c3a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8000c3e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c40:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	andmi	r3, r2, r0, lsl #16

08000c4c <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <RCC_LTDCCLKDivConfig+0x14>)
 8000c4e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000c52:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000c56:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c58:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	andmi	r3, r2, r0, lsl #16

08000c64 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000c64:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <RCC_TIMCLKPresConfig+0x8>)
 8000c66:	6018      	str	r0, [r3, #0]
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	424711e0 	submi	r1, r7, #224, 2	; 0x38

08000c70 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <RCC_AHB1PeriphClockCmd+0x14>)
 8000c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c74:	b919      	cbnz	r1, 8000c7e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000c76:	ea22 0000 	bic.w	r0, r2, r0
 8000c7a:	6318      	str	r0, [r3, #48]	; 0x30
 8000c7c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c7e:	4310      	orrs	r0, r2
 8000c80:	6318      	str	r0, [r3, #48]	; 0x30
 8000c82:	4770      	bx	lr
 8000c84:	40023800 	andmi	r3, r2, r0, lsl #16

08000c88 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <RCC_AHB2PeriphClockCmd+0x14>)
 8000c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c8c:	b919      	cbnz	r1, 8000c96 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000c8e:	ea22 0000 	bic.w	r0, r2, r0
 8000c92:	6358      	str	r0, [r3, #52]	; 0x34
 8000c94:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c96:	4310      	orrs	r0, r2
 8000c98:	6358      	str	r0, [r3, #52]	; 0x34
 8000c9a:	4770      	bx	lr
 8000c9c:	40023800 	andmi	r3, r2, r0, lsl #16

08000ca0 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <RCC_AHB3PeriphClockCmd+0x14>)
 8000ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ca4:	b919      	cbnz	r1, 8000cae <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000ca6:	ea22 0000 	bic.w	r0, r2, r0
 8000caa:	6398      	str	r0, [r3, #56]	; 0x38
 8000cac:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000cae:	4310      	orrs	r0, r2
 8000cb0:	6398      	str	r0, [r3, #56]	; 0x38
 8000cb2:	4770      	bx	lr
 8000cb4:	40023800 	andmi	r3, r2, r0, lsl #16

08000cb8 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <RCC_APB1PeriphClockCmd+0x14>)
 8000cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cbc:	b919      	cbnz	r1, 8000cc6 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000cbe:	ea22 0000 	bic.w	r0, r2, r0
 8000cc2:	6418      	str	r0, [r3, #64]	; 0x40
 8000cc4:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cc6:	4310      	orrs	r0, r2
 8000cc8:	6418      	str	r0, [r3, #64]	; 0x40
 8000cca:	4770      	bx	lr
 8000ccc:	40023800 	andmi	r3, r2, r0, lsl #16

08000cd0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <RCC_APB2PeriphClockCmd+0x14>)
 8000cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cd4:	b919      	cbnz	r1, 8000cde <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000cd6:	ea22 0000 	bic.w	r0, r2, r0
 8000cda:	6458      	str	r0, [r3, #68]	; 0x44
 8000cdc:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cde:	4310      	orrs	r0, r2
 8000ce0:	6458      	str	r0, [r3, #68]	; 0x44
 8000ce2:	4770      	bx	lr
 8000ce4:	40023800 	andmi	r3, r2, r0, lsl #16

08000ce8 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <RCC_AHB1PeriphResetCmd+0x14>)
 8000cea:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cec:	b919      	cbnz	r1, 8000cf6 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000cee:	ea22 0000 	bic.w	r0, r2, r0
 8000cf2:	6118      	str	r0, [r3, #16]
 8000cf4:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000cf6:	4310      	orrs	r0, r2
 8000cf8:	6118      	str	r0, [r3, #16]
 8000cfa:	4770      	bx	lr
 8000cfc:	40023800 	andmi	r3, r2, r0, lsl #16

08000d00 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <RCC_AHB2PeriphResetCmd+0x14>)
 8000d02:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d04:	b919      	cbnz	r1, 8000d0e <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000d06:	ea22 0000 	bic.w	r0, r2, r0
 8000d0a:	6158      	str	r0, [r3, #20]
 8000d0c:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000d0e:	4310      	orrs	r0, r2
 8000d10:	6158      	str	r0, [r3, #20]
 8000d12:	4770      	bx	lr
 8000d14:	40023800 	andmi	r3, r2, r0, lsl #16

08000d18 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <RCC_AHB3PeriphResetCmd+0x14>)
 8000d1a:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d1c:	b919      	cbnz	r1, 8000d26 <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000d1e:	ea22 0000 	bic.w	r0, r2, r0
 8000d22:	6198      	str	r0, [r3, #24]
 8000d24:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000d26:	4310      	orrs	r0, r2
 8000d28:	6198      	str	r0, [r3, #24]
 8000d2a:	4770      	bx	lr
 8000d2c:	40023800 	andmi	r3, r2, r0, lsl #16

08000d30 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <RCC_APB1PeriphResetCmd+0x14>)
 8000d32:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d34:	b919      	cbnz	r1, 8000d3e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000d36:	ea22 0000 	bic.w	r0, r2, r0
 8000d3a:	6218      	str	r0, [r3, #32]
 8000d3c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d3e:	4310      	orrs	r0, r2
 8000d40:	6218      	str	r0, [r3, #32]
 8000d42:	4770      	bx	lr
 8000d44:	40023800 	andmi	r3, r2, r0, lsl #16

08000d48 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <RCC_APB2PeriphResetCmd+0x14>)
 8000d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d4c:	b919      	cbnz	r1, 8000d56 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000d4e:	ea22 0000 	bic.w	r0, r2, r0
 8000d52:	6258      	str	r0, [r3, #36]	; 0x24
 8000d54:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d56:	4310      	orrs	r0, r2
 8000d58:	6258      	str	r0, [r3, #36]	; 0x24
 8000d5a:	4770      	bx	lr
 8000d5c:	40023800 	andmi	r3, r2, r0, lsl #16

08000d60 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8000d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d64:	b919      	cbnz	r1, 8000d6e <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000d66:	ea22 0000 	bic.w	r0, r2, r0
 8000d6a:	6518      	str	r0, [r3, #80]	; 0x50
 8000d6c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d6e:	4310      	orrs	r0, r2
 8000d70:	6518      	str	r0, [r3, #80]	; 0x50
 8000d72:	4770      	bx	lr
 8000d74:	40023800 	andmi	r3, r2, r0, lsl #16

08000d78 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 8000d7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d7c:	b919      	cbnz	r1, 8000d86 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000d7e:	ea22 0000 	bic.w	r0, r2, r0
 8000d82:	6558      	str	r0, [r3, #84]	; 0x54
 8000d84:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d86:	4310      	orrs	r0, r2
 8000d88:	6558      	str	r0, [r3, #84]	; 0x54
 8000d8a:	4770      	bx	lr
 8000d8c:	40023800 	andmi	r3, r2, r0, lsl #16

08000d90 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8000d92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d94:	b919      	cbnz	r1, 8000d9e <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000d96:	ea22 0000 	bic.w	r0, r2, r0
 8000d9a:	6598      	str	r0, [r3, #88]	; 0x58
 8000d9c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000d9e:	4310      	orrs	r0, r2
 8000da0:	6598      	str	r0, [r3, #88]	; 0x58
 8000da2:	4770      	bx	lr
 8000da4:	40023800 	andmi	r3, r2, r0, lsl #16

08000da8 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8000daa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dac:	b919      	cbnz	r1, 8000db6 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000dae:	ea22 0000 	bic.w	r0, r2, r0
 8000db2:	6618      	str	r0, [r3, #96]	; 0x60
 8000db4:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000db6:	4310      	orrs	r0, r2
 8000db8:	6618      	str	r0, [r3, #96]	; 0x60
 8000dba:	4770      	bx	lr
 8000dbc:	40023800 	andmi	r3, r2, r0, lsl #16

08000dc0 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 8000dc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dc4:	b919      	cbnz	r1, 8000dce <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000dc6:	ea22 0000 	bic.w	r0, r2, r0
 8000dca:	6658      	str	r0, [r3, #100]	; 0x64
 8000dcc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000dce:	4310      	orrs	r0, r2
 8000dd0:	6658      	str	r0, [r3, #100]	; 0x64
 8000dd2:	4770      	bx	lr
 8000dd4:	40023800 	andmi	r3, r2, r0, lsl #16

08000dd8 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <RCC_ITConfig+0x14>)
 8000dda:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ddc:	b919      	cbnz	r1, 8000de6 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000dde:	ea22 0000 	bic.w	r0, r2, r0
 8000de2:	7018      	strb	r0, [r3, #0]
 8000de4:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000de6:	4310      	orrs	r0, r2
 8000de8:	7018      	strb	r0, [r3, #0]
 8000dea:	4770      	bx	lr
 8000dec:	4002380d 	andmi	r3, r2, sp, lsl #16

08000df0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000df0:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d00b      	beq.n	8000e0e <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000df6:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <RCC_GetFlagStatus+0x30>)
 8000dfa:	bf0c      	ite	eq
 8000dfc:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000dfe:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000e00:	f000 001f 	and.w	r0, r0, #31
 8000e04:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000e08:	f000 0001 	and.w	r0, r0, #1
 8000e0c:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <RCC_GetFlagStatus+0x30>)
 8000e10:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000e12:	f000 001f 	and.w	r0, r0, #31
 8000e16:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000e1a:	f000 0001 	and.w	r0, r0, #1
 8000e1e:	4770      	bx	lr
 8000e20:	40023800 	andmi	r3, r2, r0, lsl #16

08000e24 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <RCC_ClearFlag+0xc>)
 8000e26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000e28:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e2c:	675a      	str	r2, [r3, #116]	; 0x74
 8000e2e:	4770      	bx	lr
 8000e30:	40023800 	andmi	r3, r2, r0, lsl #16

08000e34 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <RCC_GetITStatus+0x10>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2000      	moveq	r0, #0
 8000e3e:	2001      	movne	r0, #1
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40023800 	andmi	r3, r2, r0, lsl #16

08000e48 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000e48:	4b01      	ldr	r3, [pc, #4]	; (8000e50 <RCC_ClearITPendingBit+0x8>)
 8000e4a:	7018      	strb	r0, [r3, #0]
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	4002380e 	andmi	r3, r2, lr, lsl #16

08000e54 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000e54:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <USART_DeInit+0xec>)
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	d021      	beq.n	8000ea0 <USART_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000e5c:	4b39      	ldr	r3, [pc, #228]	; (8000f44 <USART_DeInit+0xf0>)
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d028      	beq.n	8000eb4 <USART_DeInit+0x60>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <USART_DeInit+0xf4>)
 8000e64:	4298      	cmp	r0, r3
 8000e66:	d031      	beq.n	8000ecc <USART_DeInit+0x78>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000e68:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <USART_DeInit+0xf8>)
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d03a      	beq.n	8000ee4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <USART_DeInit+0xfc>)
 8000e70:	4298      	cmp	r0, r3
 8000e72:	d043      	beq.n	8000efc <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <USART_DeInit+0x100>)
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d04c      	beq.n	8000f14 <USART_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <USART_DeInit+0x104>)
 8000e7c:	4298      	cmp	r0, r3
 8000e7e:	d053      	beq.n	8000f28 <USART_DeInit+0xd4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <USART_DeInit+0x108>)
 8000e82:	4298      	cmp	r0, r3
 8000e84:	d000      	beq.n	8000e88 <USART_DeInit+0x34>
 8000e86:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8000e88:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	f7ff ff4f 	bl	8000d30 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000e92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e96:	2100      	movs	r1, #0
    }
  }
}
 8000e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000e9c:	f7ff bf48 	b.w	8000d30 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000ea0:	2010      	movs	r0, #16
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	f7ff ff50 	bl	8000d48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000ea8:	2010      	movs	r0, #16
 8000eaa:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000eac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000eb0:	f7ff bf4a 	b.w	8000d48 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000eb4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000eb8:	2101      	movs	r1, #1
 8000eba:	f7ff ff39 	bl	8000d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000ebe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ec2:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000ec8:	f7ff bf32 	b.w	8000d30 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000ecc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	f7ff ff2d 	bl	8000d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000ed6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000eda:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000edc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000ee0:	f7ff bf26 	b.w	8000d30 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000ee4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ee8:	2101      	movs	r1, #1
 8000eea:	f7ff ff21 	bl	8000d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000eee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ef2:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000ef8:	f7ff bf1a 	b.w	8000d30 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000efc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f00:	2101      	movs	r1, #1
 8000f02:	f7ff ff15 	bl	8000d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f0a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000f10:	f7ff bf0e 	b.w	8000d30 <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000f14:	2020      	movs	r0, #32
 8000f16:	2101      	movs	r1, #1
 8000f18:	f7ff ff16 	bl	8000d48 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000f1c:	2020      	movs	r0, #32
 8000f1e:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000f24:	f7ff bf10 	b.w	8000d48 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8000f28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	f7ff feff 	bl	8000d30 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000f32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f36:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000f3c:	f7ff bef8 	b.w	8000d30 <RCC_APB1PeriphResetCmd>
 8000f40:	40011000 	andmi	r1, r1, r0
 8000f44:	40004400 	andmi	r4, r0, r0, lsl #8
 8000f48:	40004800 	andmi	r4, r0, r0, lsl #16
 8000f4c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8000f50:	40005000 	andmi	r5, r0, r0
 8000f54:	40011400 	andmi	r1, r1, r0, lsl #8
 8000f58:	40007800 	andmi	r7, r0, r0, lsl #16
 8000f5c:	40007c00 	andmi	r7, r0, r0, lsl #24

08000f60 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f64:	8a01      	ldrh	r1, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000f66:	88ef      	ldrh	r7, [r5, #6]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f68:	892e      	ldrh	r6, [r5, #8]
 8000f6a:	88ab      	ldrh	r3, [r5, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000f6c:	89aa      	ldrh	r2, [r5, #12]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f6e:	b289      	uxth	r1, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f70:	4604      	mov	r4, r0

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f72:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f76:	4339      	orrs	r1, r7

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f78:	8968      	ldrh	r0, [r5, #10]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f7a:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000f7c:	89a1      	ldrh	r1, [r4, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f7e:	4333      	orrs	r3, r6
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000f80:	b289      	uxth	r1, r1

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f82:	4303      	orrs	r3, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f84:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000f88:	f021 010c 	bic.w	r1, r1, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f8c:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000f92:	8aa3      	ldrh	r3, [r4, #20]
 8000f94:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f9a:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f9c:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f9e:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000fa0:	4668      	mov	r0, sp
 8000fa2:	f7ff fdaf 	bl	8000b04 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <USART_Init+0xbc>)
 8000fa8:	429c      	cmp	r4, r3
 8000faa:	d029      	beq.n	8001000 <USART_Init+0xa0>
 8000fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	d025      	beq.n	8001000 <USART_Init+0xa0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000fb4:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fb6:	89a2      	ldrh	r2, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000fb8:	6829      	ldr	r1, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fba:	89a0      	ldrh	r0, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fbc:	b212      	sxth	r2, r2
 8000fbe:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000fc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fc4:	bfb4      	ite	lt
 8000fc6:	0049      	lsllt	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000fc8:	0089      	lslge	r1, r1, #2
 8000fca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fce:	fbb3 f2f1 	udiv	r2, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8000fd2:	4913      	ldr	r1, [pc, #76]	; (8001020 <USART_Init+0xc0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fd4:	b200      	sxth	r0, r0
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000fd6:	fba1 5302 	umull	r5, r3, r1, r2
 8000fda:	095b      	lsrs	r3, r3, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000fdc:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fde:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000fe0:	fb03 2215 	mls	r2, r3, r5, r2
 8000fe4:	ea4f 1303 	mov.w	r3, r3, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fe8:	db0c      	blt.n	8001004 <USART_Init+0xa4>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	3232      	adds	r2, #50	; 0x32
 8000fee:	fba1 5102 	umull	r5, r1, r1, r2
 8000ff2:	f3c1 1143 	ubfx	r1, r1, #5, #4
 8000ff6:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	8123      	strh	r3, [r4, #8]
}
 8000ffc:	b005      	add	sp, #20
 8000ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001000:	9b03      	ldr	r3, [sp, #12]
 8001002:	e7d8      	b.n	8000fb6 <USART_Init+0x56>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001004:	00d2      	lsls	r2, r2, #3
 8001006:	3232      	adds	r2, #50	; 0x32
 8001008:	fba1 0102 	umull	r0, r1, r1, r2
 800100c:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8001010:	430b      	orrs	r3, r1
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001012:	b29b      	uxth	r3, r3
 8001014:	8123      	strh	r3, [r4, #8]
}
 8001016:	b005      	add	sp, #20
 8001018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101a:	bf00      	nop
 800101c:	40011000 	andmi	r1, r1, r0
 8001020:	51eb851f 	mvnpl	r8, pc, lsl r5

08001024 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001024:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001026:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800102a:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800102c:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800102e:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001030:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001032:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001034:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001036:	8183      	strh	r3, [r0, #12]
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800103c:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800103e:	880a      	ldrh	r2, [r1, #0]
 8001040:	884d      	ldrh	r5, [r1, #2]
 8001042:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001044:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001046:	88c9      	ldrh	r1, [r1, #6]
 8001048:	432a      	orrs	r2, r5
 800104a:	4322      	orrs	r2, r4
 800104c:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800104e:	b29b      	uxth	r3, r3
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001050:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001052:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001056:	4313      	orrs	r3, r2
 8001058:	8203      	strh	r3, [r0, #16]
}
 800105a:	bc30      	pop	{r4, r5}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001060:	2300      	movs	r3, #0
 8001062:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001064:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001066:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001068:	80c3      	strh	r3, [r0, #6]
 800106a:	4770      	bx	lr

0800106c <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800106c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800106e:	b929      	cbnz	r1, 800107c <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	0c1b      	lsrs	r3, r3, #16
 8001078:	8183      	strh	r3, [r0, #12]
 800107a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800107c:	b29b      	uxth	r3, r3
 800107e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001082:	8183      	strh	r3, [r0, #12]
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001088:	8b03      	ldrh	r3, [r0, #24]
 800108a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800108e:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001090:	8b03      	ldrh	r3, [r0, #24]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4319      	orrs	r1, r3
 8001096:	8301      	strh	r1, [r0, #24]
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800109c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800109e:	b919      	cbnz	r1, 80010a8 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80010a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010a4:	8183      	strh	r3, [r0, #12]
 80010a6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80010a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	8183      	strh	r3, [r0, #12]
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010b8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010ba:	b929      	cbnz	r1, 80010c8 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80010bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	0c1b      	lsrs	r3, r3, #16
 80010c4:	8283      	strh	r3, [r0, #20]
 80010c6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ce:	8283      	strh	r3, [r0, #20]
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80010d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80010d8:	8081      	strh	r1, [r0, #4]
 80010da:	4770      	bx	lr

080010dc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80010dc:	8880      	ldrh	r0, [r0, #4]
}
 80010de:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80010e2:	4770      	bx	lr

080010e4 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80010e4:	8a03      	ldrh	r3, [r0, #16]
 80010e6:	f023 030f 	bic.w	r3, r3, #15
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	0c1b      	lsrs	r3, r3, #16
 80010ee:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80010f0:	8a03      	ldrh	r3, [r0, #16]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4319      	orrs	r1, r3
 80010f6:	8201      	strh	r1, [r0, #16]
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80010fc:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80010fe:	b929      	cbnz	r1, 800110c <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001100:	f023 0302 	bic.w	r3, r3, #2
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	8183      	strh	r3, [r0, #12]
 800110a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800110c:	b29b      	uxth	r3, r3
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	8183      	strh	r3, [r0, #12]
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001118:	8983      	ldrh	r3, [r0, #12]
 800111a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	0c1b      	lsrs	r3, r3, #16
 8001122:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001124:	8983      	ldrh	r3, [r0, #12]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4319      	orrs	r1, r3
 800112a:	8181      	strh	r1, [r0, #12]
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001130:	8a03      	ldrh	r3, [r0, #16]
 8001132:	f023 0320 	bic.w	r3, r3, #32
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	0c1b      	lsrs	r3, r3, #16
 800113a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800113c:	8a03      	ldrh	r3, [r0, #16]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4319      	orrs	r1, r3
 8001142:	8201      	strh	r1, [r0, #16]
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001148:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800114a:	b929      	cbnz	r1, 8001158 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800114c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	0c1b      	lsrs	r3, r3, #16
 8001154:	8203      	strh	r3, [r0, #16]
 8001156:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001158:	b29b      	uxth	r3, r3
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	8203      	strh	r3, [r0, #16]
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001164:	8983      	ldrh	r3, [r0, #12]
 8001166:	b29b      	uxth	r3, r3
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	8183      	strh	r3, [r0, #12]
 800116e:	4770      	bx	lr

08001170 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001170:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001172:	b929      	cbnz	r1, 8001180 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001174:	f023 0308 	bic.w	r3, r3, #8
 8001178:	041b      	lsls	r3, r3, #16
 800117a:	0c1b      	lsrs	r3, r3, #16
 800117c:	8283      	strh	r3, [r0, #20]
 800117e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001180:	b29b      	uxth	r3, r3
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	8283      	strh	r3, [r0, #20]
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800118c:	8b03      	ldrh	r3, [r0, #24]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001192:	8b03      	ldrh	r3, [r0, #24]
 8001194:	b29b      	uxth	r3, r3
 8001196:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800119a:	8301      	strh	r1, [r0, #24]
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80011a0:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011a2:	b929      	cbnz	r1, 80011b0 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80011a4:	f023 0320 	bic.w	r3, r3, #32
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	0c1b      	lsrs	r3, r3, #16
 80011ac:	8283      	strh	r3, [r0, #20]
 80011ae:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	8283      	strh	r3, [r0, #20]
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011bc:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011be:	b929      	cbnz	r1, 80011cc <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80011c0:	f023 0310 	bic.w	r3, r3, #16
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	0c1b      	lsrs	r3, r3, #16
 80011c8:	8283      	strh	r3, [r0, #20]
 80011ca:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	8283      	strh	r3, [r0, #20]
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80011d8:	8a83      	ldrh	r3, [r0, #20]
 80011da:	f023 0304 	bic.w	r3, r3, #4
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80011e4:	8a83      	ldrh	r3, [r0, #20]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4319      	orrs	r1, r3
 80011ea:	8281      	strh	r1, [r0, #20]
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80011f0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80011f2:	b929      	cbnz	r1, 8001200 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80011f4:	f023 0302 	bic.w	r3, r3, #2
 80011f8:	041b      	lsls	r3, r3, #16
 80011fa:	0c1b      	lsrs	r3, r3, #16
 80011fc:	8283      	strh	r3, [r0, #20]
 80011fe:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001200:	b29b      	uxth	r3, r3
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	8283      	strh	r3, [r0, #20]
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800120c:	8a83      	ldrh	r3, [r0, #20]
 800120e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001210:	b91a      	cbnz	r2, 800121a <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001212:	ea23 0101 	bic.w	r1, r3, r1
 8001216:	8281      	strh	r1, [r0, #20]
 8001218:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800121a:	4319      	orrs	r1, r3
 800121c:	8281      	strh	r1, [r0, #20]
 800121e:	4770      	bx	lr

08001220 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001220:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001224:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001226:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800122a:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800122c:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800122e:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001232:	d010      	beq.n	8001256 <USART_ITConfig+0x36>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001234:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8001236:	bf0c      	ite	eq
 8001238:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800123a:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800123c:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 800123e:	b92a      	cbnz	r2, 800124c <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001240:	ea24 0303 	bic.w	r3, r4, r3
 8001244:	6003      	str	r3, [r0, #0]
  }
}
 8001246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800124a:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800124c:	4323      	orrs	r3, r4
 800124e:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001254:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8001256:	300c      	adds	r0, #12
 8001258:	e7f0      	b.n	800123c <USART_ITConfig+0x1c>
 800125a:	bf00      	nop

0800125c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800125c:	8803      	ldrh	r3, [r0, #0]
 800125e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001260:	bf0c      	ite	eq
 8001262:	2000      	moveq	r0, #0
 8001264:	2001      	movne	r0, #1
 8001266:	4770      	bx	lr

08001268 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001268:	43c9      	mvns	r1, r1
 800126a:	b289      	uxth	r1, r1
 800126c:	8001      	strh	r1, [r0, #0]
 800126e:	4770      	bx	lr

08001270 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001270:	b410      	push	{r4}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001272:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001276:	2401      	movs	r4, #1
 8001278:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800127c:	42a3      	cmp	r3, r4
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800127e:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001282:	d017      	beq.n	80012b4 <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001284:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8001286:	bf0c      	ite	eq
 8001288:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800128a:	8a83      	ldrhne	r3, [r0, #20]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001290:	8802      	ldrh	r2, [r0, #0]
 8001292:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001294:	b153      	cbz	r3, 80012ac <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001296:	0a09      	lsrs	r1, r1, #8
 8001298:	2301      	movs	r3, #1
 800129a:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800129e:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80012a0:	bf0c      	ite	eq
 80012a2:	2000      	moveq	r0, #0
 80012a4:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80012a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012aa:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80012ac:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80012ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012b2:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80012b4:	8983      	ldrh	r3, [r0, #12]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4013      	ands	r3, r2
 80012ba:	e7e9      	b.n	8001290 <USART_GetITStatus+0x20>

080012bc <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80012bc:	0a09      	lsrs	r1, r1, #8
 80012be:	2301      	movs	r3, #1
 80012c0:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80012c4:	43c9      	mvns	r1, r1
 80012c6:	b289      	uxth	r1, r1
 80012c8:	8001      	strh	r1, [r0, #0]
 80012ca:	4770      	bx	lr

080012cc <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80012cc:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80012ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012d2:	2101      	movs	r1, #1
 80012d4:	f7ff fd38 	bl	8000d48 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80012d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012dc:	2100      	movs	r1, #0
}
 80012de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80012e2:	f7ff bd31 	b.w	8000d48 <RCC_APB2PeriphResetCmd>
 80012e6:	bf00      	nop

080012e8 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80012e8:	4b01      	ldr	r3, [pc, #4]	; (80012f0 <SYSCFG_MemoryRemapConfig+0x8>)
 80012ea:	6018      	str	r0, [r3, #0]
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40013800 	andmi	r3, r1, r0, lsl #16

080012f4 <SYSCFG_MemorySwappingBank>:
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 80012f4:	4b01      	ldr	r3, [pc, #4]	; (80012fc <SYSCFG_MemorySwappingBank+0x8>)
 80012f6:	6018      	str	r0, [r3, #0]
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	42270020 	eormi	r0, r7, #32

08001300 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001300:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001308:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800130c:	f001 0103 	and.w	r1, r1, #3
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001310:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001312:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001314:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001316:	220f      	movs	r2, #15
 8001318:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800131a:	ea24 0202 	bic.w	r2, r4, r2
 800131e:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001320:	689a      	ldr	r2, [r3, #8]
}
 8001322:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001326:	4088      	lsls	r0, r1
 8001328:	4302      	orrs	r2, r0
 800132a:	609a      	str	r2, [r3, #8]
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8001330:	4b01      	ldr	r3, [pc, #4]	; (8001338 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8001332:	6018      	str	r0, [r3, #0]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	422700dc 	eormi	r0, r7, #220	; 0xdc

0800133c <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <SYSCFG_CompensationCellCmd+0x8>)
 800133e:	6018      	str	r0, [r3, #0]
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	42270400 	eormi	r0, r7, #0, 8

08001348 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <SYSCFG_GetCompensationCellStatus+0xc>)
 800134a:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800134c:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40013800 	andmi	r3, r1, r0, lsl #16

08001358 <memset>:
 8001358:	b4f0      	push	{r4, r5, r6, r7}
 800135a:	0784      	lsls	r4, r0, #30
 800135c:	d043      	beq.n	80013e6 <memset+0x8e>
 800135e:	1e54      	subs	r4, r2, #1
 8001360:	2a00      	cmp	r2, #0
 8001362:	d03e      	beq.n	80013e2 <memset+0x8a>
 8001364:	b2cd      	uxtb	r5, r1
 8001366:	4603      	mov	r3, r0
 8001368:	e003      	b.n	8001372 <memset+0x1a>
 800136a:	1e62      	subs	r2, r4, #1
 800136c:	2c00      	cmp	r4, #0
 800136e:	d038      	beq.n	80013e2 <memset+0x8a>
 8001370:	4614      	mov	r4, r2
 8001372:	f803 5b01 	strb.w	r5, [r3], #1
 8001376:	079a      	lsls	r2, r3, #30
 8001378:	d1f7      	bne.n	800136a <memset+0x12>
 800137a:	2c03      	cmp	r4, #3
 800137c:	d92a      	bls.n	80013d4 <memset+0x7c>
 800137e:	b2cd      	uxtb	r5, r1
 8001380:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001384:	2c0f      	cmp	r4, #15
 8001386:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800138a:	d915      	bls.n	80013b8 <memset+0x60>
 800138c:	f1a4 0710 	sub.w	r7, r4, #16
 8001390:	093f      	lsrs	r7, r7, #4
 8001392:	f103 0610 	add.w	r6, r3, #16
 8001396:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800139a:	461a      	mov	r2, r3
 800139c:	6015      	str	r5, [r2, #0]
 800139e:	6055      	str	r5, [r2, #4]
 80013a0:	6095      	str	r5, [r2, #8]
 80013a2:	60d5      	str	r5, [r2, #12]
 80013a4:	3210      	adds	r2, #16
 80013a6:	42b2      	cmp	r2, r6
 80013a8:	d1f8      	bne.n	800139c <memset+0x44>
 80013aa:	f004 040f 	and.w	r4, r4, #15
 80013ae:	3701      	adds	r7, #1
 80013b0:	2c03      	cmp	r4, #3
 80013b2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80013b6:	d90d      	bls.n	80013d4 <memset+0x7c>
 80013b8:	461e      	mov	r6, r3
 80013ba:	4622      	mov	r2, r4
 80013bc:	3a04      	subs	r2, #4
 80013be:	2a03      	cmp	r2, #3
 80013c0:	f846 5b04 	str.w	r5, [r6], #4
 80013c4:	d8fa      	bhi.n	80013bc <memset+0x64>
 80013c6:	1f22      	subs	r2, r4, #4
 80013c8:	f022 0203 	bic.w	r2, r2, #3
 80013cc:	3204      	adds	r2, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	f004 0403 	and.w	r4, r4, #3
 80013d4:	b12c      	cbz	r4, 80013e2 <memset+0x8a>
 80013d6:	b2c9      	uxtb	r1, r1
 80013d8:	441c      	add	r4, r3
 80013da:	f803 1b01 	strb.w	r1, [r3], #1
 80013de:	42a3      	cmp	r3, r4
 80013e0:	d1fb      	bne.n	80013da <memset+0x82>
 80013e2:	bcf0      	pop	{r4, r5, r6, r7}
 80013e4:	4770      	bx	lr
 80013e6:	4614      	mov	r4, r2
 80013e8:	4603      	mov	r3, r0
 80013ea:	e7c6      	b.n	800137a <memset+0x22>

Disassembly of section .rodata:

080013ec <.rodata>:
 80013ec:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0x554
 80013f0:	21676e69 	cmncs	r7, r9, ror #28
 80013f4:	00000a0d 	andeq	r0, r0, sp, lsl #20
 80013f8:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
 80013fc:	6f57206f 	svcvs	0x0057206f
 8001400:	21646c72 	smccs	18114	; 0x46c2
 8001404:	00000a0d 	andeq	r0, r0, sp, lsl #20
 8001408:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0x574
 800140c:	00000000 	andeq	r0, r0, r0
 8001410:	7473754a 	ldrbtvc	r7, [r3], #-1354	; 0x54a
 8001414:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 8001418:	4d545320 	ldclmi	3, cr5, [r4, #-128]	; 0xffffff80
 800141c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
 8001420:	20493932 	subcs	r3, r9, r2, lsr r9
 8001424:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 8001428:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 800142c:	65762079 	ldrbvs	r2, [r6, #-121]!	; 0x79
 8001430:	79666972 	stmdbvc	r6!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8001434:	41535520 	cmpmi	r3, r0, lsr #10
 8001438:	20315452 	eorscs	r5, r1, r2, asr r4
 800143c:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 8001440:	42535520 	subsmi	r5, r3, #32, 10	; 0x8000000
 8001444:	4c545420 	cfldrdmi	mvd5, [r4], {32}
 8001448:	62614320 	rsbvs	r4, r1, #32, 6	; 0x80000000
 800144c:	0a0d656c 	beq	835aa04 <_siccmram+0x35958c>
 8001450:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <AHBPrescTable>:
	...
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <SystemCoreClock>:
20000010:	0aba9500 	beq	1eea5418 <_eccmram+0xeea5418>

20000014 <APBAHBPrescTable>:
20000014:	00000000 	andeq	r0, r0, r0
20000018:	04030201 	streq	r0, [r3], #-513	; 0x201
2000001c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000020:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

Disassembly of section ._user_heap_stack:

20000024 <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600344d 	streq	r3, [r0], -sp, asr #8
  1c:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <_Min_Stack_Size+0x45c3c>
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000008fa 	strdeq	r0, [r0], -sl
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000156 	andeq	r0, r0, r6, asr r1
      10:	00052101 	andeq	r2, r5, r1, lsl #2
      14:	00002100 	andeq	r2, r0, r0, lsl #2
      18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000316 	andeq	r0, r0, r6, lsl r3
      2c:	0002da03 	andeq	sp, r2, r3, lsl #20
      30:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
      34:	02000000 	andeq	r0, r0, #0
      38:	03140801 	tsteq	r4, #65536	; 0x10000
      3c:	02020000 	andeq	r0, r2, #0
      40:	0000c105 	andeq	ip, r0, r5, lsl #2
      44:	00990300 	addseq	r0, r9, r0, lsl #6
      48:	26020000 	strcs	r0, [r2], -r0
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	7f070202 	svcvc	0x00070202
      54:	03000003 	movweq	r0, #3
      58:	000003fb 	strdeq	r0, [r0], -fp
      5c:	00623702 	rsbeq	r3, r2, r2, lsl #14
      60:	04020000 	streq	r0, [r2], #-0
      64:	00027b05 	andeq	r7, r2, r5, lsl #22
      68:	008e0300 	addeq	r0, lr, r0, lsl #6
      6c:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	89070402 	stmdbhi	r7, {r1, sl}
      78:	02000002 	andeq	r0, r0, #2
      7c:	02760508 	rsbseq	r0, r6, #8, 10	; 0x2000000
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	00028407 	andeq	r8, r2, r7, lsl #8
      88:	05040400 	streq	r0, [r4, #-1024]	; 0x400
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	8e070402 	cdphi	4, 0, cr0, cr7, cr2, {0}
      94:	03000002 	movweq	r0, #2
      98:	000002dc 	ldrdeq	r0, [r0], -ip
      9c:	002c2a03 	eoreq	r2, ip, r3, lsl #20
      a0:	9b030000 	blls	c00a8 <_Min_Stack_Size+0xbfca8>
      a4:	03000000 	movweq	r0, #0
      a8:	00004536 	andeq	r4, r0, r6, lsr r5
      ac:	03fd0300 	mvnseq	r0, #0, 6
      b0:	41030000 	mrsmi	r0, (UNDEF: 3)
      b4:	00000057 	andeq	r0, r0, r7, asr r0
      b8:	00009003 	andeq	r9, r0, r3
      bc:	69420300 	stmdbvs	r2, {r8, r9}^
      c0:	02000000 	andeq	r0, r0, #0
      c4:	00720704 	rsbseq	r0, r2, r4, lsl #14
      c8:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
      cc:	06000000 	streq	r0, [r0], -r0
      d0:	000000b8 	strheq	r0, [r0], -r8
      d4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      d8:	0000c307 	andeq	ip, r0, r7, lsl #6
      dc:	05000100 	streq	r0, [r0, #-256]	; 0x100
      e0:	000000a2 	andeq	r0, r0, r2, lsr #1
      e4:	0000ad05 	andeq	sl, r0, r5, lsl #26
      e8:	04010800 	streq	r0, [r1], #-2048	; 0x800
      ec:	00ff01f7 	ldrshteq	r0, [pc], #23
      f0:	00090000 	andeq	r0, r9, r0
      f4:	0000000a 	andeq	r0, r0, sl
      f8:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
      fc:	0b000100 	bleq	504 <_Min_Stack_Size+0x104>
     100:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     104:	e901f704 	stmdb	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
     108:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     10c:	01f90401 	mvnseq	r0, r1, lsl #8
     110:	00000121 	andeq	r0, r0, r1, lsr #2
     114:	0003f309 	andeq	pc, r3, r9, lsl #6
     118:	05090000 	streq	r0, [r9, #-0]
     11c:	01000004 	tsteq	r0, r4
     120:	05280b00 	streq	r0, [r8, #-2816]!	; 0xb00
     124:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
     128:	00010b01 	andeq	r0, r1, r1, lsl #22
     12c:	04280c00 	strteq	r0, [r8], #-3072	; 0xc00
     130:	01b903d4 			; <UNDEFINED> instruction: 0x01b903d4
     134:	d40d0000 	strle	r0, [sp], #-0
     138:	04000002 	streq	r0, [r0], #-2
     13c:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
     140:	0d000000 	stceq	0, cr0, [r0, #-0]
     144:	00000140 	andeq	r0, r0, r0, asr #2
     148:	ca03d704 	bgt	f5d60 <_Min_Stack_Size+0xf5960>
     14c:	04000000 	streq	r0, [r0], #-0
     150:	00026e0d 	andeq	r6, r2, sp, lsl #28
     154:	03d80400 	bicseq	r0, r8, #0, 8
     158:	000000ca 	andeq	r0, r0, sl, asr #1
     15c:	02a90d08 	adceq	r0, r9, #8, 26	; 0x200
     160:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
     164:	0000ca03 	andeq	ip, r0, r3, lsl #20
     168:	490e0c00 	stmdbmi	lr, {sl, fp}
     16c:	04005244 	streq	r5, [r0], #-580	; 0x244
     170:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
     174:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     178:	0052444f 	subseq	r4, r2, pc, asr #8
     17c:	ca03db04 	bgt	f6d94 <_Min_Stack_Size+0xf6994>
     180:	14000000 	strne	r0, [r0], #-0
     184:	0005380d 	andeq	r3, r5, sp, lsl #16
     188:	03dc0400 	bicseq	r0, ip, #0, 8
     18c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     190:	02bc0d18 	adcseq	r0, ip, #24, 26	; 0x600
     194:	dd040000 	stcle	0, cr0, [r4, #-0]
     198:	0000df03 	andeq	sp, r0, r3, lsl #30
     19c:	4f0d1a00 	svcmi	0x000d1a00
     1a0:	04000005 	streq	r0, [r0], #-5
     1a4:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
     1a8:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     1ac:	00524641 	subseq	r4, r2, r1, asr #12
     1b0:	b903df04 	stmdblt	r3, {r2, r8, r9, sl, fp, ip, lr, pc}
     1b4:	20000001 	andcs	r0, r0, r1
     1b8:	00cf0500 	sbceq	r0, pc, r0, lsl #10
     1bc:	000b0000 	andeq	r0, fp, r0
     1c0:	04000000 	streq	r0, [r0], #-0
     1c4:	012d03e0 	smulwteq	sp, r0, r3
     1c8:	1c0c0000 	stcne	0, cr0, [ip], {-0}
     1cc:	88052604 	stmdahi	r5, {r2, r9, sl, sp}
     1d0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     1d4:	04005253 	streq	r5, [r0], #-595	; 0x253
     1d8:	00df0528 	sbcseq	r0, pc, r8, lsr #10
     1dc:	0d000000 	stceq	0, cr0, [r0, #-0]
     1e0:	00000432 	andeq	r0, r0, r2, lsr r4
     1e4:	a2052904 	andge	r2, r5, #4, 18	; 0x10000
     1e8:	02000000 	andeq	r0, r0, #0
     1ec:	0052440e 	subseq	r4, r2, lr, lsl #8
     1f0:	df052a04 	svcle	0x00052a04
     1f4:	04000000 	streq	r0, [r0], #-0
     1f8:	00043c0d 	andeq	r3, r4, sp, lsl #24
     1fc:	052b0400 	streq	r0, [fp, #-1024]!	; 0x400
     200:	000000a2 	andeq	r0, r0, r2, lsr #1
     204:	52420e06 	subpl	r0, r2, #6, 28	; 0x60
     208:	2c040052 	stccs	0, cr0, [r4], {82}	; 0x52
     20c:	0000df05 	andeq	sp, r0, r5, lsl #30
     210:	460d0800 	strmi	r0, [sp], -r0, lsl #16
     214:	04000004 	streq	r0, [r0], #-4
     218:	00a2052d 	adceq	r0, r2, sp, lsr #10
     21c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     220:	00315243 	eorseq	r5, r1, r3, asr #4
     224:	df052e04 	svcle	0x00052e04
     228:	0c000000 	stceq	0, cr0, [r0], {-0}
     22c:	0004500d 	andeq	r5, r4, sp
     230:	052f0400 	streq	r0, [pc, #-1024]!	; fffffe38 <_estack+0xdffcfe38>
     234:	000000a2 	andeq	r0, r0, r2, lsr #1
     238:	52430e0e 	subpl	r0, r3, #14, 28	; 0xe0
     23c:	30040032 	andcc	r0, r4, r2, lsr r0
     240:	0000df05 	andeq	sp, r0, r5, lsl #30
     244:	5a0d1000 	bpl	34424c <_Min_Stack_Size+0x343e4c>
     248:	04000004 	streq	r0, [r0], #-4
     24c:	00a20531 	adceq	r0, r2, r1, lsr r5
     250:	0e120000 	cdpeq	0, 1, cr0, cr2, cr0, {0}
     254:	00335243 	eorseq	r5, r3, r3, asr #4
     258:	df053204 	svcle	0x00053204
     25c:	14000000 	strne	r0, [r0], #-0
     260:	0004640d 	andeq	r6, r4, sp, lsl #8
     264:	05330400 	ldreq	r0, [r3, #-1024]!	; 0x400
     268:	000000a2 	andeq	r0, r0, r2, lsr #1
     26c:	030f0d16 	movweq	r0, #64790	; 0xfd16
     270:	34040000 	strcc	r0, [r4], #-0
     274:	0000df05 	andeq	sp, r0, r5, lsl #30
     278:	6e0d1800 	cdpvs	8, 0, cr1, cr13, cr0, {0}
     27c:	04000004 	streq	r0, [r0], #-4
     280:	00a20535 	adceq	r0, r2, r5, lsr r5
     284:	001a0000 	andseq	r0, sl, r0
     288:	0000a40b 	andeq	sl, r0, fp, lsl #8
     28c:	05360400 	ldreq	r0, [r6, #-1024]!	; 0x400
     290:	000001ca 	andeq	r0, r0, sl, asr #3
     294:	4205010f 	andmi	r0, r5, #-1073741821	; 0xc0000003
     298:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     29c:	0002af09 	andeq	sl, r2, r9, lsl #30
     2a0:	9b090000 	blls	2402a8 <_Min_Stack_Size+0x23fea8>
     2a4:	01000002 	tsteq	r0, r2
     2a8:	0000d609 	andeq	sp, r0, r9, lsl #12
     2ac:	10090200 	andne	r0, r9, r0, lsl #4
     2b0:	03000001 	movweq	r0, #1
     2b4:	00560300 	subseq	r0, r6, r0, lsl #6
     2b8:	47050000 	strmi	r0, [r5, -r0]
     2bc:	00000294 	muleq	r0, r4, r2
     2c0:	4f05010f 	svcmi	0x0005010f
     2c4:	000002d5 	ldrdeq	r0, [r0], -r5
     2c8:	0002f409 	andeq	pc, r2, r9, lsl #8
     2cc:	7b090000 	blvc	2402d4 <_Min_Stack_Size+0x23fed4>
     2d0:	01000000 	mrseq	r0, (UNDEF: 0)
     2d4:	012e0300 	teqeq	lr, r0, lsl #6
     2d8:	52050000 	andpl	r0, r5, #0
     2dc:	000002c0 	andeq	r0, r0, r0, asr #5
     2e0:	5a05010f 	bpl	140724 <_Min_Stack_Size+0x140324>
     2e4:	00000301 	andeq	r0, r0, r1, lsl #6
     2e8:	00040c09 	andeq	r0, r4, r9, lsl #24
     2ec:	2c090000 	stccs	0, cr0, [r9], {-0}
     2f0:	01000003 	tsteq	r0, r3
     2f4:	0003ce09 	andeq	ip, r3, r9, lsl #28
     2f8:	e4090200 	str	r0, [r9], #-512	; 0x200
     2fc:	03000002 	movweq	r0, #2
     300:	04840300 	streq	r0, [r4], #768	; 0x300
     304:	5f050000 	svcpl	0x00050000
     308:	000002e0 	andeq	r0, r0, r0, ror #5
     30c:	6e05010f 	adfvss	f0, f5, #10.0
     310:	00000327 	andeq	r0, r0, r7, lsr #6
     314:	0004b209 	andeq	fp, r4, r9, lsl #4
     318:	03090000 	movweq	r0, #36864	; 0x9000
     31c:	01000005 	tsteq	r0, r5
     320:	00049609 	andeq	r9, r4, r9, lsl #12
     324:	03000200 	movweq	r0, #512	; 0x200
     328:	0000053e 	andeq	r0, r0, lr, lsr r5
     32c:	030c7205 	movweq	r7, #49669	; 0xc205
     330:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     334:	03778405 	cmneq	r7, #83886080	; 0x5000000
     338:	65110000 	ldrvs	r0, [r1, #-0]
     33c:	05000002 	streq	r0, [r0, #-2]
     340:	0000b886 	andeq	fp, r0, r6, lsl #17
     344:	54110000 	ldrpl	r0, [r1], #-0
     348:	05000005 	streq	r0, [r0, #-5]
     34c:	0002b589 	andeq	fp, r2, r9, lsl #11
     350:	74110400 	ldrvc	r0, [r1], #-1024	; 0x400
     354:	05000003 	streq	r0, [r0, #-3]
     358:	0003018c 	andeq	r0, r3, ip, lsl #3
     35c:	cb110500 	blgt	441764 <_Min_Stack_Size+0x441364>
     360:	05000000 	streq	r0, [r0, #-0]
     364:	0002d58f 	andeq	sp, r2, pc, lsl #11
     368:	22110600 	andscs	r0, r1, #0, 12
     36c:	05000003 	streq	r0, [r0, #-3]
     370:	00032792 	muleq	r3, r2, r7
     374:	03000700 	movweq	r0, #1792	; 0x700
     378:	00000351 	andeq	r0, r0, r1, asr r3
     37c:	03329405 	teqeq	r2, #83886080	; 0x5000000
     380:	10100000 	andsne	r0, r0, r0
     384:	03d33606 	bicseq	r3, r3, #6291456	; 0x600000
     388:	47110000 	ldrmi	r0, [r1, -r0]
     38c:	06000001 	streq	r0, [r0], -r1
     390:	0000b838 	andeq	fp, r0, r8, lsr r8
     394:	1d110000 	ldcne	0, cr0, [r1, #-0]
     398:	06000001 	streq	r0, [r0], -r1
     39c:	0000a23e 	andeq	sl, r0, lr, lsr r2
     3a0:	b2110400 	andslt	r0, r1, #0, 8
     3a4:	06000000 	streq	r0, [r0], -r0
     3a8:	0000a241 	andeq	sl, r0, r1, asr #4
     3ac:	02110600 	andseq	r0, r1, #0, 12
     3b0:	06000003 	streq	r0, [r0], -r3
     3b4:	0000a244 	andeq	sl, r0, r4, asr #4
     3b8:	c3110800 	tstgt	r1, #0, 16
     3bc:	06000003 	streq	r0, [r0], -r3
     3c0:	0000a24b 	andeq	sl, r0, fp, asr #4
     3c4:	92110a00 	andsls	r0, r1, #0, 20
     3c8:	06000003 	streq	r0, [r0], -r3
     3cc:	0000a24e 	andeq	sl, r0, lr, asr #4
     3d0:	03000c00 	movweq	r0, #3072	; 0xc00
     3d4:	00000362 	andeq	r0, r0, r2, ror #6
     3d8:	03825106 	orreq	r5, r2, #-2147483647	; 0x80000001
     3dc:	04120000 	ldreq	r0, [r2], #-0
     3e0:	03e60413 	mvneq	r0, #318767104	; 0x13000000
     3e4:	01020000 	mrseq	r0, (UNDEF: 2)
     3e8:	00031d08 	andeq	r1, r3, r8, lsl #26
     3ec:	f3041300 	vcgt.u8	d1, d4, d0
     3f0:	14000003 	strne	r0, [r0], #-3
     3f4:	000003e6 	andeq	r0, r0, r6, ror #7
     3f8:	0002c215 	andeq	ip, r2, r5, lsl r2
     3fc:	c8290100 	stmdagt	r9!, {r8}
     400:	16080001 	strne	r0, [r8], -r1
     404:	01000000 	mrseq	r0, (UNDEF: 0)
     408:	00043a9c 	muleq	r4, ip, sl
     40c:	01d21600 	bicseq	r1, r2, r0, lsl #12
     410:	07f50800 	ldrbeq	r0, [r5, r0, lsl #16]!
     414:	04250000 	strteq	r0, [r5], #-0
     418:	01170000 	tsteq	r7, r0
     41c:	17310151 			; <UNDEFINED> instruction: 0x17310151
     420:	40015001 	andmi	r5, r1, r1
     424:	01de1800 	bicseq	r1, lr, r0, lsl #16
     428:	080c0800 	stmdaeq	ip, {fp}
     42c:	01170000 	tsteq	r7, r0
     430:	17310151 			; <UNDEFINED> instruction: 0x17310151
     434:	31015001 	tstcc	r1, r1
     438:	3e150000 	cdpcc	0, 1, cr0, cr5, cr0, {0}
     43c:	01000003 	tsteq	r0, r3
     440:	0001e034 	andeq	lr, r1, r4, lsr r0
     444:	00004408 	andeq	r4, r0, r8, lsl #8
     448:	b09c0100 	addslt	r0, ip, r0, lsl #2
     44c:	19000004 	stmdbne	r0, {r2}
     450:	000004d7 	ldrdeq	r0, [r0], -r7
     454:	03773601 	cmneq	r7, #1048576	; 0x100000
     458:	91020000 	mrsls	r0, (UNDEF: 2)
     45c:	02081668 	andeq	r1, r8, #104, 12	; 0x6800000
     460:	08230800 	stmdaeq	r3!, {fp}
     464:	04770000 	ldrbteq	r0, [r7], #-0
     468:	01170000 	tsteq	r7, r0
     46c:	007d0251 	rsbseq	r0, sp, r1, asr r2
     470:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     474:	16000074 			; <UNDEFINED> instruction: 0x16000074
     478:	08000212 	stmdaeq	r0, {r1, r4, r9}
     47c:	00000846 	andeq	r0, r0, r6, asr #16
     480:	00000495 	muleq	r0, r5, r4
     484:	01520117 	cmpeq	r2, r7, lsl r1
     488:	51011737 	tstpl	r1, r7, lsr r7
     48c:	01173901 	tsteq	r7, r1, lsl #18
     490:	00740250 	rsbseq	r0, r4, r0, asr r2
     494:	021c1a00 	andseq	r1, ip, #0, 20
     498:	08460800 	stmdaeq	r6, {fp}^
     49c:	01170000 	tsteq	r7, r0
     4a0:	17370152 			; <UNDEFINED> instruction: 0x17370152
     4a4:	3a015101 	bcc	548b0 <_Min_Stack_Size+0x544b0>
     4a8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     4ac:	00000074 	andeq	r0, r0, r4, ror r0
     4b0:	0003de15 	andeq	sp, r3, r5, lsl lr
     4b4:	24470100 	strbcs	r0, [r7], #-256	; 0x100
     4b8:	3c080002 	stccc	0, cr0, [r8], {2}
     4bc:	01000000 	mrseq	r0, (UNDEF: 0)
     4c0:	0005039c 	muleq	r5, ip, r3
     4c4:	000d1900 	andeq	r1, sp, r0, lsl #18
     4c8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     4cc:	000003d3 	ldrdeq	r0, [r0], -r3
     4d0:	16609102 	strbtne	r9, [r0], -r2, lsl #2
     4d4:	08000250 	stmdaeq	r0, {r4, r6, r9}
     4d8:	00000862 	andeq	r0, r0, r2, ror #16
     4dc:	000004ed 	andeq	r0, r0, sp, ror #9
     4e0:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     4e4:	0117007d 	tsteq	r7, sp, ror r0
     4e8:	00740250 	rsbseq	r0, r4, r0, asr r2
     4ec:	02581a00 	subseq	r1, r8, #0, 20
     4f0:	08850800 	stmeq	r5, {fp}
     4f4:	01170000 	tsteq	r7, r0
     4f8:	17310151 			; <UNDEFINED> instruction: 0x17310151
     4fc:	74025001 	strvc	r5, [r2], #-1
     500:	1b000000 	blne	508 <_Min_Stack_Size+0x108>
     504:	00000478 	andeq	r0, r0, r8, ror r4
     508:	19015e01 	stmdbne	r1, {r0, r9, sl, fp, ip, lr}
     50c:	1c000005 	stcne	0, cr0, [r0], {5}
     510:	5e010073 	mcrpl	0, 0, r0, cr1, cr3, {3}
     514:	000003e0 	andeq	r0, r0, r0, ror #7
     518:	05031d00 	streq	r1, [r3, #-3328]	; 0xd00
     51c:	02600000 	rsbeq	r0, r0, #0
     520:	002c0800 	eoreq	r0, ip, r0, lsl #16
     524:	9c010000 	stcls	0, cr0, [r1], {-0}
     528:	00000566 	andeq	r0, r0, r6, ror #10
     52c:	00050f1e 	andeq	r0, r5, lr, lsl pc
     530:	00000000 	andeq	r0, r0, r0
     534:	02701600 	rsbseq	r1, r0, #0, 12
     538:	089c0800 	ldmeq	ip, {fp}
     53c:	05520000 	ldrbeq	r0, [r2, #-0]
     540:	01170000 	tsteq	r7, r0
     544:	80080251 	andhi	r0, r8, r1, asr r2
     548:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     54c:	0110000c 	tsteq	r0, ip
     550:	7e1a0040 	cdpvc	0, 1, cr0, cr10, cr0, {2}
     554:	b7080002 	strlt	r0, [r8, -r2]
     558:	17000008 	strne	r0, [r0, -r8]
     55c:	0c055001 	stceq	0, cr5, [r5], {1}
     560:	40011000 	andmi	r1, r1, r0
     564:	ed150000 	ldc	0, cr0, [r5, #-0]
     568:	01000000 	mrseq	r0, (UNDEF: 0)
     56c:	00028c67 	andeq	r8, r2, r7, ror #24
     570:	00008008 	andeq	r8, r0, r8
     574:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
     578:	1f000006 	svcne	0x00000006
     57c:	00746d66 	rsbseq	r6, r4, r6, ror #26
     580:	03ed6701 	mvneq	r6, #262144	; 0x40000
     584:	91020000 	mrsls	r0, (UNDEF: 2)
     588:	73212070 	teqvc	r1, #112	; 0x70
     58c:	69010070 	stmdbvs	r1, {r4, r5, r6}
     590:	00000686 	andeq	r0, r0, r6, lsl #13
     594:	72747322 	rsbsvc	r7, r4, #-2013265920	; 0x88000000
     598:	8c6c0100 	stfhie	f0, [ip], #-0
     59c:	04000006 	streq	r0, [r0], #-6
     5a0:	7fb1d091 	svcvc	0x00b1d091
     5a4:	00746923 	rsbseq	r6, r4, r3, lsr #18
     5a8:	03e06e01 	mvneq	r6, #1, 28
     5ac:	00200000 	eoreq	r0, r0, r0
     5b0:	6e230000 	cdpvs	0, 2, cr0, cr3, cr0, {0}
     5b4:	01006d75 	tsteq	r0, r5, ror sp
     5b8:	00008970 	andeq	r8, r0, r0, ror r9
     5bc:	00004200 	andeq	r4, r0, r0, lsl #4
     5c0:	05032400 	streq	r2, [r3, #-1024]	; 0x400
     5c4:	02b60000 	adcseq	r0, r6, #0
     5c8:	00200800 	eoreq	r0, r0, r0, lsl #16
     5cc:	76010000 	strvc	r0, [r1], -r0
     5d0:	00000614 	andeq	r0, r0, r4, lsl r6
     5d4:	00050f1e 	andeq	r0, r5, lr, lsl pc
     5d8:	00006e00 	andeq	r6, r0, r0, lsl #28
     5dc:	02be1600 	adcseq	r1, lr, #0, 12
     5e0:	089c0800 	ldmeq	ip, {fp}
     5e4:	05fa0000 	ldrbeq	r0, [sl, #0]!
     5e8:	01170000 	tsteq	r7, r0
     5ec:	80080251 	andhi	r0, r8, r1, asr r2
     5f0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     5f4:	0110000c 	tsteq	r0, ip
     5f8:	ca1a0040 	bgt	680700 <_Min_Stack_Size+0x680300>
     5fc:	b7080002 	strlt	r0, [r8, -r2]
     600:	17000008 	strne	r0, [r0, -r8]
     604:	74025101 	strvc	r5, [r2], #-257	; 0x101
     608:	50011700 	andpl	r1, r1, r0, lsl #14
     60c:	10000c05 	andne	r0, r0, r5, lsl #24
     610:	00004001 	andeq	r4, r0, r1
     614:	00050324 	andeq	r0, r5, r4, lsr #6
     618:	0002d600 	andeq	sp, r2, r0, lsl #12
     61c:	00001c08 	andeq	r1, r0, r8, lsl #24
     620:	67770100 	ldrbvs	r0, [r7, -r0, lsl #2]!
     624:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     628:	0000050f 	andeq	r0, r0, pc, lsl #10
     62c:	0000009b 	muleq	r0, fp, r0
     630:	0002de16 	andeq	sp, r2, r6, lsl lr
     634:	00089c08 	andeq	r9, r8, r8, lsl #24
     638:	00064d00 	andeq	r4, r6, r0, lsl #26
     63c:	51011700 	tstpl	r1, r0, lsl #14
     640:	17800802 	strne	r0, [r0, r2, lsl #16]
     644:	0c055001 	stceq	0, cr5, [r5], {1}
     648:	40011000 	andmi	r1, r1, r0
     64c:	02ea1a00 	rsceq	r1, sl, #0, 20
     650:	08b70800 	ldmeq	r7!, {fp}
     654:	01170000 	tsteq	r7, r0
     658:	00740251 	rsbseq	r0, r4, r1, asr r2
     65c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     660:	0110000c 	tsteq	r0, ip
     664:	1a000040 	bne	76c <_Min_Stack_Size+0x36c>
     668:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
     66c:	000008ce 	andeq	r0, r0, lr, asr #17
     670:	03520117 	cmpeq	r2, #-1073741819	; 0xc0000005
     674:	1727100a 	strne	r1, [r7, -sl]!
     678:	30015101 	andcc	r5, r1, r1, lsl #2
     67c:	04500117 	ldrbeq	r0, [r0], #-279	; 0x117
     680:	7fb1d091 	svcvc	0x00b1d091
     684:	04130000 	ldreq	r0, [r3], #-0
     688:	00000089 	andeq	r0, r0, r9, lsl #1
     68c:	0003e606 	andeq	lr, r3, r6, lsl #12
     690:	00069d00 	andeq	r9, r6, r0, lsl #26
     694:	00c32500 	sbceq	r2, r3, r0, lsl #10
     698:	270f0000 	strcs	r0, [pc, -r0]
     69c:	00892600 	addeq	r2, r9, r0, lsl #12
     6a0:	7b010000 	blvc	406a8 <_Min_Stack_Size+0x402a8>
     6a4:	00000089 	andeq	r0, r0, r9, lsl #1
     6a8:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
     6ac:	00000084 	andeq	r0, r0, r4, lsl #1
     6b0:	07e99c01 	strbeq	r9, [r9, r1, lsl #24]!
     6b4:	00270000 	eoreq	r0, r7, r0
     6b8:	70000000 	andvc	r0, r0, r0
     6bc:	23000007 	movwcs	r0, #7
     6c0:	8a010074 	bhi	40898 <_Min_Stack_Size+0x40498>
     6c4:	000003e6 	andeq	r0, r0, r6, ror #7
     6c8:	000000bb 	strheq	r0, [r0], -fp
     6cc:	00033c16 	andeq	r3, r3, r6, lsl ip
     6d0:	00089c08 	andeq	r9, r8, r8, lsl #24
     6d4:	0006e900 	andeq	lr, r6, r0, lsl #18
     6d8:	51011700 	tstpl	r1, r0, lsl #14
     6dc:	17200802 	strne	r0, [r0, -r2, lsl #16]!
     6e0:	0c055001 	stceq	0, cr5, [r5], {1}
     6e4:	40011000 	andmi	r1, r1, r0
     6e8:	03461600 	movteq	r1, #26112	; 0x6600
     6ec:	08eb0800 	stmiaeq	fp!, {fp}^
     6f0:	07000000 	streq	r0, [r0, -r0]
     6f4:	01170000 	tsteq	r7, r0
     6f8:	000c0550 	andeq	r0, ip, r0, asr r5
     6fc:	00400110 	subeq	r0, r0, r0, lsl r1
     700:	00035616 	andeq	r5, r3, r6, lsl r6
     704:	00089c08 	andeq	r9, r8, r8, lsl #24
     708:	00071d00 	andeq	r1, r7, r0, lsl #26
     70c:	51011700 	tstpl	r1, r0, lsl #14
     710:	17800802 	strne	r0, [r0, r2, lsl #16]
     714:	0c055001 	stceq	0, cr5, [r5], {1}
     718:	40011000 	andmi	r1, r1, r0
     71c:	03621600 	cmneq	r2, #0, 12
     720:	08b70800 	ldmeq	r7!, {fp}
     724:	073a0000 	ldreq	r0, [sl, -r0]!
     728:	01170000 	tsteq	r7, r0
     72c:	00740251 	rsbseq	r0, r4, r1, asr r2
     730:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     734:	0110000c 	tsteq	r0, ip
     738:	6c160040 	ldcvs	0, cr0, [r6], {64}	; 0x40
     73c:	9c080003 	stcls	0, cr0, [r8], {3}
     740:	57000008 	strpl	r0, [r0, -r8]
     744:	17000007 	strne	r0, [r0, -r7]
     748:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     74c:	50011780 	andpl	r1, r1, r0, lsl #15
     750:	10000c05 	andne	r0, r0, r5, lsl #24
     754:	1a004001 	bne	10760 <_Min_Stack_Size+0x10360>
     758:	08000378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9}
     75c:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
     760:	01510117 	cmpeq	r1, r7, lsl r1
     764:	5001173d 	andpl	r1, r1, sp, lsr r7
     768:	10000c05 	andne	r0, r0, r5, lsl #24
     76c:	00004001 	andeq	r4, r0, r1
     770:	00031228 	andeq	r1, r3, r8, lsr #4
     774:	0003f808 	andeq	pc, r3, r8, lsl #16
     778:	03162800 	tsteq	r6, #0, 16
     77c:	043a0800 	ldrteq	r0, [sl], #-2048	; 0x800
     780:	1a280000 	bne	a00788 <_Min_Stack_Size+0xa00388>
     784:	b0080003 	andlt	r0, r8, r3
     788:	16000004 	strne	r0, [r0], -r4
     78c:	08000320 	stmdaeq	r0, {r5, r8, r9}
     790:	00000503 	andeq	r0, r0, r3, lsl #10
     794:	000007a2 	andeq	r0, r0, r2, lsr #15
     798:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     79c:	0013ec03 	andseq	lr, r3, r3, lsl #24
     7a0:	26160008 	ldrcs	r0, [r6], -r8
     7a4:	03080003 	movweq	r0, #32771	; 0x8003
     7a8:	b9000005 	stmdblt	r0, {r0, r2}
     7ac:	17000007 	strne	r0, [r0, -r7]
     7b0:	03055001 	movweq	r5, #20481	; 0x5001
     7b4:	080013f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip}
     7b8:	032e1600 	teqeq	lr, #0, 12
     7bc:	05660800 	strbeq	r0, [r6, #-2048]!	; 0x800
     7c0:	07d50000 	ldrbeq	r0, [r5, r0]
     7c4:	01170000 	tsteq	r7, r0
     7c8:	17410151 	smlsldne	r0, r1, r1, r1
     7cc:	03055001 	movweq	r5, #20481	; 0x5001
     7d0:	08001408 	stmdaeq	r0, {r3, sl, ip}
     7d4:	03341a00 	teqeq	r4, #0, 20
     7d8:	05030800 	streq	r0, [r3, #-2048]	; 0x800
     7dc:	01170000 	tsteq	r7, r0
     7e0:	10030550 	andne	r0, r3, r0, asr r5
     7e4:	00080014 	andeq	r0, r8, r4, lsl r0
     7e8:	04a52900 	strteq	r2, [r5], #2304	; 0x900
     7ec:	a7080000 	strge	r0, [r8, -r0]
     7f0:	0000e406 	andeq	lr, r0, r6, lsl #8
     7f4:	041b2a00 	ldreq	r2, [fp], #-2560	; 0xa00
     7f8:	44070000 	strmi	r0, [r7], #-0
     7fc:	00080c02 	andeq	r0, r8, r2, lsl #24
     800:	00b82b00 	adcseq	r2, r8, r0, lsl #22
     804:	212b0000 	teqcs	fp, r0
     808:	00000001 	andeq	r0, r0, r1
     80c:	0003ac2a 	andeq	sl, r3, sl, lsr #24
     810:	02400700 	subeq	r0, r0, #0, 14
     814:	00000823 	andeq	r0, r0, r3, lsr #16
     818:	0000b82b 	andeq	fp, r0, fp, lsr #16
     81c:	01212b00 	teqeq	r1, r0, lsl #22
     820:	2a000000 	bcs	828 <_Min_Stack_Size+0x428>
     824:	00000106 	andeq	r0, r0, r6, lsl #2
     828:	3a01c905 	bcc	72c44 <_Min_Stack_Size+0x72844>
     82c:	2b000008 	blcs	854 <_Min_Stack_Size+0x454>
     830:	0000083a 	andeq	r0, r0, sl, lsr r8
     834:	0008402b 	andeq	r4, r8, fp, lsr #32
     838:	04130000 	ldreq	r0, [r3], #-0
     83c:	000001be 			; <UNDEFINED> instruction: 0x000001be
     840:	03770413 	cmneq	r7, #318767104	; 0x13000000
     844:	102a0000 	eorne	r0, sl, r0
     848:	05000005 	streq	r0, [r0, #-5]
     84c:	086201d9 	stmdaeq	r2!, {r0, r3, r4, r6, r7, r8}^
     850:	3a2b0000 	bcc	ac0858 <_Min_Stack_Size+0xac0458>
     854:	2b000008 	blcs	87c <_Min_Stack_Size+0x47c>
     858:	000000a2 	andeq	r0, r0, r2, lsr #1
     85c:	0000972b 	andeq	r9, r0, fp, lsr #14
     860:	672a0000 	strvs	r0, [sl, -r0]!
     864:	06000000 	streq	r0, [r0], -r0
     868:	08790174 	ldmdaeq	r9!, {r2, r4, r5, r6, r8}^
     86c:	792b0000 	stmdbvc	fp!, {}	; <UNPREDICTABLE>
     870:	2b000008 	blcs	898 <_Min_Stack_Size+0x498>
     874:	0000087f 	andeq	r0, r0, pc, ror r8
     878:	88041300 	stmdahi	r4, {r8, r9, ip}
     87c:	13000002 	movwne	r0, #2
     880:	0003d304 	andeq	sp, r3, r4, lsl #6
     884:	00e32a00 	rsceq	r2, r3, r0, lsl #20
     888:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     88c:	00089c01 	andeq	r9, r8, r1, lsl #24
     890:	08792b00 	ldmdaeq	r9!, {r8, r9, fp, sp}^
     894:	212b0000 	teqcs	fp, r0
     898:	00000001 	andeq	r0, r0, r1
     89c:	0004c32c 	andeq	ip, r4, ip, lsr #6
     8a0:	019c0600 	orrseq	r0, ip, r0, lsl #12
     8a4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     8a8:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
     8ac:	0008792b 	andeq	r7, r8, fp, lsr #18
     8b0:	00a22b00 	adceq	r2, r2, r0, lsl #22
     8b4:	2a000000 	bcs	8bc <_Min_Stack_Size+0x4bc>
     8b8:	000000f7 	strdeq	r0, [r0], -r7
     8bc:	ce017e06 	cdpgt	14, 0, cr7, cr1, cr6, {0}
     8c0:	2b000008 	blcs	8e8 <_Min_Stack_Size+0x4e8>
     8c4:	00000879 	andeq	r0, r0, r9, ror r8
     8c8:	0000a22b 	andeq	sl, r0, fp, lsr #4
     8cc:	ea2d0000 	b	b408d4 <_Min_Stack_Size+0xb404d4>
     8d0:	de000004 	cdple	0, 0, cr0, cr0, cr4, {0}
     8d4:	eb000003 	bl	8e8 <_Min_Stack_Size+0x4e8>
     8d8:	2b000008 	blcs	900 <_Min_Stack_Size+0x500>
     8dc:	000003de 	ldrdeq	r0, [r0], -lr
     8e0:	0000892b 	andeq	r8, r0, fp, lsr #18
     8e4:	00c32b00 	sbceq	r2, r3, r0, lsl #22
     8e8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     8ec:	000004f1 	strdeq	r0, [r0], -r1
     8f0:	a2017f06 	andge	r7, r1, #6, 30
     8f4:	2b000000 	blcs	8fc <_Min_Stack_Size+0x4fc>
     8f8:	00000879 	andeq	r0, r0, r9, ror r8
     8fc:	012f0000 	teqeq	pc, r0
     900:	00040000 	andeq	r0, r4, r0
     904:	0000026c 	andeq	r0, r0, ip, ror #4
     908:	01560104 	cmpeq	r6, r4, lsl #2
     90c:	91010000 	mrsls	r0, (UNDEF: 1)
     910:	21000005 	tstcs	r0, r5
     914:	50000000 	andpl	r0, r0, r0
     918:	00000000 	andeq	r0, r0, r0
     91c:	bd000000 	stclt	0, cr0, [r0, #-0]
     920:	02000002 	andeq	r0, r0, #2
     924:	03160601 	tsteq	r6, #1048576	; 0x100000
     928:	01020000 	mrseq	r0, (UNDEF: 2)
     92c:	00031408 	andeq	r1, r3, r8, lsl #8
     930:	05020200 	streq	r0, [r2, #-512]	; 0x200
     934:	000000c1 	andeq	r0, r0, r1, asr #1
     938:	7f070202 	svcvc	0x00070202
     93c:	03000003 	movweq	r0, #3
     940:	000003fb 	strdeq	r0, [r0], -fp
     944:	004c3702 	subeq	r3, ip, r2, lsl #14
     948:	04020000 	streq	r0, [r2], #-0
     94c:	00027b05 	andeq	r7, r2, r5, lsl #22
     950:	07040200 	streq	r0, [r4, -r0, lsl #4]
     954:	00000289 	andeq	r0, r0, r9, lsl #5
     958:	76050802 	strvc	r0, [r5], -r2, lsl #16
     95c:	02000002 	andeq	r0, r0, #2
     960:	02840708 	addeq	r0, r4, #8, 14	; 0x200000
     964:	04040000 	streq	r0, [r4], #-0
     968:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     96c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     970:	0000028e 	andeq	r0, r0, lr, lsl #5
     974:	0003fd03 	andeq	pc, r3, r3, lsl #26
     978:	41410300 	mrsmi	r0, (UNDEF: 113)
     97c:	02000000 	andeq	r0, r0, #0
     980:	00720704 	rsbseq	r0, r2, r4, lsl #14
     984:	76050000 	strvc	r0, [r5], -r0
     988:	06000000 	streq	r0, [r0], -r0
     98c:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     990:	03903601 	orrseq	r3, r0, #1048576	; 0x100000
     994:	00020800 	andeq	r0, r2, r0, lsl #16
     998:	9c010000 	stcls	0, cr0, [r1], {-0}
     99c:	0005a006 	andeq	sl, r5, r6
     9a0:	943f0100 	ldrtls	r0, [pc], #-256	; 9a8 <_Min_Stack_Size+0x5a8>
     9a4:	02080003 	andeq	r0, r8, #3
     9a8:	01000000 	mrseq	r0, (UNDEF: 0)
     9ac:	05be069c 	ldreq	r0, [lr, #1692]!	; 0x69c
     9b0:	4c010000 	stcmi	0, cr0, [r1], {-0}
     9b4:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
     9b8:	00000002 	andeq	r0, r0, r2
     9bc:	80069c01 	andhi	r9, r6, r1, lsl #24
     9c0:	01000005 	tsteq	r0, r5
     9c4:	00039c59 	andeq	r9, r3, r9, asr ip
     9c8:	00000208 	andeq	r0, r0, r8, lsl #4
     9cc:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     9d0:	0000056d 	andeq	r0, r0, sp, ror #10
     9d4:	03a06601 	moveq	r6, #1048576	; 0x100000
     9d8:	00020800 	andeq	r0, r2, r0, lsl #16
     9dc:	9c010000 	stcls	0, cr0, [r1], {-0}
     9e0:	0005e006 	andeq	lr, r5, r6
     9e4:	a4730100 	ldrbtge	r0, [r3], #-256	; 0x100
     9e8:	02080003 	andeq	r0, r8, #3
     9ec:	01000000 	mrseq	r0, (UNDEF: 0)
     9f0:	05ec069c 	strbeq	r0, [ip, #1692]!	; 0x69c
     9f4:	7c010000 	stcvc	0, cr0, [r1], {-0}
     9f8:	080003a8 	stmdaeq	r0, {r3, r5, r7, r8, r9}
     9fc:	00000002 	andeq	r0, r0, r2
     a00:	5e069c01 	cdppl	12, 0, cr9, cr6, cr1, {0}
     a04:	01000005 	tsteq	r0, r5
     a08:	0003ac85 	andeq	sl, r3, r5, lsl #25
     a0c:	00000208 	andeq	r0, r0, r8, lsl #4
     a10:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     a14:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a18:	03b08e01 	movseq	r8, #1, 28
     a1c:	00020800 	andeq	r0, r2, r0, lsl #16
     a20:	9c010000 	stcls	0, cr0, [r1], {-0}
     a24:	0004a507 	andeq	sl, r4, r7, lsl #10
     a28:	06a70400 	strteq	r0, [r7], r0, lsl #8
     a2c:	00000088 	andeq	r0, r0, r8, lsl #1
     a30:	0005da00 	andeq	sp, r5, r0, lsl #20
     a34:	d3000400 	movwle	r0, #1024	; 0x400
     a38:	04000002 	streq	r0, [r0], #-2
     a3c:	00015601 	andeq	r5, r1, r1, lsl #12
     a40:	07780100 	ldrbeq	r0, [r8, -r0, lsl #2]!
     a44:	00210000 	eoreq	r0, r1, r0
     a48:	00b80000 	adcseq	r0, r8, r0
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	046e0000 	strbteq	r0, [lr], #-0
     a54:	01020000 	mrseq	r0, (UNDEF: 2)
     a58:	00031606 	andeq	r1, r3, r6, lsl #12
     a5c:	02da0300 	sbcseq	r0, sl, #0, 6
     a60:	1c020000 	stcne	0, cr0, [r2], {-0}
     a64:	00000037 	andeq	r0, r0, r7, lsr r0
     a68:	14080102 	strne	r0, [r8], #-258	; 0x102
     a6c:	02000003 	andeq	r0, r0, #3
     a70:	00c10502 	sbceq	r0, r1, r2, lsl #10
     a74:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
     a78:	02000000 	andeq	r0, r0, #0
     a7c:	00005026 	andeq	r5, r0, r6, lsr #32
     a80:	07020200 	streq	r0, [r2, -r0, lsl #4]
     a84:	0000037f 	andeq	r0, r0, pc, ror r3
     a88:	0003fb03 	andeq	pc, r3, r3, lsl #22
     a8c:	62370200 	eorsvs	r0, r7, #0, 4
     a90:	02000000 	andeq	r0, r0, #0
     a94:	027b0504 	rsbseq	r0, fp, #4, 10	; 0x1000000
     a98:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
     a9c:	02000000 	andeq	r0, r0, #0
     aa0:	00007438 	andeq	r7, r0, r8, lsr r4
     aa4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     aa8:	00000289 	andeq	r0, r0, r9, lsl #5
     aac:	76050802 	strvc	r0, [r5], -r2, lsl #16
     ab0:	02000002 	andeq	r0, r0, #2
     ab4:	02840708 	addeq	r0, r4, #8, 14	; 0x200000
     ab8:	04040000 	streq	r0, [r4], #-0
     abc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     ac0:	07040200 	streq	r0, [r4, -r0, lsl #4]
     ac4:	0000028e 	andeq	r0, r0, lr, lsl #5
     ac8:	0002dc03 	andeq	sp, r2, r3, lsl #24
     acc:	2c2a0300 	stccs	3, cr0, [sl], #-0
     ad0:	03000000 	movweq	r0, #0
     ad4:	0000009b 	muleq	r0, fp, r0
     ad8:	00453603 	subeq	r3, r5, r3, lsl #12
     adc:	fd030000 	stc2	0, cr0, [r3, #-0]
     ae0:	03000003 	movweq	r0, #3
     ae4:	00005741 	andeq	r5, r0, r1, asr #14
     ae8:	00900300 	addseq	r0, r0, r0, lsl #6
     aec:	42030000 	andmi	r0, r3, #0
     af0:	00000069 	andeq	r0, r0, r9, rrx
     af4:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
     af8:	05000000 	streq	r0, [r0, #-0]
     afc:	000000b8 	strheq	r0, [r0], -r8
     b00:	70048c06 	andvc	r8, r4, r6, lsl #24
     b04:	0001ea01 	andeq	lr, r1, r1, lsl #20
     b08:	064d0700 	strbeq	r0, [sp], -r0, lsl #14
     b0c:	72040000 	andvc	r0, r4, #0
     b10:	0001ea01 	andeq	lr, r1, r1, lsl #20
     b14:	7f070000 	svcvc	0x00070000
     b18:	04000006 	streq	r0, [r0], #-6
     b1c:	00ca0173 	sbceq	r0, sl, r3, ror r1
     b20:	07040000 	streq	r0, [r4, -r0]
     b24:	00000731 	andeq	r0, r0, r1, lsr r7
     b28:	ca017404 	bgt	5db40 <_Min_Stack_Size+0x5d740>
     b2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b30:	0006ce07 	andeq	ip, r6, r7, lsl #28
     b34:	01750400 	cmneq	r5, r0, lsl #8
     b38:	000000ca 	andeq	r0, r0, sl, asr #1
     b3c:	4353080c 	cmpmi	r3, #12, 16	; 0xc0000
     b40:	76040052 			; <UNDEFINED> instruction: 0x76040052
     b44:	0000ca01 	andeq	ip, r0, r1, lsl #20
     b48:	43081000 	movwmi	r1, #32768	; 0x8000
     b4c:	04005243 	streq	r5, [r0], #-579	; 0x243
     b50:	00ca0177 	sbceq	r0, sl, r7, ror r1
     b54:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
     b58:	00504853 	subseq	r4, r0, r3, asr r8
     b5c:	ff017804 			; <UNDEFINED> instruction: 0xff017804
     b60:	18000001 	stmdane	r0, {r0}
     b64:	0006f307 	andeq	pc, r6, r7, lsl #6
     b68:	01790400 	cmneq	r9, r0, lsl #8
     b6c:	000000ca 	andeq	r0, r0, sl, asr #1
     b70:	06a60724 	strteq	r0, [r6], r4, lsr #14
     b74:	7a040000 	bvc	100b7c <_Min_Stack_Size+0x10077c>
     b78:	0000ca01 	andeq	ip, r0, r1, lsl #20
     b7c:	50072800 	andpl	r2, r7, r0, lsl #16
     b80:	04000007 	streq	r0, [r0], #-7
     b84:	00ca017b 	sbceq	r0, sl, fp, ror r1
     b88:	072c0000 	streq	r0, [ip, -r0]!
     b8c:	0000073b 	andeq	r0, r0, fp, lsr r7
     b90:	ca017c04 	bgt	5fba8 <_Min_Stack_Size+0x5f7a8>
     b94:	30000000 	andcc	r0, r0, r0
     b98:	00070f07 	andeq	r0, r7, r7, lsl #30
     b9c:	017d0400 	cmneq	sp, r0, lsl #8
     ba0:	000000ca 	andeq	r0, r0, sl, asr #1
     ba4:	068c0734 			; <UNDEFINED> instruction: 0x068c0734
     ba8:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
     bac:	0000ca01 	andeq	ip, r0, r1, lsl #20
     bb0:	8b073800 	blhi	1cebb8 <_Min_Stack_Size+0x1ce7b8>
     bb4:	04000007 	streq	r0, [r0], #-7
     bb8:	00ca017f 	sbceq	r0, sl, pc, ror r1
     bbc:	083c0000 	ldmdaeq	ip!, {}	; <UNPREDICTABLE>
     bc0:	00524650 	subseq	r4, r2, r0, asr r6
     bc4:	14018004 	strne	r8, [r1], #-4
     bc8:	40000002 	andmi	r0, r0, r2
     bcc:	52464408 	subpl	r4, r6, #8, 8	; 0x8000000
     bd0:	01810400 	orreq	r0, r1, r0, lsl #8
     bd4:	000001ea 	andeq	r0, r0, sl, ror #3
     bd8:	44410848 	strbmi	r0, [r1], #-2120	; 0x848
     bdc:	82040052 	andhi	r0, r4, #82	; 0x52
     be0:	0001ea01 	andeq	lr, r1, r1, lsl #20
     be4:	5f074c00 	svcpl	0x00074c00
     be8:	04000007 	streq	r0, [r0], #-7
     bec:	022e0183 	eoreq	r0, lr, #-1073741792	; 0xc0000020
     bf0:	07500000 	ldrbeq	r0, [r0, -r0]
     bf4:	00000736 	andeq	r0, r0, r6, lsr r7
     bf8:	48018404 	stmdami	r1, {r2, sl, pc}
     bfc:	60000002 	andvs	r0, r0, r2
     c00:	00043207 	andeq	r3, r4, r7, lsl #4
     c04:	01850400 	orreq	r0, r5, r0, lsl #8
     c08:	00000238 	andeq	r0, r0, r8, lsr r2
     c0c:	07b20774 			; <UNDEFINED> instruction: 0x07b20774
     c10:	86040000 	strhi	r0, [r4], -r0
     c14:	0000ca01 	andeq	ip, r0, r1, lsl #20
     c18:	09008800 	stmdbeq	r0, {fp, pc}
     c1c:	000000ca 	andeq	r0, r0, sl, asr #1
     c20:	0000970a 	andeq	r9, r0, sl, lsl #14
     c24:	0001ff00 	andeq	pc, r1, r0, lsl #30
     c28:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     c2c:	000b0000 	andeq	r0, fp, r0
     c30:	0001ef05 	andeq	lr, r1, r5, lsl #30
     c34:	00b80a00 	adcseq	r0, r8, r0, lsl #20
     c38:	02140000 	andseq	r0, r4, #0
     c3c:	c30b0000 	movwgt	r0, #45056	; 0xb000
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	02190900 	andseq	r0, r9, #0, 18
     c48:	04050000 	streq	r0, [r5], #-0
     c4c:	0a000002 	beq	c5c <_Min_Stack_Size+0x85c>
     c50:	000000b8 	strheq	r0, [r0], -r8
     c54:	0000022e 	andeq	r0, r0, lr, lsr #4
     c58:	0000c30b 	andeq	ip, r0, fp, lsl #6
     c5c:	09000300 	stmdbeq	r0, {r8, r9}
     c60:	00000233 	andeq	r0, r0, r3, lsr r2
     c64:	00021e05 	andeq	r1, r2, r5, lsl #28
     c68:	00b80a00 	adcseq	r0, r8, r0, lsl #20
     c6c:	02480000 	subeq	r0, r8, #0
     c70:	c30b0000 	movwgt	r0, #45056	; 0xb000
     c74:	04000000 	streq	r0, [r0], #-0
     c78:	024d0900 	subeq	r0, sp, #0, 18
     c7c:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
     c80:	0c000002 	stceq	0, cr0, [r0], {2}
     c84:	00000666 	andeq	r0, r0, r6, ror #12
     c88:	cf018704 	svcgt	0x00018704
     c8c:	05000000 	streq	r0, [r0, #-0]
     c90:	000000ad 	andeq	r0, r0, sp, lsr #1
     c94:	f705010d 			; <UNDEFINED> instruction: 0xf705010d
     c98:	00027901 	andeq	r7, r2, r1, lsl #18
     c9c:	0a000e00 	beq	44a4 <_Min_Stack_Size+0x40a4>
     ca0:	0f000000 	svceq	0x00000000
     ca4:	00544553 	subseq	r4, r4, r3, asr r5
     ca8:	1c060001 	stcne	0, cr0, [r6], {1}
     cac:	dc033e05 	stcle	14, cr3, [r3], {5}
     cb0:	08000002 	stmdaeq	r0, {r1}
     cb4:	00524341 	subseq	r4, r2, r1, asr #6
     cb8:	ca034005 	bgt	d0cd4 <_Min_Stack_Size+0xd08d4>
     cbc:	00000000 	andeq	r0, r0, r0
     cc0:	00068707 	andeq	r8, r6, r7, lsl #14
     cc4:	03410500 	movteq	r0, #5376	; 0x1500
     cc8:	000000ca 	andeq	r0, r0, sl, asr #1
     ccc:	06840704 	streq	r0, [r4], r4, lsl #14
     cd0:	42050000 	andmi	r0, r5, #0
     cd4:	0000ca03 	andeq	ip, r0, r3, lsl #20
     cd8:	53080800 	movwpl	r0, #34816	; 0x8800
     cdc:	43050052 	movwmi	r0, #20562	; 0x5052
     ce0:	0000ca03 	andeq	ip, r0, r3, lsl #20
     ce4:	43080c00 	movwmi	r0, #35840	; 0x8c00
     ce8:	44050052 	strmi	r0, [r5], #-82	; 0x52
     cec:	0000ca03 	andeq	ip, r0, r3, lsl #20
     cf0:	c2071000 	andgt	r1, r7, #0
     cf4:	05000007 	streq	r0, [r0, #-7]
     cf8:	00ca0345 	sbceq	r0, sl, r5, asr #6
     cfc:	07140000 	ldreq	r0, [r4, -r0]
     d00:	000006ab 	andeq	r0, r0, fp, lsr #13
     d04:	ca034605 	bgt	d2520 <_Min_Stack_Size+0xd2120>
     d08:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     d0c:	07990c00 	ldreq	r0, [r9, r0, lsl #24]
     d10:	47050000 	strmi	r0, [r5, -r0]
     d14:	00027903 	andeq	r7, r2, r3, lsl #18
     d18:	05080600 	streq	r0, [r8, #-1536]	; 0x600
     d1c:	030b044b 	movweq	r0, #46155	; 0xb44b
     d20:	43080000 	movwmi	r0, #32768	; 0x8000
     d24:	4d050052 	stcmi	0, cr0, [r5, #-328]	; 0xfffffeb8
     d28:	0000ca04 	andeq	ip, r0, r4, lsl #20
     d2c:	43080000 	movwmi	r0, #32768	; 0x8000
     d30:	05005253 	streq	r5, [r0, #-595]	; 0x253
     d34:	00ca044e 	sbceq	r0, sl, lr, asr #8
     d38:	00040000 	andeq	r0, r4, r0
     d3c:	0006310c 	andeq	r3, r6, ip, lsl #2
     d40:	044f0500 	strbeq	r0, [pc], #-1280	; d48 <_Min_Stack_Size+0x948>
     d44:	000002e8 	andeq	r0, r0, r8, ror #5
     d48:	55059006 	strpl	r9, [r5, #-6]
     d4c:	0004c004 	andeq	ip, r4, r4
     d50:	52430800 	subpl	r0, r3, #0, 16
     d54:	04570500 	ldrbeq	r0, [r7], #-1280	; 0x500
     d58:	000000ca 	andeq	r0, r0, sl, asr #1
     d5c:	06d40700 	ldrbeq	r0, [r4], r0, lsl #14
     d60:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
     d64:	0000ca04 	andeq	ip, r0, r4, lsl #20
     d68:	ad070400 	cfstrsge	mvf0, [r7, #-0]
     d6c:	05000007 	streq	r0, [r0, #-7]
     d70:	00ca0459 	sbceq	r0, sl, r9, asr r4
     d74:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     d78:	00524943 	subseq	r4, r2, r3, asr #18
     d7c:	ca045a05 	bgt	117598 <_Min_Stack_Size+0x117198>
     d80:	0c000000 	stceq	0, cr0, [r0], {-0}
     d84:	00065307 	andeq	r5, r6, r7, lsl #6
     d88:	045b0500 	ldrbeq	r0, [fp], #-1280	; 0x500
     d8c:	000000ca 	andeq	r0, r0, sl, asr #1
     d90:	06180710 			; <UNDEFINED> instruction: 0x06180710
     d94:	5c050000 	stcpl	0, cr0, [r5], {-0}
     d98:	0000ca04 	andeq	ip, r0, r4, lsl #20
     d9c:	90071400 	andls	r1, r7, r0, lsl #8
     da0:	05000007 	streq	r0, [r0, #-7]
     da4:	00ca045d 	sbceq	r0, sl, sp, asr r4
     da8:	07180000 	ldreq	r0, [r8, -r0]
     dac:	00000432 	andeq	r0, r0, r2, lsr r4
     db0:	b8045e05 	stmdalt	r4, {r0, r2, r9, sl, fp, ip, lr}
     db4:	1c000000 	stcne	0, cr0, [r0], {-0}
     db8:	00060707 	andeq	r0, r6, r7, lsl #14
     dbc:	045f0500 	ldrbeq	r0, [pc], #-1280	; dc4 <_Min_Stack_Size+0x9c4>
     dc0:	000000ca 	andeq	r0, r0, sl, asr #1
     dc4:	069d0720 	ldreq	r0, [sp], r0, lsr #14
     dc8:	60050000 	andvs	r0, r5, r0
     dcc:	0000ca04 	andeq	ip, r0, r4, lsl #20
     dd0:	3c072400 	cfstrscc	mvf2, [r7], {-0}
     dd4:	05000004 	streq	r0, [r0, #-4]
     dd8:	02040461 	andeq	r0, r4, #1627389952	; 0x61000000
     ddc:	07280000 	streq	r0, [r8, -r0]!
     de0:	00000770 	andeq	r0, r0, r0, ror r7
     de4:	ca046205 	bgt	119600 <_Min_Stack_Size+0x119200>
     de8:	30000000 	andcc	r0, r0, r0
     dec:	00061007 	andeq	r1, r6, r7
     df0:	04630500 	strbteq	r0, [r3], #-1280	; 0x500
     df4:	000000ca 	andeq	r0, r0, sl, asr #1
     df8:	06bc0734 			; <UNDEFINED> instruction: 0x06bc0734
     dfc:	64050000 	strvs	r0, [r5], #-0
     e00:	0000ca04 	andeq	ip, r0, r4, lsl #20
     e04:	46073800 	strmi	r3, [r7], -r0, lsl #16
     e08:	05000004 	streq	r0, [r0, #-4]
     e0c:	00b80465 	adcseq	r0, r8, r5, ror #8
     e10:	073c0000 	ldreq	r0, [ip, -r0]!
     e14:	0000066f 	andeq	r0, r0, pc, ror #12
     e18:	ca046605 	bgt	11a634 <_Min_Stack_Size+0x11a234>
     e1c:	40000000 	andmi	r0, r0, r0
     e20:	0006dc07 	andeq	sp, r6, r7, lsl #24
     e24:	04670500 	strbteq	r0, [r7], #-1280	; 0x500
     e28:	000000ca 	andeq	r0, r0, sl, asr #1
     e2c:	04500744 	ldrbeq	r0, [r0], #-1860	; 0x744
     e30:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
     e34:	00020404 	andeq	r0, r2, r4, lsl #8
     e38:	fd074800 	stc2	8, cr4, [r7, #-0]
     e3c:	05000005 	streq	r0, [r0, #-5]
     e40:	00ca0469 	sbceq	r0, sl, r9, ror #8
     e44:	07500000 	ldrbeq	r0, [r0, -r0]
     e48:	00000755 	andeq	r0, r0, r5, asr r7
     e4c:	ca046a05 	bgt	11b668 <_Min_Stack_Size+0x11b268>
     e50:	54000000 	strpl	r0, [r0], #-0
     e54:	00065c07 	andeq	r5, r6, r7, lsl #24
     e58:	046b0500 	strbteq	r0, [fp], #-1280	; 0x500
     e5c:	000000ca 	andeq	r0, r0, sl, asr #1
     e60:	045a0758 	ldrbeq	r0, [sl], #-1880	; 0x758
     e64:	6c050000 	stcvs	0, cr0, [r5], {-0}
     e68:	0000b804 	andeq	fp, r0, r4, lsl #16
     e6c:	20075c00 	andcs	r5, r7, r0, lsl #24
     e70:	05000007 	streq	r0, [r0, #-7]
     e74:	00ca046d 	sbceq	r0, sl, sp, ror #8
     e78:	07600000 	strbeq	r0, [r0, -r0]!
     e7c:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     e80:	ca046e05 	bgt	11c69c <_Min_Stack_Size+0x11c29c>
     e84:	64000000 	strvs	r0, [r0], #-0
     e88:	00046407 	andeq	r6, r4, r7, lsl #8
     e8c:	046f0500 	strbteq	r0, [pc], #-1280	; e94 <_Min_Stack_Size+0xa94>
     e90:	00000204 	andeq	r0, r0, r4, lsl #4
     e94:	06210768 	strteq	r0, [r1], -r8, ror #14
     e98:	70050000 	andvc	r0, r5, r0
     e9c:	0000ca04 	andeq	ip, r0, r4, lsl #20
     ea0:	43087000 	movwmi	r7, #32768	; 0x8000
     ea4:	05005253 	streq	r5, [r0, #-595]	; 0x253
     ea8:	00ca0471 	sbceq	r0, sl, r1, ror r4
     eac:	07740000 	ldrbeq	r0, [r4, -r0]!
     eb0:	0000046e 	andeq	r0, r0, lr, ror #8
     eb4:	04047205 	streq	r7, [r4], #-517	; 0x205
     eb8:	78000002 	stmdavc	r0, {r1}
     ebc:	00063d07 	andeq	r3, r6, r7, lsl #26
     ec0:	04730500 	ldrbteq	r0, [r3], #-1280	; 0x500
     ec4:	000000ca 	andeq	r0, r0, sl, asr #1
     ec8:	06260780 	strteq	r0, [r6], -r0, lsl #15
     ecc:	74050000 	strvc	r0, [r5], #-0
     ed0:	0000ca04 	andeq	ip, r0, r4, lsl #20
     ed4:	a7078400 	strge	r8, [r7, -r0, lsl #8]
     ed8:	05000007 	streq	r0, [r0, #-7]
     edc:	00ca0475 	sbceq	r0, sl, r5, ror r4
     ee0:	07880000 	streq	r0, [r8, r0]
     ee4:	00000677 	andeq	r0, r0, r7, ror r6
     ee8:	ca047605 	bgt	11e704 <_Min_Stack_Size+0x11e304>
     eec:	8c000000 	stchi	0, cr0, [r0], {-0}
     ef0:	06910c00 	ldreq	r0, [r1], r0, lsl #24
     ef4:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
     ef8:	00031704 	andeq	r1, r3, r4, lsl #14
     efc:	07641000 	strbeq	r1, [r4, -r0]!
     f00:	40010000 	andmi	r0, r1, r0
     f04:	04f20101 	ldrbteq	r0, [r2], #257	; 0x101
     f08:	e4110000 	ldr	r0, [r1], #-0
     f0c:	01000006 	tsteq	r0, r6
     f10:	00ca0145 	sbceq	r0, sl, r5, asr #2
     f14:	43110000 	tstmi	r1, #0
     f18:	01000006 	tsteq	r0, r6
     f1c:	00ca0145 	sbceq	r0, sl, r5, asr #2
     f20:	12000000 	andne	r0, r0, #0
     f24:	00000715 	andeq	r0, r0, r5, lsl r7
     f28:	03b4bb01 			; <UNDEFINED> instruction: 0x03b4bb01
     f2c:	01100800 	tsteq	r0, r0, lsl #16
     f30:	9c010000 	stcls	0, cr0, [r1], {-0}
     f34:	0000052e 	andeq	r0, r0, lr, lsr #10
     f38:	0004cc13 	andeq	ip, r4, r3, lsl ip
     f3c:	0003de00 	andeq	sp, r3, r0, lsl #28
     f40:	0000a008 	andeq	sl, r0, r8
     f44:	14da0100 	ldrbne	r0, [sl], #256	; 0x100
     f48:	000000a0 	andeq	r0, r0, r0, lsr #1
     f4c:	0004d915 	andeq	sp, r4, r5, lsl r9
     f50:	78910200 	ldmvc	r1, {r9}
     f54:	0004e515 	andeq	lr, r4, r5, lsl r5
     f58:	7c910200 	lfmvc	f0, 4, [r1], {0}
     f5c:	16000000 	strne	r0, [r0], -r0
     f60:	000006f9 	strdeq	r0, [r0], -r9
     f64:	c4010801 	strgt	r0, [r1], #-2049	; 0x801
     f68:	70080004 	andvc	r0, r8, r4
     f6c:	01000000 	mrseq	r0, (UNDEF: 0)
     f70:	0005959c 	muleq	r5, ip, r5
     f74:	6d741700 	ldclvs	7, cr1, [r4, #-0]
     f78:	0a010070 	beq	41140 <_Min_Stack_Size+0x40d40>
     f7c:	0000b801 	andeq	fp, r0, r1, lsl #16
     f80:	0000da00 	andeq	sp, r0, r0, lsl #20
     f84:	072a1800 	streq	r1, [sl, -r0, lsl #16]!
     f88:	0a010000 	beq	40f90 <_Min_Stack_Size+0x40b90>
     f8c:	0000b801 	andeq	fp, r0, r1, lsl #16
     f90:	00012e00 	andeq	r2, r1, r0, lsl #28
     f94:	06c91800 	strbeq	r1, [r9], r0, lsl #16
     f98:	0a010000 	beq	40fa0 <_Min_Stack_Size+0x40ba0>
     f9c:	0000b801 	andeq	fp, r0, r1, lsl #16
     fa0:	00016500 	andeq	r6, r1, r0, lsl #10
     fa4:	06b21800 	ldrteq	r1, [r2], r0, lsl #16
     fa8:	0a010000 	beq	40fb0 <_Min_Stack_Size+0x40bb0>
     fac:	0000b801 	andeq	fp, r0, r1, lsl #16
     fb0:	0001a800 	andeq	sl, r1, r0, lsl #16
     fb4:	06c41800 	strbeq	r1, [r4], r0, lsl #16
     fb8:	0a010000 	beq	40fc0 <_Min_Stack_Size+0x40bc0>
     fbc:	0000b801 	andeq	fp, r0, r1, lsl #16
     fc0:	0001e700 	andeq	lr, r1, r0, lsl #14
     fc4:	a5190000 	ldrge	r0, [r9, #-0]
     fc8:	04000004 	streq	r0, [r0], #-4
     fcc:	025e06a7 	subseq	r0, lr, #175112192	; 0xa700000
     fd0:	401a0000 	andsmi	r0, sl, r0
     fd4:	01000007 	tsteq	r0, r7
     fd8:	0000b89b 	muleq	r0, fp, r8
     fdc:	10030500 	andne	r0, r3, r0, lsl #10
     fe0:	0a200000 	beq	800fe8 <_Min_Stack_Size+0x800be8>
     fe4:	00000097 	muleq	r0, r7, r0
     fe8:	000005c2 	andeq	r0, r0, r2, asr #11
     fec:	0000c30b 	andeq	ip, r0, fp, lsl #6
     ff0:	1a000f00 	bne	4bf8 <_Min_Stack_Size+0x47f8>
     ff4:	0000106b 	andeq	r1, r0, fp, rrx
     ff8:	05d39d01 	ldrbeq	r9, [r3, #3329]	; 0xd01
     ffc:	03050000 	movweq	r0, #20480	; 0x5000
    1000:	20000000 	andcs	r0, r0, r0
    1004:	0005d809 	andeq	sp, r5, r9, lsl #16
    1008:	05b20500 	ldreq	r0, [r2, #1280]!	; 0x500
    100c:	5f000000 	svcpl	0x00000000
    1010:	02000000 	andeq	r0, r0, #0
    1014:	00043200 	andeq	r3, r4, r0, lsl #4
    1018:	70010400 	andvc	r0, r1, r0, lsl #8
    101c:	ac000006 	stcge	0, cr0, [r0], {6}
    1020:	b4080001 	strlt	r0, [r8], #-1
    1024:	66080001 	strvs	r0, [r8], -r1
    1028:	732e6269 	teqvc	lr, #-1879048186	; 0x90000006
    102c:	6f682f00 	svcvs	0x00682f00
    1030:	632f656d 	teqvs	pc, #457179136	; 0x1b400000
    1034:	772d6968 	strvc	r6, [sp, -r8, ror #18]!
    1038:	572f6961 	strpl	r6, [pc, -r1, ror #18]!
    103c:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    1040:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
    1044:	636e2f73 	cmnvs	lr, #460	; 0x1cc
    1048:	6c2f756b 	cfstr32vs	mvfx7, [pc], #-428	; ea4 <_Min_Stack_Size+0xaa4>
    104c:	38336261 	ldmdacc	r3!, {r0, r5, r6, r9, sp, lr}
    1050:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1054:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1058:	752d3932 	strvc	r3, [sp, #-2354]!	; 0x932
    105c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1060:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
    1064:	53412055 	movtpl	r2, #4181	; 0x1055
    1068:	322e3220 	eorcc	r3, lr, #32, 4
    106c:	00322e33 	eorseq	r2, r2, r3, lsr lr
    1070:	006f8001 	rsbeq	r8, pc, r1
    1074:	00020000 	andeq	r0, r2, r0
    1078:	00000446 	andeq	r0, r0, r6, asr #8
    107c:	06a50104 	strteq	r0, [r5], r4, lsl #2
    1080:	00d00000 	sbcseq	r0, r0, r0
    1084:	74730000 	ldrbtvc	r0, [r3], #-0
    1088:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0x261
    108c:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
    1090:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1094:	5f393234 	svcpl	0x00393234
    1098:	78393334 	ldmdavc	r9!, {r2, r4, r5, r8, r9, ip, sp}
    109c:	00532e78 	subseq	r2, r3, r8, ror lr
    10a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; fec <_Min_Stack_Size+0xbec>
    10a4:	68632f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    10a8:	61772d69 	cmnvs	r7, r9, ror #26
    10ac:	6f572f69 	svcvs	0x00572f69
    10b0:	70736b72 	rsbsvc	r6, r3, r2, ror fp
    10b4:	73656361 	cmnvc	r5, #-2080374783	; 0x84000001
    10b8:	6b636e2f 	blvs	18dc97c <_Min_Stack_Size+0x18dc57c>
    10bc:	616c2f75 	smcvs	49909	; 0xc2f5
    10c0:	2f383362 	svccs	0x00383362
    10c4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10c8:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    10cc:	73752d39 	cmnvc	r5, #3648	; 0xe40
    10d0:	31747261 	cmncc	r4, r1, ror #4
    10d4:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
    10d8:	20534120 	subscs	r4, r3, r0, lsr #2
    10dc:	33322e32 	teqcc	r2, #800	; 0x320
    10e0:	0100322e 	tsteq	r0, lr, lsr #4
    10e4:	00054380 	andeq	r4, r5, r0, lsl #7
    10e8:	58000400 	stmdapl	r0, {sl}
    10ec:	04000004 	streq	r0, [r0], #-4
    10f0:	00015601 	andeq	r5, r1, r1, lsl #12
    10f4:	08130100 	ldmdaeq	r3, {r8}
    10f8:	00210000 	eoreq	r0, r1, r0
    10fc:	00f00000 	rscseq	r0, r0, r0
    1100:	00000000 	andeq	r0, r0, r0
    1104:	071a0000 	ldreq	r0, [sl, -r0]
    1108:	01020000 	mrseq	r0, (UNDEF: 2)
    110c:	00031606 	andeq	r1, r3, r6, lsl #12
    1110:	02da0300 	sbcseq	r0, sl, #0, 6
    1114:	1c020000 	stcne	0, cr0, [r2], {-0}
    1118:	00000037 	andeq	r0, r0, r7, lsr r0
    111c:	14080102 	strne	r0, [r8], #-258	; 0x102
    1120:	02000003 	andeq	r0, r0, #3
    1124:	00c10502 	sbceq	r0, r1, r2, lsl #10
    1128:	02020000 	andeq	r0, r2, #0
    112c:	00037f07 	andeq	r7, r3, r7, lsl #30
    1130:	03fb0300 	mvnseq	r0, #0, 6
    1134:	37020000 	strcc	r0, [r2, -r0]
    1138:	00000057 	andeq	r0, r0, r7, asr r0
    113c:	7b050402 	blvc	14214c <_Min_Stack_Size+0x141d4c>
    1140:	03000002 	movweq	r0, #2
    1144:	0000008e 	andeq	r0, r0, lr, lsl #1
    1148:	00693802 	rsbeq	r3, r9, r2, lsl #16
    114c:	04020000 	streq	r0, [r2], #-0
    1150:	00028907 	andeq	r8, r2, r7, lsl #18
    1154:	05080200 	streq	r0, [r8, #-512]	; 0x200
    1158:	00000276 	andeq	r0, r0, r6, ror r2
    115c:	84070802 	strhi	r0, [r7], #-2050	; 0x802
    1160:	04000002 	streq	r0, [r0], #-2
    1164:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1168:	04020074 	streq	r0, [r2], #-116	; 0x74
    116c:	00028e07 	andeq	r8, r2, r7, lsl #28
    1170:	02dc0300 	sbcseq	r0, ip, #0, 6
    1174:	2a030000 	bcs	c117c <_Min_Stack_Size+0xc0d7c>
    1178:	0000002c 	andeq	r0, r0, ip, lsr #32
    117c:	0003fd03 	andeq	pc, r3, r3, lsl #26
    1180:	4c410300 	mcrrmi	3, 0, r0, r1, cr0
    1184:	03000000 	movweq	r0, #0
    1188:	00000090 	muleq	r0, r0, r0
    118c:	005e4203 	subseq	r4, lr, r3, lsl #4
    1190:	04050000 	streq	r0, [r5], #-0
    1194:	0150040e 	cmpeq	r0, lr, lsl #8
    1198:	00000169 	andeq	r0, r0, r9, ror #2
    119c:	00088906 	andeq	r8, r8, r6, lsl #18
    11a0:	01520400 	cmpeq	r2, r0, lsl #8
    11a4:	00000180 	andeq	r0, r0, r0, lsl #3
    11a8:	04320600 	ldrteq	r0, [r2], #-1536	; 0x600
    11ac:	53040000 	movwpl	r0, #16384	; 0x4000
    11b0:	00018501 	andeq	r8, r1, r1, lsl #10
    11b4:	d0062000 	andle	r2, r6, r0
    11b8:	04000008 	streq	r0, [r0], #-8
    11bc:	01950154 	orrseq	r0, r5, r4, asr r1
    11c0:	06800000 	streq	r0, [r0], r0
    11c4:	0000089c 	muleq	r0, ip, r8
    11c8:	85015504 	strhi	r5, [r1, #-1284]	; 0x504
    11cc:	a0000001 	andge	r0, r0, r1
    11d0:	00092107 	andeq	r2, r9, r7, lsl #2
    11d4:	01560400 	cmpeq	r6, r0, lsl #8
    11d8:	0000019a 	muleq	r0, sl, r1
    11dc:	46070100 	strmi	r0, [r7], -r0, lsl #2
    11e0:	04000004 	streq	r0, [r0], #-4
    11e4:	01850157 	orreq	r0, r5, r7, asr r1
    11e8:	01200000 	teqeq	r0, r0
    11ec:	0008c507 	andeq	ip, r8, r7, lsl #10
    11f0:	01580400 	cmpeq	r8, r0, lsl #8
    11f4:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    11f8:	50070180 	andpl	r0, r7, r0, lsl #3
    11fc:	04000004 	streq	r0, [r0], #-4
    1200:	01850159 	orreq	r0, r5, r9, asr r1
    1204:	01a00000 	moveq	r0, r0
    1208:	0007c807 	andeq	ip, r7, r7, lsl #16
    120c:	015a0400 	cmpeq	sl, r0, lsl #8
    1210:	000001a4 	andeq	r0, r0, r4, lsr #3
    1214:	5a070200 	bpl	1c1a1c <_Min_Stack_Size+0x1c161c>
    1218:	04000004 	streq	r0, [r0], #-4
    121c:	01a9015b 			; <UNDEFINED> instruction: 0x01a9015b
    1220:	02200000 	eoreq	r0, r0, #0
    1224:	00504908 	subseq	r4, r0, r8, lsl #18
    1228:	c9015c04 	stmdbgt	r1, {r2, sl, fp, ip, lr}
    122c:	00000001 	andeq	r0, r0, r1
    1230:	04640703 	strbteq	r0, [r4], #-1795	; 0x703
    1234:	5d040000 	stcpl	0, cr0, [r4, #-0]
    1238:	0001ce01 	andeq	ip, r1, r1, lsl #28
    123c:	0703f000 	streq	pc, [r3, -r0]
    1240:	00000897 	muleq	r0, r7, r8
    1244:	df015e04 	svcle	0x00015e04
    1248:	00000001 	andeq	r0, r0, r1
    124c:	a209000e 	andge	r0, r9, #14
    1250:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    1254:	0a000001 	beq	1260 <_Min_Stack_Size+0xe60>
    1258:	00000179 	andeq	r0, r0, r9, ror r1
    125c:	04020007 	streq	r0, [r2], #-7
    1260:	00007207 	andeq	r7, r0, r7, lsl #4
    1264:	01690b00 	cmneq	r9, r0, lsl #22
    1268:	a2090000 	andge	r0, r9, #0
    126c:	95000000 	strls	r0, [r0, #-0]
    1270:	0a000001 	beq	127c <_Min_Stack_Size+0xe7c>
    1274:	00000179 	andeq	r0, r0, r9, ror r1
    1278:	690b0017 	stmdbvs	fp, {r0, r1, r2, r4}
    127c:	0b000001 	bleq	1288 <_Min_Stack_Size+0xe88>
    1280:	00000169 	andeq	r0, r0, r9, ror #2
    1284:	0001690b 	andeq	r6, r1, fp, lsl #18
    1288:	01690b00 	cmneq	r9, r0, lsl #22
    128c:	a2090000 	andge	r0, r9, #0
    1290:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    1294:	0a000001 	beq	12a0 <_Min_Stack_Size+0xea0>
    1298:	00000179 	andeq	r0, r0, r9, ror r1
    129c:	8c090037 	stchi	0, cr0, [r9], {55}	; 0x37
    12a0:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    12a4:	0a000001 	beq	12b0 <_Min_Stack_Size+0xeb0>
    12a8:	00000179 	andeq	r0, r0, r9, ror r1
    12ac:	b90b00ef 	stmdblt	fp, {r0, r1, r2, r3, r5, r6, r7}
    12b0:	09000001 	stmdbeq	r0, {r0}
    12b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    12b8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    12bc:	0001790c 	andeq	r7, r1, ip, lsl #18
    12c0:	00028300 	andeq	r8, r2, r0, lsl #6
    12c4:	0000a20b 	andeq	sl, r0, fp, lsl #4
    12c8:	09510d00 	ldmdbeq	r1, {r8, sl, fp}^
    12cc:	5f040000 	svcpl	0x00040000
    12d0:	0000ad01 	andeq	sl, r0, r1, lsl #26
    12d4:	048c0e00 	streq	r0, [ip], #3584	; 0xe00
    12d8:	030b0170 	movweq	r0, #45424	; 0xb170
    12dc:	4d060000 	stcmi	0, cr0, [r6, #-0]
    12e0:	04000006 	streq	r0, [r0], #-6
    12e4:	030b0172 	movweq	r0, #45426	; 0xb172
    12e8:	06000000 	streq	r0, [r0], -r0
    12ec:	0000067f 	andeq	r0, r0, pc, ror r6
    12f0:	df017304 	svcle	0x00017304
    12f4:	04000001 	streq	r0, [r0], #-1
    12f8:	00073106 	andeq	r3, r7, r6, lsl #2
    12fc:	01740400 	cmneq	r4, r0, lsl #8
    1300:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1304:	06ce0608 	strbeq	r0, [lr], r8, lsl #12
    1308:	75040000 	strvc	r0, [r4, #-0]
    130c:	0001df01 	andeq	sp, r1, r1, lsl #30
    1310:	530f0c00 	movwpl	r0, #64512	; 0xfc00
    1314:	04005243 	streq	r5, [r0], #-579	; 0x243
    1318:	01df0176 	bicseq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
    131c:	0f100000 	svceq	0x00100000
    1320:	00524343 	subseq	r4, r2, r3, asr #6
    1324:	df017704 	svcle	0x00017704
    1328:	14000001 	strne	r0, [r0], #-1
    132c:	5048530f 	subpl	r5, r8, pc, lsl #6
    1330:	01780400 	cmneq	r8, r0, lsl #8
    1334:	00000320 	andeq	r0, r0, r0, lsr #6
    1338:	06f30618 	usateq	r0, #19, r8, lsl #12
    133c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
    1340:	0001df01 	andeq	sp, r1, r1, lsl #30
    1344:	a6062400 	strge	r2, [r6], -r0, lsl #8
    1348:	04000006 	streq	r0, [r0], #-6
    134c:	01df017a 	bicseq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    1350:	06280000 	strteq	r0, [r8], -r0
    1354:	00000750 	andeq	r0, r0, r0, asr r7
    1358:	df017b04 	svcle	0x00017b04
    135c:	2c000001 	stccs	0, cr0, [r0], {1}
    1360:	00073b06 	andeq	r3, r7, r6, lsl #22
    1364:	017c0400 	cmneq	ip, r0, lsl #8
    1368:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    136c:	070f0630 	smladxeq	pc, r0, r6, r0	; <UNPREDICTABLE>
    1370:	7d040000 	stcvc	0, cr0, [r4, #-0]
    1374:	0001df01 	andeq	sp, r1, r1, lsl #30
    1378:	8c063400 	cfstrshi	mvf3, [r6], {-0}
    137c:	04000006 	streq	r0, [r0], #-6
    1380:	01df017e 	bicseq	r0, pc, lr, ror r1	; <UNPREDICTABLE>
    1384:	06380000 	ldrteq	r0, [r8], -r0
    1388:	0000078b 	andeq	r0, r0, fp, lsl #15
    138c:	df017f04 	svcle	0x00017f04
    1390:	3c000001 	stccc	0, cr0, [r0], {1}
    1394:	5246500f 	subpl	r5, r6, #15
    1398:	01800400 	orreq	r0, r0, r0, lsl #8
    139c:	00000335 	andeq	r0, r0, r5, lsr r3
    13a0:	46440f40 	strbmi	r0, [r4], -r0, asr #30
    13a4:	81040052 	qaddhi	r0, r2, r4
    13a8:	00030b01 	andeq	r0, r3, r1, lsl #22
    13ac:	410f4800 	tstmi	pc, r0, lsl #16
    13b0:	04005244 	streq	r5, [r0], #-580	; 0x244
    13b4:	030b0182 	movweq	r0, #45442	; 0xb182
    13b8:	064c0000 	strbeq	r0, [ip], -r0
    13bc:	0000075f 	andeq	r0, r0, pc, asr r7
    13c0:	4f018304 	svcmi	0x00018304
    13c4:	50000003 	andpl	r0, r0, r3
    13c8:	00073606 	andeq	r3, r7, r6, lsl #12
    13cc:	01840400 	orreq	r0, r4, r0, lsl #8
    13d0:	00000369 	andeq	r0, r0, r9, ror #6
    13d4:	04320660 	ldrteq	r0, [r2], #-1632	; 0x660
    13d8:	85040000 	strhi	r0, [r4, #-0]
    13dc:	00035901 	andeq	r5, r3, r1, lsl #18
    13e0:	b2067400 	andlt	r7, r6, #0, 8
    13e4:	04000007 	streq	r0, [r0], #-7
    13e8:	01df0186 	bicseq	r0, pc, r6, lsl #3
    13ec:	00880000 	addeq	r0, r8, r0
    13f0:	0001df10 	andeq	sp, r1, r0, lsl pc
    13f4:	008c0900 	addeq	r0, ip, r0, lsl #18
    13f8:	03200000 	teqeq	r0, #0
    13fc:	790a0000 	stmdbvc	sl, {}	; <UNPREDICTABLE>
    1400:	0b000001 	bleq	140c <_Min_Stack_Size+0x100c>
    1404:	03100b00 	tsteq	r0, #0, 22
    1408:	a2090000 	andge	r0, r9, #0
    140c:	35000000 	strcc	r0, [r0, #-0]
    1410:	0a000003 	beq	1424 <_Min_Stack_Size+0x1024>
    1414:	00000179 	andeq	r0, r0, r9, ror r1
    1418:	3a100001 	bcc	401424 <_Min_Stack_Size+0x401024>
    141c:	0b000003 	bleq	1430 <_Min_Stack_Size+0x1030>
    1420:	00000325 	andeq	r0, r0, r5, lsr #6
    1424:	0000a209 	andeq	sl, r0, r9, lsl #4
    1428:	00034f00 	andeq	r4, r3, r0, lsl #30
    142c:	01790a00 	cmneq	r9, r0, lsl #20
    1430:	00030000 	andeq	r0, r3, r0
    1434:	00035410 	andeq	r5, r3, r0, lsl r4
    1438:	033f0b00 	teqeq	pc, #0, 22
    143c:	a2090000 	andge	r0, r9, #0
    1440:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    1444:	0a000003 	beq	1458 <_Min_Stack_Size+0x1058>
    1448:	00000179 	andeq	r0, r0, r9, ror r1
    144c:	6e100004 	cdpvs	0, 1, cr0, cr0, cr4, {0}
    1450:	0b000003 	bleq	1464 <_Min_Stack_Size+0x1064>
    1454:	00000359 	andeq	r0, r0, r9, asr r3
    1458:	0006660d 	andeq	r6, r6, sp, lsl #12
    145c:	01870400 	orreq	r0, r7, r0, lsl #8
    1460:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1464:	6f04100e 	svcvs	0x0004100e
    1468:	0003bd02 	andeq	fp, r3, r2, lsl #26
    146c:	08ac0600 	stmiaeq	ip!, {r9, sl}
    1470:	71040000 	mrsvc	r0, (UNDEF: 4)
    1474:	0001df02 	andeq	sp, r1, r2, lsl #30
    1478:	8a060000 	bhi	181480 <_Min_Stack_Size+0x181080>
    147c:	04000009 	streq	r0, [r0], #-9
    1480:	01df0272 	bicseq	r0, pc, r2, ror r2	; <UNPREDICTABLE>
    1484:	0f040000 	svceq	0x00040000
    1488:	004c4156 	subeq	r4, ip, r6, asr r1
    148c:	df027304 	svcle	0x00027304
    1490:	08000001 	stmdaeq	r0, {r0}
    1494:	0008ca06 	andeq	ip, r8, r6, lsl #20
    1498:	02740400 	rsbseq	r0, r4, #0, 8
    149c:	0000030b 	andeq	r0, r0, fp, lsl #6
    14a0:	080d000c 	stmdaeq	sp, {r2, r3}
    14a4:	04000009 	streq	r0, [r0], #-9
    14a8:	037f0275 	cmneq	pc, #1342177287	; 0x50000007
    14ac:	970b0000 	strls	r0, [fp, -r0]
    14b0:	11000000 	mrsne	r0, (UNDEF: 0)
    14b4:	01f90501 	mvnseq	r0, r1, lsl #10
    14b8:	000003e4 	andeq	r0, r0, r4, ror #7
    14bc:	0003f312 	andeq	pc, r3, r2, lsl r3	; <UNPREDICTABLE>
    14c0:	05120000 	ldreq	r0, [r2, #-0]
    14c4:	01000004 	tsteq	r0, r4
    14c8:	05280d00 	streq	r0, [r8, #-3328]!	; 0xd00
    14cc:	f9050000 			; <UNDEFINED> instruction: 0xf9050000
    14d0:	0003ce01 	andeq	ip, r3, r1, lsl #28
    14d4:	06041300 	streq	r1, [r4], -r0, lsl #6
    14d8:	00042936 	andeq	r2, r4, r6, lsr r9
    14dc:	09261400 	stmdbeq	r6!, {sl, ip}
    14e0:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    14e4:	0000008c 	andeq	r0, r0, ip, lsl #1
    14e8:	095b1400 	ldmdbeq	fp, {sl, ip}^
    14ec:	3d060000 	stccc	0, cr0, [r6, #-0]
    14f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    14f4:	09361401 	ldmdbeq	r6!, {r0, sl, ip}
    14f8:	42060000 	andmi	r0, r6, #0
    14fc:	0000008c 	andeq	r0, r0, ip, lsl #1
    1500:	07de1402 	ldrbeq	r1, [lr, r2, lsl #8]
    1504:	47060000 	strmi	r0, [r6, -r0]
    1508:	000003e4 	andeq	r0, r0, r4, ror #7
    150c:	cd030003 	stcgt	0, cr0, [r3, #-12]
    1510:	06000007 	streq	r0, [r0], -r7
    1514:	0003f04a 	andeq	pc, r3, sl, asr #32
    1518:	099c1500 	ldmibeq	ip, {r8, sl, ip}
    151c:	76010000 	strvc	r0, [r1], -r0
    1520:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
    1524:	00000014 	andeq	r0, r0, r4, lsl r0
    1528:	04599c01 	ldrbeq	r9, [r9], #-3073	; 0xc01
    152c:	65160000 	ldrvs	r0, [r6, #-0]
    1530:	01000008 	tsteq	r0, r8
    1534:	0000a276 	andeq	sl, r0, r6, ror r2
    1538:	00021e00 	andeq	r1, r2, r0, lsl #28
    153c:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
    1540:	01000008 	tsteq	r0, r8
    1544:	00059888 	andeq	r9, r5, r8, lsl #17
    1548:	00007808 	andeq	r7, r0, r8, lsl #16
    154c:	ab9c0100 	blge	fe701954 <_estack+0xde6d1954>
    1550:	16000004 	strne	r0, [r0], -r4
    1554:	00000803 	andeq	r0, r0, r3, lsl #16
    1558:	04ab8801 	strteq	r8, [fp], #2049	; 0x801
    155c:	023f0000 	eorseq	r0, pc, #0
    1560:	15170000 	ldrne	r0, [r7, #-0]
    1564:	01000009 	tsteq	r0, r9
    1568:	00008c8a 	andeq	r8, r0, sl, lsl #25
    156c:	00027900 	andeq	r7, r2, r0, lsl #18
    1570:	08821700 	stmeq	r2, {r8, r9, sl, ip}
    1574:	8a010000 	bhi	4157c <_Min_Stack_Size+0x4117c>
    1578:	0000008c 	andeq	r0, r0, ip, lsl #1
    157c:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    1580:	0008d517 	andeq	sp, r8, r7, lsl r5
    1584:	8c8a0100 	stfhis	f0, [sl], {0}
    1588:	dc000000 	stcle	0, cr0, [r0], {-0}
    158c:	00000002 	andeq	r0, r0, r2
    1590:	04290418 	strteq	r0, [r9], #-1048	; 0x418
    1594:	b1150000 	tstlt	r5, r0
    1598:	01000008 	tsteq	r0, r8
    159c:	000610b4 	strheq	r1, [r6], -r4
    15a0:	00001408 	andeq	r1, r0, r8, lsl #8
    15a4:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    15a8:	16000004 	strne	r0, [r0], -r4
    15ac:	0000097d 	andeq	r0, r0, sp, ror r9
    15b0:	00a2b401 	adceq	fp, r2, r1, lsl #8
    15b4:	02ff0000 	rscseq	r0, pc, #0
    15b8:	a5160000 	ldrge	r0, [r6, #-0]
    15bc:	01000008 	tsteq	r0, r8
    15c0:	0000a2b4 			; <UNDEFINED> instruction: 0x0000a2b4
    15c4:	00032000 	andeq	r2, r3, r0
    15c8:	dc150000 	ldcle	0, cr0, [r5], {-0}
    15cc:	01000008 	tsteq	r0, r8
    15d0:	000624c7 	andeq	r2, r6, r7, asr #9
    15d4:	00001808 	andeq	r1, r0, r8, lsl #16
    15d8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    15dc:	16000005 	strne	r0, [r0], -r5
    15e0:	0000098f 	andeq	r0, r0, pc, lsl #19
    15e4:	008cc701 	addeq	ip, ip, r1, lsl #14
    15e8:	03410000 	movteq	r0, #4096	; 0x1000
    15ec:	8e190000 	cdphi	0, 1, cr0, cr9, cr0, {0}
    15f0:	01000008 	tsteq	r0, r8
    15f4:	0003e4c7 	andeq	lr, r3, r7, asr #9
    15f8:	00510100 	subseq	r0, r1, r0, lsl #2
    15fc:	0008f015 	andeq	pc, r8, r5, lsl r0	; <UNPREDICTABLE>
    1600:	3cdf0100 	ldfcce	f0, [pc], {0}
    1604:	18080006 	stmdane	r8, {r1, r2}
    1608:	01000000 	mrseq	r0, (UNDEF: 0)
    160c:	00053a9c 	muleq	r5, ip, sl
    1610:	07f11900 	ldrbeq	r1, [r1, r0, lsl #18]!
    1614:	df010000 	svcle	0x00010000
    1618:	000000a2 	andeq	r0, r0, r2, lsr #1
    161c:	1a005001 	bne	15628 <_Min_Stack_Size+0x15228>
    1620:	000004a5 	andeq	r0, r0, r5, lsr #9
    1624:	c906a704 	stmdbgt	r6, {r2, r8, r9, sl, sp, pc}
    1628:	00000003 	andeq	r0, r0, r3
    162c:	00000841 	andeq	r0, r0, r1, asr #16
    1630:	05ae0004 	streq	r0, [lr, #4]!
    1634:	01040000 	mrseq	r0, (UNDEF: 4)
    1638:	00000156 	andeq	r0, r0, r6, asr r1
    163c:	000ae001 	andeq	lr, sl, r1
    1640:	00002100 	andeq	r2, r0, r0, lsl #2
    1644:	00012000 	andeq	r2, r1, r0
    1648:	00000000 	andeq	r0, r0, r0
    164c:	0009b200 	andeq	fp, r9, r0, lsl #4
    1650:	06010200 	streq	r0, [r1], -r0, lsl #4
    1654:	00000316 	andeq	r0, r0, r6, lsl r3
    1658:	0002da03 	andeq	sp, r2, r3, lsl #20
    165c:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    1660:	02000000 	andeq	r0, r0, #0
    1664:	03140801 	tsteq	r4, #65536	; 0x10000
    1668:	02020000 	andeq	r0, r2, #0
    166c:	0000c105 	andeq	ip, r0, r5, lsl #2
    1670:	00990300 	addseq	r0, r9, r0, lsl #6
    1674:	26020000 	strcs	r0, [r2], -r0
    1678:	00000050 	andeq	r0, r0, r0, asr r0
    167c:	7f070202 	svcvc	0x00070202
    1680:	03000003 	movweq	r0, #3
    1684:	000003fb 	strdeq	r0, [r0], -fp
    1688:	00623702 	rsbeq	r3, r2, r2, lsl #14
    168c:	04020000 	streq	r0, [r2], #-0
    1690:	00027b05 	andeq	r7, r2, r5, lsl #22
    1694:	008e0300 	addeq	r0, lr, r0, lsl #6
    1698:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    169c:	00000074 	andeq	r0, r0, r4, ror r0
    16a0:	89070402 	stmdbhi	r7, {r1, sl}
    16a4:	02000002 	andeq	r0, r0, #2
    16a8:	02760508 	rsbseq	r0, r6, #8, 10	; 0x2000000
    16ac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    16b0:	00028407 	andeq	r8, r2, r7, lsl #8
    16b4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    16b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    16bc:	8e070402 	cdphi	4, 0, cr0, cr7, cr2, {0}
    16c0:	03000002 	movweq	r0, #2
    16c4:	000002dc 	ldrdeq	r0, [r0], -ip
    16c8:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    16cc:	9b030000 	blls	c16d4 <_Min_Stack_Size+0xc12d4>
    16d0:	03000000 	movweq	r0, #0
    16d4:	00004536 	andeq	r4, r0, r6, lsr r5
    16d8:	03fd0300 	mvnseq	r0, #0, 6
    16dc:	41030000 	mrsmi	r0, (UNDEF: 3)
    16e0:	00000057 	andeq	r0, r0, r7, asr r0
    16e4:	00009003 	andeq	r9, r0, r3
    16e8:	69420300 	stmdbvs	r2, {r8, r9}^
    16ec:	02000000 	andeq	r0, r0, #0
    16f0:	00720704 	rsbseq	r0, r2, r4, lsl #14
    16f4:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    16f8:	06000000 	streq	r0, [r0], -r0
    16fc:	000000b8 	strheq	r0, [r0], -r8
    1700:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1704:	0000c307 	andeq	ip, r0, r7, lsl #6
    1708:	05000100 	streq	r0, [r0, #-256]	; 0x100
    170c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1710:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1714:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1718:	00ff01f9 	ldrshteq	r0, [pc], #25
    171c:	f3090000 	vhadd.u8	d0, d9, d0
    1720:	00000003 	andeq	r0, r0, r3
    1724:	00040509 	andeq	r0, r4, r9, lsl #10
    1728:	0a000100 	beq	1b30 <_Min_Stack_Size+0x1730>
    172c:	00000528 	andeq	r0, r0, r8, lsr #10
    1730:	e901f904 	stmdb	r1, {r2, r8, fp, ip, sp, lr, pc}
    1734:	0b000000 	bleq	173c <_Min_Stack_Size+0x133c>
    1738:	03d40428 	bicseq	r0, r4, #40, 8	; 0x28000000
    173c:	00000197 	muleq	r0, r7, r1
    1740:	0002d40c 	andeq	sp, r2, ip, lsl #8
    1744:	03d60400 	bicseq	r0, r6, #0, 8
    1748:	000000ca 	andeq	r0, r0, sl, asr #1
    174c:	01400c00 	cmpeq	r0, r0, lsl #24
    1750:	d7040000 	strle	r0, [r4, -r0]
    1754:	0000ca03 	andeq	ip, r0, r3, lsl #20
    1758:	6e0c0400 	cfcpysvs	mvf0, mvf12
    175c:	04000002 	streq	r0, [r0], #-2
    1760:	00ca03d8 	ldrdeq	r0, [sl], #56	; 0x38
    1764:	0c080000 	stceq	0, cr0, [r8], {-0}
    1768:	000002a9 	andeq	r0, r0, r9, lsr #5
    176c:	ca03d904 	bgt	f7b84 <_Min_Stack_Size+0xf7784>
    1770:	0c000000 	stceq	0, cr0, [r0], {-0}
    1774:	5244490d 	subpl	r4, r4, #212992	; 0x34000
    1778:	03da0400 	bicseq	r0, sl, #0, 8
    177c:	000000ca 	andeq	r0, r0, sl, asr #1
    1780:	444f0d10 	strbmi	r0, [pc], #-3344	; 1788 <_Min_Stack_Size+0x1388>
    1784:	db040052 	blle	1018d4 <_Min_Stack_Size+0x1014d4>
    1788:	0000ca03 	andeq	ip, r0, r3, lsl #20
    178c:	380c1400 	stmdacc	ip, {sl, ip}
    1790:	04000005 	streq	r0, [r0], #-5
    1794:	00df03dc 	ldrsbeq	r0, [pc], #60	; <UNPREDICTABLE>
    1798:	0c180000 	ldceq	0, cr0, [r8], {-0}
    179c:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    17a0:	df03dd04 	svcle	0x0003dd04
    17a4:	1a000000 	bne	17ac <_Min_Stack_Size+0x13ac>
    17a8:	00054f0c 	andeq	r4, r5, ip, lsl #30
    17ac:	03de0400 	bicseq	r0, lr, #0, 8
    17b0:	000000ca 	andeq	r0, r0, sl, asr #1
    17b4:	46410d1c 			; <UNDEFINED> instruction: 0x46410d1c
    17b8:	df040052 	svcle	0x00040052
    17bc:	00019703 	andeq	r9, r1, r3, lsl #14
    17c0:	05002000 	streq	r2, [r0, #-0]
    17c4:	000000cf 	andeq	r0, r0, pc, asr #1
    17c8:	0000000a 	andeq	r0, r0, sl
    17cc:	03e00400 	mvneq	r0, #0, 8
    17d0:	0000010b 	andeq	r0, r0, fp, lsl #2
    17d4:	4205010e 	andmi	r0, r5, #-2147483645	; 0x80000003
    17d8:	000001c9 	andeq	r0, r0, r9, asr #3
    17dc:	0002af09 	andeq	sl, r2, r9, lsl #30
    17e0:	9b090000 	blls	2417e8 <_Min_Stack_Size+0x2413e8>
    17e4:	01000002 	tsteq	r0, r2
    17e8:	0000d609 	andeq	sp, r0, r9, lsl #12
    17ec:	10090200 	andne	r0, r9, r0, lsl #4
    17f0:	03000001 	movweq	r0, #1
    17f4:	00560300 	subseq	r0, r6, r0, lsl #6
    17f8:	47050000 	strmi	r0, [r5, -r0]
    17fc:	000001a8 	andeq	r0, r0, r8, lsr #3
    1800:	4f05010e 	svcmi	0x0005010e
    1804:	000001e9 	andeq	r0, r0, r9, ror #3
    1808:	0002f409 	andeq	pc, r2, r9, lsl #8
    180c:	7b090000 	blvc	241814 <_Min_Stack_Size+0x241414>
    1810:	01000000 	mrseq	r0, (UNDEF: 0)
    1814:	012e0300 	teqeq	lr, r0, lsl #6
    1818:	52050000 	andpl	r0, r5, #0
    181c:	000001d4 	ldrdeq	r0, [r0], -r4
    1820:	5a05010e 	bpl	141c60 <_Min_Stack_Size+0x141860>
    1824:	00000215 	andeq	r0, r0, r5, lsl r2
    1828:	00040c09 	andeq	r0, r4, r9, lsl #24
    182c:	2c090000 	stccs	0, cr0, [r9], {-0}
    1830:	01000003 	tsteq	r0, r3
    1834:	0003ce09 	andeq	ip, r3, r9, lsl #28
    1838:	e4090200 	str	r0, [r9], #-512	; 0x200
    183c:	03000002 	movweq	r0, #2
    1840:	04840300 	streq	r0, [r4], #768	; 0x300
    1844:	5f050000 	svcpl	0x00050000
    1848:	000001f4 	strdeq	r0, [r0], -r4
    184c:	6e05010e 	adfvss	f0, f5, #0.5
    1850:	0000023b 	andeq	r0, r0, fp, lsr r2
    1854:	0004b209 	andeq	fp, r4, r9, lsl #4
    1858:	03090000 	movweq	r0, #36864	; 0x9000
    185c:	01000005 	tsteq	r0, r5
    1860:	00049609 	andeq	r9, r4, r9, lsl #12
    1864:	03000200 	movweq	r0, #512	; 0x200
    1868:	0000053e 	andeq	r0, r0, lr, lsr r5
    186c:	02207205 	eoreq	r7, r0, #1342177280	; 0x50000000
    1870:	010e0000 	mrseq	r0, (UNDEF: 14)
    1874:	025b7a05 	subseq	r7, fp, #20480	; 0x5000
    1878:	fc090000 	stc2	0, cr0, [r9], {-0}
    187c:	00000009 	andeq	r0, r0, r9
    1880:	0009bc09 	andeq	fp, r9, r9, lsl #24
    1884:	03000100 	movweq	r0, #256	; 0x100
    1888:	00000ac0 	andeq	r0, r0, r0, asr #21
    188c:	02467d05 	subeq	r7, r6, #320	; 0x140
    1890:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    1894:	02ab8405 	adceq	r8, fp, #83886080	; 0x5000000
    1898:	65100000 	ldrvs	r0, [r0, #-0]
    189c:	05000002 	streq	r0, [r0, #-2]
    18a0:	0000b886 	andeq	fp, r0, r6, lsl #17
    18a4:	54100000 	ldrpl	r0, [r0], #-0
    18a8:	05000005 	streq	r0, [r0, #-5]
    18ac:	0001c989 	andeq	ip, r1, r9, lsl #19
    18b0:	74100400 	ldrvc	r0, [r0], #-1024	; 0x400
    18b4:	05000003 	streq	r0, [r0, #-3]
    18b8:	0002158c 	andeq	r1, r2, ip, lsl #11
    18bc:	cb100500 	blgt	402cc4 <_Min_Stack_Size+0x4028c4>
    18c0:	05000000 	streq	r0, [r0, #-0]
    18c4:	0001e98f 	andeq	lr, r1, pc, lsl #19
    18c8:	22100600 	andscs	r0, r0, #0, 12
    18cc:	05000003 	streq	r0, [r0, #-3]
    18d0:	00023b92 	muleq	r2, r2, fp
    18d4:	03000700 	movweq	r0, #1792	; 0x700
    18d8:	00000351 	andeq	r0, r0, r1, asr r3
    18dc:	02669405 	rsbeq	r9, r6, #83886080	; 0x5000000
    18e0:	30110000 	andscc	r0, r1, r0
    18e4:	0100000a 	tsteq	r0, sl
    18e8:	0006547f 	andeq	r5, r6, pc, ror r4
    18ec:	00015c08 	andeq	r5, r1, r8, lsl #24
    18f0:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    18f4:	12000004 	andne	r0, r0, #4
    18f8:	0000166c 	andeq	r1, r0, ip, ror #12
    18fc:	04f97f01 	ldrbteq	r7, [r9], #3841	; 0xf01
    1900:	037b0000 	cmneq	fp, #0
    1904:	a4130000 	ldrge	r0, [r3], #-0
    1908:	31080006 	tstcc	r8, r6
    190c:	f4000008 	vst4.8	{d0-d3}, [r0], r8
    1910:	14000002 	strne	r0, [r0], #-2
    1914:	31015101 	tstcc	r1, r1, lsl #2
    1918:	03500114 	cmpeq	r0, #20, 2
    191c:	0004000a 	andeq	r0, r4, sl
    1920:	0006b215 	andeq	fp, r6, r5, lsl r2
    1924:	00083108 	andeq	r3, r8, r8, lsl #2
    1928:	00030e00 	andeq	r0, r3, r0, lsl #28
    192c:	51011400 	tstpl	r1, r0, lsl #8
    1930:	01143001 	tsteq	r4, r1
    1934:	000a0350 	andeq	r0, sl, r0, asr r3
    1938:	ba130004 	blt	4c1950 <_Min_Stack_Size+0x4c1550>
    193c:	31080006 	tstcc	r8, r6
    1940:	26000008 	strcs	r0, [r0], -r8
    1944:	14000003 	strne	r0, [r0], #-3
    1948:	31015101 	tstcc	r1, r1, lsl #2
    194c:	01500114 	cmpeq	r0, r4, lsl r1
    1950:	c6150031 			; <UNDEFINED> instruction: 0xc6150031
    1954:	31080006 	tstcc	r8, r6
    1958:	3e000008 	cdpcc	0, 0, cr0, cr0, cr8, {0}
    195c:	14000003 	strne	r0, [r0], #-3
    1960:	30015101 	andcc	r5, r1, r1, lsl #2
    1964:	01500114 	cmpeq	r0, r4, lsl r1
    1968:	ce130031 	mrcgt	0, 0, r0, cr3, cr1, {1}
    196c:	31080006 	tstcc	r8, r6
    1970:	56000008 	strpl	r0, [r0], -r8
    1974:	14000003 	strne	r0, [r0], #-3
    1978:	31015101 	tstcc	r1, r1, lsl #2
    197c:	01500114 	cmpeq	r0, r4, lsl r1
    1980:	da150032 	ble	541a50 <_Min_Stack_Size+0x541650>
    1984:	31080006 	tstcc	r8, r6
    1988:	6e000008 	cdpvs	0, 0, cr0, cr0, cr8, {0}
    198c:	14000003 	strne	r0, [r0], #-3
    1990:	30015101 	andcc	r5, r1, r1, lsl #2
    1994:	01500114 	cmpeq	r0, r4, lsl r1
    1998:	e2130032 	ands	r0, r3, #50	; 0x32
    199c:	31080006 	tstcc	r8, r6
    19a0:	86000008 	strhi	r0, [r0], -r8
    19a4:	14000003 	strne	r0, [r0], #-3
    19a8:	31015101 	tstcc	r1, r1, lsl #2
    19ac:	01500114 	cmpeq	r0, r4, lsl r1
    19b0:	ee150034 	mrc	0, 0, r0, cr5, cr4, {1}
    19b4:	31080006 	tstcc	r8, r6
    19b8:	9e000008 	cdpls	0, 0, cr0, cr0, cr8, {0}
    19bc:	14000003 	strne	r0, [r0], #-3
    19c0:	30015101 	andcc	r5, r1, r1, lsl #2
    19c4:	01500114 	cmpeq	r0, r4, lsl r1
    19c8:	f6130034 			; <UNDEFINED> instruction: 0xf6130034
    19cc:	31080006 	tstcc	r8, r6
    19d0:	b6000008 	strlt	r0, [r0], -r8
    19d4:	14000003 	strne	r0, [r0], #-3
    19d8:	31015101 	tstcc	r1, r1, lsl #2
    19dc:	01500114 	cmpeq	r0, r4, lsl r1
    19e0:	02150038 	andseq	r0, r5, #56	; 0x38
    19e4:	31080007 	tstcc	r8, r7
    19e8:	ce000008 	cdpgt	0, 0, cr0, cr0, cr8, {0}
    19ec:	14000003 	strne	r0, [r0], #-3
    19f0:	30015101 	andcc	r5, r1, r1, lsl #2
    19f4:	01500114 	cmpeq	r0, r4, lsl r1
    19f8:	0a130038 	beq	4c1ae0 <_Min_Stack_Size+0x4c16e0>
    19fc:	31080007 	tstcc	r8, r7
    1a00:	e6000008 	str	r0, [r0], -r8
    1a04:	14000003 	strne	r0, [r0], #-3
    1a08:	31015101 	tstcc	r1, r1, lsl #2
    1a0c:	01500114 	cmpeq	r0, r4, lsl r1
    1a10:	16150040 	ldrne	r0, [r5], -r0, asr #32
    1a14:	31080007 	tstcc	r8, r7
    1a18:	fe000008 	cdp2	0, 0, cr0, cr0, cr8, {0}
    1a1c:	14000003 	strne	r0, [r0], #-3
    1a20:	30015101 	andcc	r5, r1, r1, lsl #2
    1a24:	01500114 	cmpeq	r0, r4, lsl r1
    1a28:	1e130040 	cdpne	0, 1, cr0, cr3, cr0, {2}
    1a2c:	31080007 	tstcc	r8, r7
    1a30:	17000008 	strne	r0, [r0, -r8]
    1a34:	14000004 	strne	r0, [r0], #-4
    1a38:	31015101 	tstcc	r1, r1, lsl #2
    1a3c:	02500114 	subseq	r0, r0, #20, 2
    1a40:	15002008 	strne	r2, [r0, #-8]
    1a44:	0800072a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl}
    1a48:	00000831 	andeq	r0, r0, r1, lsr r8
    1a4c:	00000430 	andeq	r0, r0, r0, lsr r4
    1a50:	01510114 	cmpeq	r1, r4, lsl r1
    1a54:	50011430 	andpl	r1, r1, r0, lsr r4
    1a58:	00200802 	eoreq	r0, r0, r2, lsl #16
    1a5c:	00073213 	andeq	r3, r7, r3, lsl r2
    1a60:	00083108 	andeq	r3, r8, r8, lsl #2
    1a64:	00044900 	andeq	r4, r4, r0, lsl #18
    1a68:	51011400 	tstpl	r1, r0, lsl #8
    1a6c:	01143101 	tsteq	r4, r1, lsl #2
    1a70:	40080250 	andmi	r0, r8, r0, asr r2
    1a74:	073e1500 	ldreq	r1, [lr, -r0, lsl #10]!
    1a78:	08310800 	ldmdaeq	r1!, {fp}
    1a7c:	04620000 	strbteq	r0, [r2], #-0
    1a80:	01140000 	tsteq	r4, r0
    1a84:	14300151 	ldrtne	r0, [r0], #-337	; 0x151
    1a88:	08025001 	stmdaeq	r2, {r0, ip, lr}
    1a8c:	46130040 	ldrmi	r0, [r3], -r0, asr #32
    1a90:	31080007 	tstcc	r8, r7
    1a94:	7b000008 	blvc	1abc <_Min_Stack_Size+0x16bc>
    1a98:	14000004 	strne	r0, [r0], #-4
    1a9c:	31015101 	tstcc	r1, r1, lsl #2
    1aa0:	02500114 	subseq	r0, r0, #20, 2
    1aa4:	15008008 	strne	r8, [r0, #-8]
    1aa8:	08000752 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl}
    1aac:	00000831 	andeq	r0, r0, r1, lsr r8
    1ab0:	00000494 	muleq	r0, r4, r4
    1ab4:	01510114 	cmpeq	r1, r4, lsl r1
    1ab8:	50011430 	andpl	r1, r1, r0, lsr r4
    1abc:	00800802 	addeq	r0, r0, r2, lsl #16
    1ac0:	00075c13 	andeq	r5, r7, r3, lsl ip
    1ac4:	00083108 	andeq	r3, r8, r8, lsl #2
    1ac8:	0004ae00 	andeq	sl, r4, r0, lsl #28
    1acc:	51011400 	tstpl	r1, r0, lsl #8
    1ad0:	01143101 	tsteq	r4, r1, lsl #2
    1ad4:	000a0350 	andeq	r0, sl, r0, asr r3
    1ad8:	6a150001 	bvs	541ae4 <_Min_Stack_Size+0x5416e4>
    1adc:	31080007 	tstcc	r8, r7
    1ae0:	c8000008 	stmdagt	r0, {r3}
    1ae4:	14000004 	strne	r0, [r0], #-4
    1ae8:	30015101 	andcc	r5, r1, r1, lsl #2
    1aec:	03500114 	cmpeq	r0, #20, 2
    1af0:	0001000a 	andeq	r0, r1, sl
    1af4:	00077413 	andeq	r7, r7, r3, lsl r4
    1af8:	00083108 	andeq	r3, r8, r8, lsl #2
    1afc:	0004e200 	andeq	lr, r4, r0, lsl #4
    1b00:	51011400 	tstpl	r1, r0, lsl #8
    1b04:	01143101 	tsteq	r4, r1, lsl #2
    1b08:	000a0350 	andeq	r0, sl, r0, asr r3
    1b0c:	82160002 	andshi	r0, r6, #2
    1b10:	31080007 	tstcc	r8, r7
    1b14:	14000008 	strne	r0, [r0], #-8
    1b18:	30015101 	andcc	r5, r1, r1, lsl #2
    1b1c:	03500114 	cmpeq	r0, #20, 2
    1b20:	0002000a 	andeq	r0, r2, sl
    1b24:	9c041700 	stcls	7, cr1, [r4], {-0}
    1b28:	11000001 	tstne	r0, r1
    1b2c:	00000106 	andeq	r0, r0, r6, lsl #2
    1b30:	07b0ca01 	ldreq	ip, [r0, r1, lsl #20]!
    1b34:	00bc0800 	adcseq	r0, ip, r0, lsl #16
    1b38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b3c:	0000055c 	andeq	r0, r0, ip, asr r5
    1b40:	00166c18 	andseq	r6, r6, r8, lsl ip
    1b44:	f9ca0100 			; <UNDEFINED> instruction: 0xf9ca0100
    1b48:	01000004 	tsteq	r0, r4
    1b4c:	0a731850 	beq	1cc7c94 <_Min_Stack_Size+0x1cc7894>
    1b50:	ca010000 	bgt	41b58 <_Min_Stack_Size+0x41758>
    1b54:	0000055c 	andeq	r0, r0, ip, asr r5
    1b58:	b5195101 	ldrlt	r5, [r9, #-257]	; 0x101
    1b5c:	01000009 	tsteq	r0, r9
    1b60:	0000b8cc 	andeq	fp, r0, ip, asr #17
    1b64:	00049600 	andeq	r9, r4, r0, lsl #12
    1b68:	6f701a00 	svcvs	0x00701a00
    1b6c:	cc010073 	stcgt	0, cr0, [r1], {115}	; 0x73
    1b70:	000000b8 	strheq	r0, [r0], -r8
    1b74:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    1b78:	000aca19 	andeq	ip, sl, r9, lsl sl
    1b7c:	b8cc0100 	stmialt	ip, {r8}^
    1b80:	0f000000 	svceq	0x00000000
    1b84:	00000005 	andeq	r0, r0, r5
    1b88:	02ab0417 	adceq	r0, fp, #385875968	; 0x17000000
    1b8c:	e5110000 	ldr	r0, [r1, #-0]
    1b90:	01000009 	tsteq	r0, r9
    1b94:	00086cfe 	strdeq	r6, [r8], -lr
    1b98:	00001208 	andeq	r1, r0, r8, lsl #4
    1b9c:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    1ba0:	18000005 	stmdane	r0, {r0, r2}
    1ba4:	00000a73 	andeq	r0, r0, r3, ror sl
    1ba8:	055cfe01 	ldrbeq	pc, [ip, #-3585]	; 0xe01	; <UNPREDICTABLE>
    1bac:	50010000 	andpl	r0, r1, r0
    1bb0:	0aad1b00 	beq	feb487b8 <_estack+0xdeb187b8>
    1bb4:	15010000 	strne	r0, [r1, #-0]
    1bb8:	00088001 	andeq	r8, r8, r1
    1bbc:	00002408 	andeq	r2, r0, r8, lsl #8
    1bc0:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    1bc4:	1c000005 	stcne	0, cr0, [r0], {5}
    1bc8:	0000166c 	andeq	r1, r0, ip, ror #12
    1bcc:	f9011501 			; <UNDEFINED> instruction: 0xf9011501
    1bd0:	01000004 	tsteq	r0, r4
    1bd4:	02651c50 	rsbeq	r1, r5, #80, 24	; 0x5000
    1bd8:	15010000 	strne	r0, [r1, #-0]
    1bdc:	0000a201 	andeq	sl, r0, r1, lsl #4
    1be0:	1d510100 	ldfnee	f0, [r1, #-0]
    1be4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1be8:	ca011701 	bgt	477f4 <_Min_Stack_Size+0x473f4>
    1bec:	02000000 	andeq	r0, r0, #0
    1bf0:	1e007c91 	mcrne	12, 0, r7, cr0, cr1, {4}
    1bf4:	00000a3c 	andeq	r0, r0, ip, lsr sl
    1bf8:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1bfc:	a4000000 	strge	r0, [r0], #-0
    1c00:	0c080008 	stceq	0, cr0, [r8], {8}
    1c04:	01000000 	mrseq	r0, (UNDEF: 0)
    1c08:	0006109c 	muleq	r6, ip, r0
    1c0c:	166c1f00 	strbtne	r1, [ip], -r0, lsl #30
    1c10:	43010000 	movwmi	r0, #4096	; 0x1000
    1c14:	0004f901 	andeq	pc, r4, r1, lsl #18
    1c18:	00057d00 	andeq	r7, r5, r0, lsl #26
    1c1c:	02651c00 	rsbeq	r1, r5, #0, 24
    1c20:	43010000 	movwmi	r0, #4096	; 0x1000
    1c24:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c28:	20510100 	subscs	r0, r1, r0, lsl #2
    1c2c:	00000a52 	andeq	r0, r0, r2, asr sl
    1c30:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1c34:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    1c38:	00000005 	andeq	r0, r0, r5
    1c3c:	000a9a1e 	andeq	r9, sl, lr, lsl sl
    1c40:	015d0100 	cmpeq	sp, r0, lsl #2
    1c44:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c48:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
    1c4c:	00000006 	andeq	r0, r0, r6
    1c50:	063b9c01 	ldrteq	r9, [fp], -r1, lsl #24
    1c54:	6c1f0000 	ldcvs	0, cr0, [pc], {-0}
    1c58:	01000016 	tsteq	r0, r6, lsl r0
    1c5c:	04f9015d 	ldrbteq	r0, [r9], #349	; 0x15d
    1c60:	05c80000 	strbeq	r0, [r8]
    1c64:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1c68:	00000b53 	andeq	r0, r0, r3, asr fp
    1c6c:	97016e01 	strls	r6, [r1, -r1, lsl #28]
    1c70:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1c74:	0c080008 	stceq	0, cr0, [r8], {8}
    1c78:	01000000 	mrseq	r0, (UNDEF: 0)
    1c7c:	0006849c 	muleq	r6, ip, r4
    1c80:	166c1f00 	strbtne	r1, [ip], -r0, lsl #30
    1c84:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1c88:	0004f901 	andeq	pc, r4, r1, lsl #18
    1c8c:	0005e900 	andeq	lr, r5, r0, lsl #18
    1c90:	02651c00 	rsbeq	r1, r5, #0, 24
    1c94:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1c98:	0000a201 	andeq	sl, r0, r1, lsl #4
    1c9c:	20510100 	subscs	r0, r1, r0, lsl #2
    1ca0:	00000a52 	andeq	r0, r0, r2, asr sl
    1ca4:	97017001 	strls	r7, [r1, -r1]
    1ca8:	0a000000 	beq	1cb0 <_Min_Stack_Size+0x18b0>
    1cac:	00000006 	andeq	r0, r0, r6
    1cb0:	0009c41e 	andeq	ip, r9, lr, lsl r4
    1cb4:	01880100 	orreq	r0, r8, r0, lsl #2
    1cb8:	000000a2 	andeq	r0, r0, r2, lsr #1
    1cbc:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
    1cc0:	00000006 	andeq	r0, r0, r6
    1cc4:	06af9c01 	strteq	r9, [pc], r1, lsl #24
    1cc8:	6c1f0000 	ldcvs	0, cr0, [pc], {-0}
    1ccc:	01000016 	tsteq	r0, r6, lsl r0
    1cd0:	04f90188 	ldrbteq	r0, [r9], #392	; 0x188
    1cd4:	06340000 	ldrteq	r0, [r4], -r0
    1cd8:	1b000000 	blne	1ce0 <_Min_Stack_Size+0x18e0>
    1cdc:	00000a14 	andeq	r0, r0, r4, lsl sl
    1ce0:	cc019c01 	stcgt	12, cr9, [r1], {1}
    1ce4:	04080008 	streq	r0, [r8], #-8
    1ce8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cec:	0006e29c 	muleq	r6, ip, r2
    1cf0:	166c1c00 	strbtne	r1, [ip], -r0, lsl #24
    1cf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cf8:	0004f901 	andeq	pc, r4, r1, lsl #18
    1cfc:	1c500100 	ldfnee	f0, [r0], {-0}
    1d00:	00000265 	andeq	r0, r0, r5, ror #4
    1d04:	a2019c01 	andge	r9, r1, #256	; 0x100
    1d08:	01000000 	mrseq	r0, (UNDEF: 0)
    1d0c:	211b0051 	tstcs	fp, r1, asr r0
    1d10:	0100000a 	tsteq	r0, sl
    1d14:	08d001b1 	ldmeq	r0, {r0, r4, r5, r7, r8}^
    1d18:	00040800 	andeq	r0, r4, r0, lsl #16
    1d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d20:	00000715 	andeq	r0, r0, r5, lsl r7
    1d24:	00166c1c 	andseq	r6, r6, ip, lsl ip
    1d28:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1d2c:	000004f9 	strdeq	r0, [r0], -r9
    1d30:	651c5001 	ldrvs	r5, [ip, #-1]
    1d34:	01000002 	tsteq	r0, r2
    1d38:	00a201b1 			; <UNDEFINED> instruction: 0x00a201b1
    1d3c:	51010000 	mrspl	r0, (UNDEF: 1)
    1d40:	0a061b00 	beq	188948 <_Min_Stack_Size+0x188548>
    1d44:	c7010000 	strgt	r0, [r1, -r0]
    1d48:	0008d401 	andeq	sp, r8, r1, lsl #8
    1d4c:	00000a08 	andeq	r0, r0, r8, lsl #20
    1d50:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    1d54:	1c000007 	stcne	0, cr0, [r0], {7}
    1d58:	0000166c 	andeq	r1, r0, ip, ror #12
    1d5c:	f901c701 			; <UNDEFINED> instruction: 0xf901c701
    1d60:	01000004 	tsteq	r0, r4
    1d64:	02651c50 	rsbeq	r1, r5, #80, 24	; 0x5000
    1d68:	c7010000 	strgt	r0, [r1, -r0]
    1d6c:	0000a201 	andeq	sl, r0, r1, lsl #4
    1d70:	1c510100 	ldfnee	f0, [r1], {-0}
    1d74:	000009f5 	strdeq	r0, [r0], -r5
    1d78:	5b01c701 	blpl	73984 <_Min_Stack_Size+0x73584>
    1d7c:	01000002 	tsteq	r0, r2
    1d80:	d51b0052 	ldrle	r0, [fp, #-82]	; 0x52
    1d84:	0100000a 	tsteq	r0, sl
    1d88:	08e001e0 	stmiaeq	r0!, {r5, r6, r7, r8}^
    1d8c:	00040800 	andeq	r0, r4, r0, lsl #16
    1d90:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d94:	00000789 	andeq	r0, r0, r9, lsl #15
    1d98:	00166c1c 	andseq	r6, r6, ip, lsl ip
    1d9c:	01e00100 	mvneq	r0, r0, lsl #2
    1da0:	000004f9 	strdeq	r0, [r0], -r9
    1da4:	831c5001 	tsthi	ip, #1
    1da8:	0100000a 	tsteq	r0, sl
    1dac:	00a201e0 	adceq	r0, r2, r0, ror #3
    1db0:	51010000 	mrspl	r0, (UNDEF: 1)
    1db4:	0b3c1b00 	bleq	f089bc <_Min_Stack_Size+0xf085bc>
    1db8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1dbc:	0008e401 	andeq	lr, r8, r1, lsl #8
    1dc0:	00000808 	andeq	r0, r0, r8, lsl #16
    1dc4:	be9c0100 	fmllte	f0, f4, f0
    1dc8:	1c000007 	stcne	0, cr0, [r0], {7}
    1dcc:	0000166c 	andeq	r1, r0, ip, ror #12
    1dd0:	f901f001 			; <UNDEFINED> instruction: 0xf901f001
    1dd4:	01000004 	tsteq	r0, r4
    1dd8:	02651f50 	rsbeq	r1, r5, #80, 30	; 0x140
    1ddc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1de0:	0000a201 	andeq	sl, r0, r1, lsl #4
    1de4:	00065500 	andeq	r5, r6, r0, lsl #10
    1de8:	101b0000 	andsne	r0, fp, r0
    1dec:	01000005 	tsteq	r0, r5
    1df0:	08ec0243 	stmiaeq	ip!, {r0, r1, r6, r9}^
    1df4:	00280800 	eoreq	r0, r8, r0, lsl #16
    1df8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1dfc:	00000825 	andeq	r0, r0, r5, lsr #16
    1e00:	00166c1f 	andseq	r6, r6, pc, lsl ip
    1e04:	02430100 	subeq	r0, r3, #0, 2
    1e08:	000004f9 	strdeq	r0, [r0], -r9
    1e0c:	00000676 	andeq	r0, r0, r6, ror r6
    1e10:	000a8b1f 	andeq	r8, sl, pc, lsl fp
    1e14:	02430100 	subeq	r0, r3, #0, 2
    1e18:	000000a2 	andeq	r0, r0, r2, lsr #1
    1e1c:	00000697 	muleq	r0, r7, r6
    1e20:	0009d81f 	andeq	sp, r9, pc, lsl r8
    1e24:	02430100 	subeq	r0, r3, #0, 2
    1e28:	00000097 	muleq	r0, r7, r0
    1e2c:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
    1e30:	0009e020 	andeq	lr, r9, r0, lsr #32
    1e34:	02450100 	subeq	r0, r5, #0, 2
    1e38:	000000b8 	strheq	r0, [r0], -r8
    1e3c:	000006d9 	ldrdeq	r0, [r0], -r9
    1e40:	000b4c20 	andeq	r4, fp, r0, lsr #24
    1e44:	02460100 	subeq	r0, r6, #0, 2
    1e48:	000000b8 	strheq	r0, [r0], -r8
    1e4c:	00000714 	andeq	r0, r0, r4, lsl r7
    1e50:	04a52100 	strteq	r2, [r5], #256	; 0x100
    1e54:	a7060000 	strge	r0, [r6, -r0]
    1e58:	0000e406 	andeq	lr, r0, r6, lsl #8
    1e5c:	0a5c2200 	beq	170a664 <_Min_Stack_Size+0x170a264>
    1e60:	46070000 	strmi	r0, [r7], -r0
    1e64:	00b82302 	adcseq	r2, r8, r2, lsl #6
    1e68:	ff230000 			; <UNDEFINED> instruction: 0xff230000
    1e6c:	00000000 	andeq	r0, r0, r0
    1e70:	000ece00 	andeq	ip, lr, r0, lsl #28
    1e74:	a6000400 	strge	r0, [r0], -r0, lsl #8
    1e78:	04000007 	streq	r0, [r0], #-7
    1e7c:	00015601 	andeq	r5, r1, r1, lsl #12
    1e80:	0bb10100 	bleq	fec42288 <_estack+0xdec12288>
    1e84:	00210000 	eoreq	r0, r1, r0
    1e88:	01b00000 	movseq	r0, r0
    1e8c:	00000000 	andeq	r0, r0, r0
    1e90:	0d9a0000 	ldceq	0, cr0, [sl]
    1e94:	01020000 	mrseq	r0, (UNDEF: 2)
    1e98:	00031606 	andeq	r1, r3, r6, lsl #12
    1e9c:	02da0300 	sbcseq	r0, sl, #0, 6
    1ea0:	1c020000 	stcne	0, cr0, [r2], {-0}
    1ea4:	00000037 	andeq	r0, r0, r7, lsr r0
    1ea8:	14080102 	strne	r0, [r8], #-258	; 0x102
    1eac:	02000003 	andeq	r0, r0, #3
    1eb0:	00c10502 	sbceq	r0, r1, r2, lsl #10
    1eb4:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    1eb8:	02000000 	andeq	r0, r0, #0
    1ebc:	00005026 	andeq	r5, r0, r6, lsr #32
    1ec0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1ec4:	0000037f 	andeq	r0, r0, pc, ror r3
    1ec8:	0003fb03 	andeq	pc, r3, r3, lsl #22
    1ecc:	62370200 	eorsvs	r0, r7, #0, 4
    1ed0:	02000000 	andeq	r0, r0, #0
    1ed4:	027b0504 	rsbseq	r0, fp, #4, 10	; 0x1000000
    1ed8:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    1edc:	02000000 	andeq	r0, r0, #0
    1ee0:	00007438 	andeq	r7, r0, r8, lsr r4
    1ee4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1ee8:	00000289 	andeq	r0, r0, r9, lsl #5
    1eec:	76050802 	strvc	r0, [r5], -r2, lsl #16
    1ef0:	02000002 	andeq	r0, r0, #2
    1ef4:	02840708 	addeq	r0, r4, #8, 14	; 0x200000
    1ef8:	04040000 	streq	r0, [r4], #-0
    1efc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    1f00:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1f04:	0000028e 	andeq	r0, r0, lr, lsl #5
    1f08:	0002dc03 	andeq	sp, r2, r3, lsl #24
    1f0c:	2c2a0300 	stccs	3, cr0, [sl], #-0
    1f10:	03000000 	movweq	r0, #0
    1f14:	0000009b 	muleq	r0, fp, r0
    1f18:	00453603 	subeq	r3, r5, r3, lsl #12
    1f1c:	fd030000 	stc2	0, cr0, [r3, #-0]
    1f20:	03000003 	movweq	r0, #3
    1f24:	00005741 	andeq	r5, r0, r1, asr #14
    1f28:	00900300 	addseq	r0, r0, r0, lsl #6
    1f2c:	42030000 	andmi	r0, r3, #0
    1f30:	00000069 	andeq	r0, r0, r9, rrx
    1f34:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    1f38:	05000000 	streq	r0, [r0, #-0]
    1f3c:	000000b8 	strheq	r0, [r0], -r8
    1f40:	0000b806 	andeq	fp, r0, r6, lsl #16
    1f44:	0000df00 	andeq	sp, r0, r0, lsl #30
    1f48:	00c30700 	sbceq	r0, r3, r0, lsl #14
    1f4c:	00010000 	andeq	r0, r1, r0
    1f50:	0000ad05 	andeq	sl, r0, r5, lsl #26
    1f54:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1f58:	00fa01f7 	ldrshteq	r0, [sl], #23
    1f5c:	00090000 	andeq	r0, r9, r0
    1f60:	0000000a 	andeq	r0, r0, sl
    1f64:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    1f68:	0b000100 	bleq	2370 <_Min_Stack_Size+0x1f70>
    1f6c:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    1f70:	e401f704 	str	pc, [r1], #-1796	; 0x704
    1f74:	0b000000 	bleq	1f7c <_Min_Stack_Size+0x1b7c>
    1f78:	000010dd 	ldrdeq	r1, [r0], -sp
    1f7c:	e401f704 	str	pc, [r1], #-1796	; 0x704
    1f80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f84:	01f90401 	mvnseq	r0, r1, lsl #8
    1f88:	00000128 	andeq	r0, r0, r8, lsr #2
    1f8c:	0003f309 	andeq	pc, r3, r9, lsl #6
    1f90:	05090000 	streq	r0, [r9, #-0]
    1f94:	01000004 	tsteq	r0, r4
    1f98:	05280b00 	streq	r0, [r8, #-2816]!	; 0xb00
    1f9c:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    1fa0:	00011201 	andeq	r1, r1, r1, lsl #4
    1fa4:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1fa8:	014a01fc 	strdeq	r0, [sl, #-28]	; 0xffffffe4
    1fac:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1fb0:	0000000f 	andeq	r0, r0, pc
    1fb4:	00118509 	andseq	r8, r1, r9, lsl #10
    1fb8:	0b000100 	bleq	23c0 <_Min_Stack_Size+0x1fc0>
    1fbc:	00000d89 	andeq	r0, r0, r9, lsl #27
    1fc0:	3401fc04 	strcc	pc, [r1], #-3076	; 0xc04
    1fc4:	0c000001 	stceq	0, cr0, [r0], {1}
    1fc8:	04550490 	ldrbeq	r0, [r5], #-1168	; 0x490
    1fcc:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1fd0:	0052430d 	subseq	r4, r2, sp, lsl #6
    1fd4:	ca045704 	bgt	117bec <_Min_Stack_Size+0x1177ec>
    1fd8:	00000000 	andeq	r0, r0, r0
    1fdc:	0006d40e 	andeq	sp, r6, lr, lsl #8
    1fe0:	04580400 	ldrbeq	r0, [r8], #-1024	; 0x400
    1fe4:	000000ca 	andeq	r0, r0, sl, asr #1
    1fe8:	07ad0e04 	streq	r0, [sp, r4, lsl #28]!
    1fec:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
    1ff0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1ff4:	430d0800 	movwmi	r0, #55296	; 0xd800
    1ff8:	04005249 	streq	r5, [r0], #-585	; 0x249
    1ffc:	00ca045a 	sbceq	r0, sl, sl, asr r4
    2000:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    2004:	00000653 	andeq	r0, r0, r3, asr r6
    2008:	ca045b04 	bgt	118c20 <_Min_Stack_Size+0x118820>
    200c:	10000000 	andne	r0, r0, r0
    2010:	0006180e 	andeq	r1, r6, lr, lsl #16
    2014:	045c0400 	ldrbeq	r0, [ip], #-1024	; 0x400
    2018:	000000ca 	andeq	r0, r0, sl, asr #1
    201c:	07900e14 			; <UNDEFINED> instruction: 0x07900e14
    2020:	5d040000 	stcpl	0, cr0, [r4, #-0]
    2024:	0000ca04 	andeq	ip, r0, r4, lsl #20
    2028:	320e1800 	andcc	r1, lr, #0, 16
    202c:	04000004 	streq	r0, [r0], #-4
    2030:	00b8045e 	adcseq	r0, r8, lr, asr r4
    2034:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    2038:	00000607 	andeq	r0, r0, r7, lsl #12
    203c:	ca045f04 	bgt	119c54 <_Min_Stack_Size+0x119854>
    2040:	20000000 	andcs	r0, r0, r0
    2044:	00069d0e 	andeq	r9, r6, lr, lsl #26
    2048:	04600400 	strbteq	r0, [r0], #-1024	; 0x400
    204c:	000000ca 	andeq	r0, r0, sl, asr #1
    2050:	043c0e24 	ldrteq	r0, [ip], #-3620	; 0xe24
    2054:	61040000 	mrsvs	r0, (UNDEF: 4)
    2058:	0000cf04 	andeq	ip, r0, r4, lsl #30
    205c:	700e2800 	andvc	r2, lr, r0, lsl #16
    2060:	04000007 	streq	r0, [r0], #-7
    2064:	00ca0462 	sbceq	r0, sl, r2, ror #8
    2068:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    206c:	00000610 	andeq	r0, r0, r0, lsl r6
    2070:	ca046304 	bgt	11ac88 <_Min_Stack_Size+0x11a888>
    2074:	34000000 	strcc	r0, [r0], #-0
    2078:	0006bc0e 	andeq	fp, r6, lr, lsl #24
    207c:	04640400 	strbteq	r0, [r4], #-1024	; 0x400
    2080:	000000ca 	andeq	r0, r0, sl, asr #1
    2084:	04460e38 	strbeq	r0, [r6], #-3640	; 0xe38
    2088:	65040000 	strvs	r0, [r4, #-0]
    208c:	0000b804 	andeq	fp, r0, r4, lsl #16
    2090:	6f0e3c00 	svcvs	0x000e3c00
    2094:	04000006 	streq	r0, [r0], #-6
    2098:	00ca0466 	sbceq	r0, sl, r6, ror #8
    209c:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    20a0:	000006dc 	ldrdeq	r0, [r0], -ip
    20a4:	ca046704 	bgt	11bcbc <_Min_Stack_Size+0x11b8bc>
    20a8:	44000000 	strmi	r0, [r0], #-0
    20ac:	0004500e 	andeq	r5, r4, lr
    20b0:	04680400 	strbteq	r0, [r8], #-1024	; 0x400
    20b4:	000000cf 	andeq	r0, r0, pc, asr #1
    20b8:	05fd0e48 	ldrbeq	r0, [sp, #3656]!	; 0xe48
    20bc:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    20c0:	0000ca04 	andeq	ip, r0, r4, lsl #20
    20c4:	550e5000 	strpl	r5, [lr, #-0]
    20c8:	04000007 	streq	r0, [r0], #-7
    20cc:	00ca046a 	sbceq	r0, sl, sl, ror #8
    20d0:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    20d4:	0000065c 	andeq	r0, r0, ip, asr r6
    20d8:	ca046b04 	bgt	11ccf0 <_Min_Stack_Size+0x11c8f0>
    20dc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    20e0:	00045a0e 	andeq	r5, r4, lr, lsl #20
    20e4:	046c0400 	strbteq	r0, [ip], #-1024	; 0x400
    20e8:	000000b8 	strheq	r0, [r0], -r8
    20ec:	07200e5c 			; <UNDEFINED> instruction: 0x07200e5c
    20f0:	6d040000 	stcvs	0, cr0, [r4, #-0]
    20f4:	0000ca04 	andeq	ip, r0, r4, lsl #20
    20f8:	b80e6000 	stmdalt	lr, {sp, lr}
    20fc:	04000007 	streq	r0, [r0], #-7
    2100:	00ca046e 	sbceq	r0, sl, lr, ror #8
    2104:	0e640000 	cdpeq	0, 6, cr0, cr4, cr0, {0}
    2108:	00000464 	andeq	r0, r0, r4, ror #8
    210c:	cf046f04 	svcgt	0x00046f04
    2110:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2114:	0006210e 	andeq	r2, r6, lr, lsl #2
    2118:	04700400 	ldrbteq	r0, [r0], #-1024	; 0x400
    211c:	000000ca 	andeq	r0, r0, sl, asr #1
    2120:	53430d70 	movtpl	r0, #15728	; 0x3d70
    2124:	71040052 	qaddvc	r0, r2, r4
    2128:	0000ca04 	andeq	ip, r0, r4, lsl #20
    212c:	6e0e7400 	cfcpysvs	mvf7, mvf14
    2130:	04000004 	streq	r0, [r0], #-4
    2134:	00cf0472 	sbceq	r0, pc, r2, ror r4	; <UNPREDICTABLE>
    2138:	0e780000 	cdpeq	0, 7, cr0, cr8, cr0, {0}
    213c:	0000063d 	andeq	r0, r0, sp, lsr r6
    2140:	ca047304 	bgt	11ed58 <_Min_Stack_Size+0x11e958>
    2144:	80000000 	andhi	r0, r0, r0
    2148:	0006260e 	andeq	r2, r6, lr, lsl #12
    214c:	04740400 	ldrbteq	r0, [r4], #-1024	; 0x400
    2150:	000000ca 	andeq	r0, r0, sl, asr #1
    2154:	07a70e84 	streq	r0, [r7, r4, lsl #29]!
    2158:	75040000 	strvc	r0, [r4, #-0]
    215c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    2160:	770e8800 	strvc	r8, [lr, -r0, lsl #16]
    2164:	04000006 	streq	r0, [r0], #-6
    2168:	00ca0476 	sbceq	r0, sl, r6, ror r4
    216c:	008c0000 	addeq	r0, ip, r0
    2170:	0006910b 	andeq	r9, r6, fp, lsl #2
    2174:	04780400 	ldrbteq	r0, [r8], #-1024	; 0x400
    2178:	00000156 	andeq	r0, r0, r6, asr r1
    217c:	3005100f 	andcc	r1, r5, pc
    2180:	00000344 	andeq	r0, r0, r4, asr #6
    2184:	000c0c10 	andeq	r0, ip, r0, lsl ip
    2188:	b8320500 	ldmdalt	r2!, {r8, sl}
    218c:	00000000 	andeq	r0, r0, r0
    2190:	000dcd10 	andeq	ip, sp, r0, lsl sp
    2194:	b8330500 	ldmdalt	r3!, {r8, sl}
    2198:	04000000 	streq	r0, [r0], #-0
    219c:	00105810 	andseq	r5, r0, r0, lsl r8
    21a0:	b8340500 	ldmdalt	r4!, {r8, sl}
    21a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    21a8:	000cda10 	andeq	sp, ip, r0, lsl sl
    21ac:	b8350500 	ldmdalt	r5!, {r8, sl}
    21b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    21b4:	119b0300 	orrsne	r0, fp, r0, lsl #6
    21b8:	36050000 	strcc	r0, [r5], -r0
    21bc:	0000030b 	andeq	r0, r0, fp, lsl #6
    21c0:	000f8d11 	andeq	r8, pc, r1, lsl sp	; <UNPREDICTABLE>
    21c4:	082c0100 	stmdaeq	ip!, {r8}
    21c8:	000000fa 	strdeq	r0, [r0], -sl
    21cc:	00039101 	andeq	r9, r3, r1, lsl #2
    21d0:	0d6d1200 	sfmeq	f1, 2, [sp, #-0]
    21d4:	2c010000 	stccs	0, cr0, [r1], {-0}
    21d8:	00009708 	andeq	r9, r0, r8, lsl #14
    21dc:	6d741300 	ldclvs	3, cr1, [r4, #-0]
    21e0:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
    21e4:	0000b808 	andeq	fp, r0, r8, lsl #16
    21e8:	0ba71400 	bleq	fe9c71f0 <_estack+0xde9971f0>
    21ec:	2f010000 	svccs	0x00010000
    21f0:	0000b808 	andeq	fp, r0, r8, lsl #16
    21f4:	0a521400 	beq	14871fc <_Min_Stack_Size+0x1486dfc>
    21f8:	30010000 	andcc	r0, r1, r0
    21fc:	0000fa08 	andeq	pc, r0, r8, lsl #20
    2200:	bb150000 	bllt	542208 <_Min_Stack_Size+0x541e08>
    2204:	01000010 	tsteq	r0, r0, lsl r0
    2208:	000914d5 	ldrdeq	r1, [r9], -r5
    220c:	00005008 	andeq	r5, r0, r8
    2210:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2214:	00000f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    2218:	64010801 	strvs	r0, [r1], #-2049	; 0x801
    221c:	10080009 	andne	r0, r8, r9
    2220:	01000000 	mrseq	r0, (UNDEF: 0)
    2224:	0003c79c 	muleq	r3, ip, r7
    2228:	10501700 	subsne	r1, r0, r0, lsl #14
    222c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2230:	00009701 	andeq	r9, r0, r1, lsl #14
    2234:	00500100 	subseq	r0, r0, r0, lsl #2
    2238:	000db718 	andeq	fp, sp, r8, lsl r7
    223c:	01200100 	teqeq	r0, r0, lsl #2
    2240:	0000014a 	andeq	r0, r0, sl, asr #2
    2244:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
    2248:	00000038 	andeq	r0, r0, r8, lsr r0
    224c:	04889c01 	streq	r9, [r8], #3073	; 0xc01
    2250:	03190000 	tsteq	r9, #0
    2254:	01000011 	tsteq	r0, r1, lsl r0
    2258:	00ca0122 	sbceq	r0, sl, r2, lsr #2
    225c:	91020000 	mrsls	r0, (UNDEF: 2)
    2260:	109a1a7c 	addsne	r1, sl, ip, ror sl
    2264:	23010000 	movwcs	r0, #4096	; 0x1000
    2268:	00014a01 	andeq	r4, r1, r1, lsl #20
    226c:	00073300 	andeq	r3, r7, r0, lsl #6
    2270:	10971400 	addsne	r1, r7, r0, lsl #8
    2274:	24010000 	strcs	r0, [r1], #-0
    2278:	0000fa01 	andeq	pc, r0, r1, lsl #20
    227c:	034f1b00 	movteq	r1, #64256	; 0xfb00
    2280:	09780000 	ldmdbeq	r8!, {}^	; <UNPREDICTABLE>
    2284:	01980800 	orrseq	r0, r8, r0, lsl #16
    2288:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    228c:	00044801 	andeq	r4, r4, r1, lsl #16
    2290:	03601c00 	cmneq	r0, #0, 24
    2294:	1d310000 	ldcne	0, cr0, [r1, #-0]
    2298:	00000198 	muleq	r0, r8, r1
    229c:	00036c1e 	andeq	r6, r3, lr, lsl ip
    22a0:	00076400 	andeq	r6, r7, r0, lsl #8
    22a4:	03781e00 	cmneq	r8, #0, 28
    22a8:	07840000 	streq	r0, [r4, r0]
    22ac:	841e0000 	ldrhi	r0, [lr], #-0
    22b0:	a3000003 	movwge	r0, #3
    22b4:	00000007 	andeq	r0, r0, r7
    22b8:	034f1f00 	movteq	r1, #65280	; 0xff00
    22bc:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    22c0:	00040800 	andeq	r0, r4, r0, lsl #16
    22c4:	2c010000 	stccs	0, cr0, [r1], {-0}
    22c8:	03602001 	cmneq	r0, #1
    22cc:	07c30000 	strbeq	r0, [r3, r0]
    22d0:	90210000 	eorls	r0, r1, r0
    22d4:	04080009 	streq	r0, [r8], #-9
    22d8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    22dc:	0000036c 	andeq	r0, r0, ip, ror #6
    22e0:	000007d8 	ldrdeq	r0, [r0], -r8
    22e4:	0003781e 	andeq	r7, r3, lr, lsl r8
    22e8:	0007f800 	andeq	pc, r7, r0, lsl #16
    22ec:	03841e00 	orreq	r1, r4, #0, 28
    22f0:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    22f4:	00000000 	andeq	r0, r0, r0
    22f8:	10791600 	rsbsne	r1, r9, r0, lsl #12
    22fc:	3f010000 	svccc	0x00010000
    2300:	0009ac01 	andeq	sl, r9, r1, lsl #24
    2304:	00001408 	andeq	r1, r0, r8, lsl #8
    2308:	bf9c0100 	svclt	0x009c0100
    230c:	22000004 	andcs	r0, r0, #4
    2310:	00001083 	andeq	r1, r0, r3, lsl #1
    2314:	97013f01 	strls	r3, [r1, -r1, lsl #30]
    2318:	2b000000 	blcs	2320 <_Min_Stack_Size+0x1f20>
    231c:	1a000008 	bne	2344 <_Min_Stack_Size+0x1f44>
    2320:	00000cd3 	ldrdeq	r0, [r0], -r3
    2324:	b8014101 	stmdalt	r1, {r0, r8, lr}
    2328:	4c000000 	stcmi	0, cr0, [r0], {-0}
    232c:	00000008 	andeq	r0, r0, r8
    2330:	000eac16 	andeq	sl, lr, r6, lsl ip
    2334:	01630100 	cmneq	r3, r0, lsl #2
    2338:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
    233c:	0000000c 	andeq	r0, r0, ip
    2340:	04e49c01 	strbteq	r9, [r4], #3073	; 0xc01
    2344:	8e170000 	cdphi	0, 1, cr0, cr7, cr0, {0}
    2348:	01000008 	tsteq	r0, r8
    234c:	01280163 	teqeq	r8, r3, ror #2
    2350:	50010000 	andpl	r0, r1, r0
    2354:	0d5f1600 	ldcleq	6, cr1, [pc, #-0]	; 235c <_Min_Stack_Size+0x1f5c>
    2358:	7c010000 	stcvc	0, cr0, [r1], {-0}
    235c:	0009cc01 	andeq	ip, r9, r1, lsl #24
    2360:	00002008 	andeq	r2, r0, r8
    2364:	099c0100 	ldmibeq	ip, {r8}
    2368:	17000005 	strne	r0, [r0, -r5]
    236c:	00000b73 	andeq	r0, r0, r3, ror fp
    2370:	97017c01 	strls	r7, [r1, -r1, lsl #24]
    2374:	01000000 	mrseq	r0, (UNDEF: 0)
    2378:	56160050 			; <UNDEFINED> instruction: 0x56160050
    237c:	01000011 	tsteq	r0, r1, lsl r0
    2380:	09ec01a4 	stmibeq	ip!, {r2, r5, r7, r8}^
    2384:	000c0800 	andeq	r0, ip, r0, lsl #16
    2388:	9c010000 	stcls	0, cr0, [r1], {-0}
    238c:	0000052e 	andeq	r0, r0, lr, lsr #10
    2390:	00088e17 	andeq	r8, r8, r7, lsl lr
    2394:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    2398:	00000128 	andeq	r0, r0, r8, lsr #2
    239c:	16005001 	strne	r5, [r0], -r1
    23a0:	0000118d 	andeq	r1, r0, sp, lsl #3
    23a4:	f801cf01 			; <UNDEFINED> instruction: 0xf801cf01
    23a8:	24080009 	strcs	r0, [r8], #-9
    23ac:	01000000 	mrseq	r0, (UNDEF: 0)
    23b0:	0005959c 	muleq	r5, ip, r5
    23b4:	0d952200 	lfmeq	f2, 4, [r5]
    23b8:	cf010000 	svcgt	0x00010000
    23bc:	0000b801 	andeq	fp, r0, r1, lsl #16
    23c0:	00087600 	andeq	r7, r8, r0, lsl #12
    23c4:	0c822200 	sfmeq	f2, 4, [r2], {0}
    23c8:	cf010000 	svcgt	0x00010000
    23cc:	0000b801 	andeq	fp, r0, r1, lsl #16
    23d0:	00089700 	andeq	r9, r8, r0, lsl #14
    23d4:	0c432200 	sfmeq	f2, 2, [r3], {-0}
    23d8:	cf010000 	svcgt	0x00010000
    23dc:	0000b801 	andeq	fp, r0, r1, lsl #16
    23e0:	0008b800 	andeq	fp, r8, r0, lsl #16
    23e4:	0c622200 	sfmeq	f2, 2, [r2], #-0
    23e8:	cf010000 	svcgt	0x00010000
    23ec:	0000b801 	andeq	fp, r0, r1, lsl #16
    23f0:	0008d900 	andeq	sp, r8, r0, lsl #18
    23f4:	0c672200 	sfmeq	f2, 2, [r7], #-0
    23f8:	cf010000 	svcgt	0x00010000
    23fc:	0000b801 	andeq	fp, r0, r1, lsl #16
    2400:	0008fa00 	andeq	pc, r8, r0, lsl #20
    2404:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
    2408:	0100000f 	tsteq	r0, pc
    240c:	0a1c01e6 	beq	702bac <_Min_Stack_Size+0x7027ac>
    2410:	000c0800 	andeq	r0, ip, r0, lsl #16
    2414:	9c010000 	stcls	0, cr0, [r1], {-0}
    2418:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    241c:	00088e17 	andeq	r8, r8, r7, lsl lr
    2420:	01e60100 	mvneq	r0, r0, lsl #2
    2424:	00000128 	andeq	r0, r0, r8, lsr #2
    2428:	16005001 	strne	r5, [r0], -r1
    242c:	00000e9b 	muleq	r0, fp, lr
    2430:	28022801 	stmdacs	r2, {r0, fp, sp}
    2434:	1808000a 	stmdane	r8, {r1, r3}
    2438:	01000000 	mrseq	r0, (UNDEF: 0)
    243c:	0006019c 	muleq	r6, ip, r1
    2440:	10a12200 	adcne	r2, r1, r0, lsl #4
    2444:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2448:	0000b802 	andeq	fp, r0, r2, lsl #16
    244c:	00090e00 	andeq	r0, r9, r0, lsl #28
    2450:	10c62200 	sbcne	r2, r6, r0, lsl #4
    2454:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2458:	0000b802 	andeq	fp, r0, r2, lsl #16
    245c:	00092f00 	andeq	r2, r9, r0, lsl #30
    2460:	10ce2200 	sbcne	r2, lr, r0, lsl #4
    2464:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2468:	0000b802 	andeq	fp, r0, r2, lsl #16
    246c:	00095000 	andeq	r5, r9, r0
    2470:	16160000 	ldrne	r0, [r6], -r0
    2474:	0100000e 	tsteq	r0, lr
    2478:	0a400239 	beq	1002d64 <_Min_Stack_Size+0x1002964>
    247c:	000c0800 	andeq	r0, ip, r0, lsl #16
    2480:	9c010000 	stcls	0, cr0, [r1], {-0}
    2484:	00000626 	andeq	r0, r0, r6, lsr #12
    2488:	00088e17 	andeq	r8, r8, r7, lsl lr
    248c:	02390100 	eorseq	r0, r9, #0, 2
    2490:	00000128 	andeq	r0, r0, r8, lsr #2
    2494:	16005001 	strne	r5, [r0], -r1
    2498:	00000f39 	andeq	r0, r0, r9, lsr pc
    249c:	4c025601 	stcmi	6, cr5, [r2], {1}
    24a0:	1808000a 	stmdane	r8, {r1, r3}
    24a4:	01000000 	mrseq	r0, (UNDEF: 0)
    24a8:	00066d9c 	muleq	r6, ip, sp
    24ac:	0fc42200 	svceq	0x00c42200
    24b0:	56010000 	strpl	r0, [r1], -r0
    24b4:	0000b802 	andeq	fp, r0, r2, lsl #16
    24b8:	00097100 	andeq	r7, r9, r0, lsl #2
    24bc:	0fcc2200 	svceq	0x00cc2200
    24c0:	56010000 	strpl	r0, [r1], -r0
    24c4:	0000b802 	andeq	fp, r0, r2, lsl #16
    24c8:	00099200 	andeq	r9, r9, r0, lsl #4
    24cc:	0fd42200 	svceq	0x00d42200
    24d0:	56010000 	strpl	r0, [r1], -r0
    24d4:	0000b802 	andeq	fp, r0, r2, lsl #16
    24d8:	0009b300 	andeq	fp, r9, r0, lsl #6
    24dc:	7b160000 	blvc	5824e4 <_Min_Stack_Size+0x5820e4>
    24e0:	0100000b 	tsteq	r0, fp
    24e4:	0a640268 	beq	1902e8c <_Min_Stack_Size+0x1902a8c>
    24e8:	000c0800 	andeq	r0, ip, r0, lsl #16
    24ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    24f0:	00000692 	muleq	r0, r2, r6
    24f4:	00088e17 	andeq	r8, r8, r7, lsl lr
    24f8:	02680100 	rsbeq	r0, r8, #0, 2
    24fc:	00000128 	andeq	r0, r0, r8, lsr #2
    2500:	16005001 	strne	r5, [r0], -r1
    2504:	00000f0f 	andeq	r0, r0, pc, lsl #30
    2508:	70027a01 	andvc	r7, r2, r1, lsl #20
    250c:	0c08000a 	stceq	0, cr0, [r8], {10}
    2510:	01000000 	mrseq	r0, (UNDEF: 0)
    2514:	0006b79c 	muleq	r6, ip, r7
    2518:	088e1700 	stmeq	lr, {r8, r9, sl, ip}
    251c:	7a010000 	bvc	42524 <_Min_Stack_Size+0x42124>
    2520:	00012802 	andeq	r2, r1, r2, lsl #16
    2524:	00500100 	subseq	r0, r0, r0, lsl #2
    2528:	000dfc16 	andeq	pc, sp, r6, lsl ip	; <UNPREDICTABLE>
    252c:	02930100 	addseq	r0, r3, #0, 2
    2530:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
    2534:	00000014 	andeq	r0, r0, r4, lsl r0
    2538:	06fe9c01 	ldrbteq	r9, [lr], r1, lsl #24
    253c:	1d220000 	stcne	0, cr0, [r2, #-0]
    2540:	0100000c 	tsteq	r0, ip
    2544:	00b80293 	umlalseq	r0, r8, r3, r2
    2548:	09d40000 	ldmibeq	r4, {}^	; <UNPREDICTABLE>
    254c:	4a220000 	bmi	882554 <_Min_Stack_Size+0x882154>
    2550:	0100000f 	tsteq	r0, pc
    2554:	00b80293 	umlalseq	r0, r8, r3, r2
    2558:	09f50000 	ldmibeq	r5!, {}^	; <UNPREDICTABLE>
    255c:	d31a0000 	tstle	sl, #0
    2560:	0100000c 	tsteq	r0, ip
    2564:	00b80295 	umlalseq	r0, r8, r5, r2
    2568:	0a160000 	beq	582570 <_Min_Stack_Size+0x582170>
    256c:	16000000 	strne	r0, [r0], -r0
    2570:	00001147 	andeq	r1, r0, r7, asr #2
    2574:	9002b901 	andls	fp, r2, r1, lsl #18
    2578:	1408000a 	strne	r0, [r8], #-10
    257c:	01000000 	mrseq	r0, (UNDEF: 0)
    2580:	0007459c 	muleq	r7, ip, r5
    2584:	0f6d2200 	svceq	0x006d2200
    2588:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    258c:	0000b802 	andeq	fp, r0, r2, lsl #16
    2590:	000a5300 	andeq	r5, sl, r0, lsl #6
    2594:	0ed52200 	cdpeq	2, 13, cr2, cr5, cr0, {0}
    2598:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    259c:	0000b802 	andeq	fp, r0, r2, lsl #16
    25a0:	000a7400 	andeq	r7, sl, r0, lsl #8
    25a4:	0cd31a00 	vldmiaeq	r3, {s3-s2}
    25a8:	bb010000 	bllt	425b0 <_Min_Stack_Size+0x421b0>
    25ac:	0000b802 	andeq	fp, r0, r2, lsl #16
    25b0:	000a9500 	andeq	r9, sl, r0, lsl #10
    25b4:	4e160000 	cdpmi	0, 1, cr0, cr6, cr0, {0}
    25b8:	0100000d 	tsteq	r0, sp
    25bc:	0aa4035f 	beq	fe903340 <_estack+0xde8d3340>
    25c0:	00140800 	andseq	r0, r4, r0, lsl #16
    25c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    25c8:	0000077c 	andeq	r0, r0, ip, ror r7
    25cc:	00103f22 	andseq	r3, r0, r2, lsr #30
    25d0:	035f0100 	cmpeq	pc, #0, 2
    25d4:	000000b8 	strheq	r0, [r0], -r8
    25d8:	00000ad2 	ldrdeq	r0, [r0], -r2
    25dc:	000cd31a 	andeq	sp, ip, sl, lsl r3
    25e0:	03610100 	cmneq	r1, #0, 2
    25e4:	000000b8 	strheq	r0, [r0], -r8
    25e8:	00000af3 	strdeq	r0, [r0], -r3
    25ec:	0da32300 	stceq	3, cr2, [r3]
    25f0:	7b010000 	blvc	425f8 <_Min_Stack_Size+0x421f8>
    25f4:	00009703 	andeq	r9, r0, r3, lsl #14
    25f8:	000ab800 	andeq	fp, sl, r0, lsl #16
    25fc:	00001008 	andeq	r1, r0, r8
    2600:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2604:	00000d3f 	andeq	r0, r0, pc, lsr sp
    2608:	c8039401 	stmdagt	r3, {r0, sl, ip, pc}
    260c:	1408000a 	strne	r0, [r8], #-10
    2610:	01000000 	mrseq	r0, (UNDEF: 0)
    2614:	0007c99c 	muleq	r7, ip, r9
    2618:	0e0b2200 	cdpeq	2, 0, cr2, cr11, cr0, {0}
    261c:	94010000 	strls	r0, [r1], #-0
    2620:	0000b803 	andeq	fp, r0, r3, lsl #16
    2624:	000b1d00 	andeq	r1, fp, r0, lsl #26
    2628:	0cd31a00 	vldmiaeq	r3, {s3-s2}
    262c:	96010000 	strls	r0, [r1], -r0
    2630:	0000b803 	andeq	fp, r0, r3, lsl #16
    2634:	000b3e00 	andeq	r3, fp, r0, lsl #28
    2638:	01160000 	tsteq	r6, r0
    263c:	0100000d 	tsteq	r0, sp
    2640:	0adc03b4 	beq	ff703518 <_estack+0xdf6d3518>
    2644:	00140800 	andseq	r0, r4, r0, lsl #16
    2648:	9c010000 	stcls	0, cr0, [r1], {-0}
    264c:	00000800 	andeq	r0, r0, r0, lsl #16
    2650:	000b6a22 	andeq	r6, fp, r2, lsr #20
    2654:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    2658:	000000b8 	strheq	r0, [r0], -r8
    265c:	00000b68 	andeq	r0, r0, r8, ror #22
    2660:	000cd31a 	andeq	sp, ip, sl, lsl r3
    2664:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    2668:	000000b8 	strheq	r0, [r0], -r8
    266c:	00000b89 	andeq	r0, r0, r9, lsl #23
    2670:	102f1600 	eorne	r1, pc, r0, lsl #12
    2674:	d3010000 	movwle	r0, #4096	; 0x1000
    2678:	000af003 	andeq	pc, sl, r3
    267c:	00001408 	andeq	r1, r0, r8, lsl #8
    2680:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    2684:	22000008 	andcs	r0, r0, #8
    2688:	00000b6a 	andeq	r0, r0, sl, ror #22
    268c:	b803d301 	stmdalt	r3, {r0, r8, r9, ip, lr, pc}
    2690:	b3000000 	movwlt	r0, #0
    2694:	1a00000b 	bne	26c8 <_Min_Stack_Size+0x22c8>
    2698:	00000cd3 	ldrdeq	r0, [r0], -r3
    269c:	b803d501 	stmdalt	r3, {r0, r8, sl, ip, lr, pc}
    26a0:	d4000000 	strle	r0, [r0], #-0
    26a4:	0000000b 	andeq	r0, r0, fp
    26a8:	0010a916 	andseq	sl, r0, r6, lsl r9
    26ac:	04070100 	streq	r0, [r7], #-256	; 0x100
    26b0:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
    26b4:	00000090 	muleq	r0, r0, r0
    26b8:	08bc9c01 	ldmeq	ip!, {r0, sl, fp, ip, pc}
    26bc:	96170000 	ldrls	r0, [r7], -r0
    26c0:	0100000c 	tsteq	r0, ip
    26c4:	08bc0407 	ldmeq	ip!, {r0, r1, r2, sl}
    26c8:	50010000 	andpl	r0, r1, r0
    26cc:	706d7424 	rsbvc	r7, sp, r4, lsr #8
    26d0:	04090100 	streq	r0, [r9], #-256	; 0x100
    26d4:	000000b8 	strheq	r0, [r0], -r8
    26d8:	00000bfe 	strdeq	r0, [r0], -lr
    26dc:	000e241a 	andeq	r2, lr, sl, lsl r4
    26e0:	04090100 	streq	r0, [r9], #-256	; 0x100
    26e4:	000000b8 	strheq	r0, [r0], -r8
    26e8:	00000c95 	muleq	r0, r5, ip
    26ec:	00072a1a 	andeq	r2, r7, sl, lsl sl
    26f0:	04090100 	streq	r0, [r9], #-256	; 0x100
    26f4:	000000b8 	strheq	r0, [r0], -r8
    26f8:	00000ce5 	andeq	r0, r0, r5, ror #25
    26fc:	0006c91a 	andeq	ip, r6, sl, lsl r9
    2700:	04090100 	streq	r0, [r9], #-256	; 0x100
    2704:	000000b8 	strheq	r0, [r0], -r8
    2708:	00000d10 	andeq	r0, r0, r0, lsl sp
    270c:	0006b21a 	andeq	fp, r6, sl, lsl r2
    2710:	04090100 	streq	r0, [r9], #-256	; 0x100
    2714:	000000b8 	strheq	r0, [r0], -r8
    2718:	00000d47 	andeq	r0, r0, r7, asr #26
    271c:	0006c41a 	andeq	ip, r6, sl, lsl r4
    2720:	04090100 	streq	r0, [r9], #-256	; 0x100
    2724:	000000b8 	strheq	r0, [r0], -r8
    2728:	00000d7a 	andeq	r0, r0, sl, ror sp
    272c:	44042500 	strmi	r2, [r4], #-1280	; 0x500
    2730:	16000003 	strne	r0, [r0], -r3
    2734:	00000deb 	andeq	r0, r0, fp, ror #27
    2738:	94048401 	strls	r8, [r4], #-1025	; 0x401
    273c:	3008000b 	andcc	r0, r8, fp
    2740:	01000000 	mrseq	r0, (UNDEF: 0)
    2744:	0008f99c 	muleq	r8, ip, r9
    2748:	0e2a2200 	cdpeq	2, 2, cr2, cr10, cr0, {0}
    274c:	84010000 	strhi	r0, [r1], #-0
    2750:	0000b804 	andeq	fp, r0, r4, lsl #16
    2754:	000da500 	andeq	sl, sp, r0, lsl #10
    2758:	0cd31a00 	vldmiaeq	r3, {s3-s2}
    275c:	86010000 	strhi	r0, [r1], -r0
    2760:	0000b804 	andeq	fp, r0, r4, lsl #16
    2764:	000dc600 	andeq	ip, sp, r0, lsl #12
    2768:	fb160000 	blx	582772 <_Min_Stack_Size+0x582372>
    276c:	0100000e 	tsteq	r0, lr
    2770:	0bc404a4 	bleq	ff103a08 <_estack+0xdf0d3a08>
    2774:	000c0800 	andeq	r0, ip, r0, lsl #16
    2778:	9c010000 	stcls	0, cr0, [r1], {-0}
    277c:	0000091e 	andeq	r0, r0, lr, lsl r9
    2780:	00088e17 	andeq	r8, r8, r7, lsl lr
    2784:	04a40100 	strteq	r0, [r4], #256	; 0x100
    2788:	00000128 	andeq	r0, r0, r8, lsr #2
    278c:	16005001 	strne	r5, [r0], -r1
    2790:	00000d76 	andeq	r0, r0, r6, ror sp
    2794:	d004b501 	andle	fp, r4, r1, lsl #10
    2798:	0c08000b 	stceq	0, cr0, [r8], {11}
    279c:	01000000 	mrseq	r0, (UNDEF: 0)
    27a0:	0009439c 	muleq	r9, ip, r3
    27a4:	088e1700 	stmeq	lr, {r8, r9, sl, ip}
    27a8:	b5010000 	strlt	r0, [r1, #-0]
    27ac:	00012804 	andeq	r2, r1, r4, lsl #16
    27b0:	00500100 	subseq	r0, r0, r0, lsl #2
    27b4:	00113616 	andseq	r3, r1, r6, lsl r6
    27b8:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    27bc:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
    27c0:	0000000c 	andeq	r0, r0, ip
    27c4:	09689c01 	stmdbeq	r8!, {r0, sl, fp, ip, pc}^
    27c8:	7c170000 	ldcvc	0, cr0, [r7], {-0}
    27cc:	0100000f 	tsteq	r0, pc
    27d0:	00b804c6 	adcseq	r0, r8, r6, asr #9
    27d4:	50010000 	andpl	r0, r1, r0
    27d8:	0ee11600 	cdpeq	6, 14, cr1, cr1, cr0, {0}
    27dc:	db010000 	blle	427e4 <_Min_Stack_Size+0x423e4>
    27e0:	000be804 	andeq	lr, fp, r4, lsl #16
    27e4:	00001808 	andeq	r1, r0, r8, lsl #16
    27e8:	9f9c0100 	svcls	0x009c0100
    27ec:	22000009 	andcs	r0, r0, #9
    27f0:	00000f2a 	andeq	r0, r0, sl, lsr #30
    27f4:	b804db01 	stmdalt	r4, {r0, r8, r9, fp, ip, lr, pc}
    27f8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    27fc:	1a00000d 	bne	2838 <_Min_Stack_Size+0x2438>
    2800:	00000cd3 	ldrdeq	r0, [r0], -r3
    2804:	b804dd01 	stmdalt	r4, {r0, r8, sl, fp, ip, lr, pc}
    2808:	10000000 	andne	r0, r0, r0
    280c:	0000000e 	andeq	r0, r0, lr
    2810:	000c4816 	andeq	r4, ip, r6, lsl r8
    2814:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
    2818:	08000c00 	stmdaeq	r0, {sl, fp}
    281c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2820:	09d69c01 	ldmibeq	r6, {r0, sl, fp, ip, pc}^
    2824:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    2828:	0100000b 	tsteq	r0, fp
    282c:	00b804fb 	ldrshteq	r0, [r8], fp
    2830:	0e2f0000 	cdpeq	0, 2, cr0, cr15, cr0, {0}
    2834:	d31a0000 	tstle	sl, #0
    2838:	0100000c 	tsteq	r0, ip
    283c:	00b804fd 	ldrshteq	r0, [r8], sp
    2840:	0e4f0000 	cdpeq	0, 4, cr0, cr15, cr0, {0}
    2844:	16000000 	strne	r0, [r0], -r0
    2848:	00000d28 	andeq	r0, r0, r8, lsr #26
    284c:	1c051f01 	stcne	15, cr1, [r5], {1}
    2850:	1808000c 	stmdane	r8, {r2, r3}
    2854:	01000000 	mrseq	r0, (UNDEF: 0)
    2858:	000a0d9c 	muleq	sl, ip, sp
    285c:	0e3b2200 	cdpeq	2, 3, cr2, cr11, cr0, {0}
    2860:	1f010000 	svcne	0x00010000
    2864:	0000b805 	andeq	fp, r0, r5, lsl #16
    2868:	000e6e00 	andeq	r6, lr, r0, lsl #28
    286c:	0cd31a00 	vldmiaeq	r3, {s3-s2}
    2870:	21010000 	mrscs	r0, (UNDEF: 1)
    2874:	0000b805 	andeq	fp, r0, r5, lsl #16
    2878:	000e8f00 	andeq	r8, lr, r0, lsl #30
    287c:	ad160000 	ldcge	0, cr0, [r6, #-0]
    2880:	0100000f 	tsteq	r0, pc
    2884:	0c340543 	cfldr32eq	mvfx0, [r4], #-268	; 0xfffffef4
    2888:	00180800 	andseq	r0, r8, r0, lsl #16
    288c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2890:	00000a44 	andeq	r0, r0, r4, asr #20
    2894:	000e5222 	andeq	r5, lr, r2, lsr #4
    2898:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    289c:	000000b8 	strheq	r0, [r0], -r8
    28a0:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    28a4:	000cd31a 	andeq	sp, ip, sl, lsl r3
    28a8:	05450100 	strbeq	r0, [r5, #-256]	; 0x100
    28ac:	000000b8 	strheq	r0, [r0], -r8
    28b0:	00000eda 	ldrdeq	r0, [r0], -sl
    28b4:	0e691600 	cdpeq	6, 6, cr1, cr9, cr0, {0}
    28b8:	64010000 	strvs	r0, [r1], #-0
    28bc:	000c4c05 	andeq	r4, ip, r5, lsl #24
    28c0:	00001808 	andeq	r1, r0, r8, lsl #16
    28c4:	7b9c0100 	blvc	fe702ccc <_estack+0xde6d2ccc>
    28c8:	2200000a 	andcs	r0, r0, #10
    28cc:	00000b98 	muleq	r0, r8, fp
    28d0:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    28d4:	04000000 	streq	r0, [r0], #-0
    28d8:	1a00000f 	bne	291c <_Min_Stack_Size+0x251c>
    28dc:	00000cd3 	ldrdeq	r0, [r0], -r3
    28e0:	b8056601 	stmdalt	r5, {r0, r9, sl, sp, lr}
    28e4:	25000000 	strcs	r0, [r0, #-0]
    28e8:	0000000f 	andeq	r0, r0, pc
    28ec:	00112116 	andseq	r2, r1, r6, lsl r1
    28f0:	05890100 	streq	r0, [r9, #256]	; 0x100
    28f4:	08000c64 	stmdaeq	r0, {r2, r5, r6, sl, fp}
    28f8:	0000000c 	andeq	r0, r0, ip
    28fc:	0aa09c01 	beq	fe829908 <_estack+0xde7f9908>
    2900:	dc170000 	ldcle	0, cr0, [r7], {-0}
    2904:	0100000f 	tsteq	r0, pc
    2908:	00b80589 	adcseq	r0, r8, r9, lsl #11
    290c:	50010000 	andpl	r0, r1, r0
    2910:	03ac1600 			; <UNDEFINED> instruction: 0x03ac1600
    2914:	b4010000 	strlt	r0, [r1], #-0
    2918:	000c7005 	andeq	r7, ip, r5
    291c:	00001808 	andeq	r1, r0, r8, lsl #16
    2920:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    2924:	2200000a 	andcs	r0, r0, #10
    2928:	00000c87 	andeq	r0, r0, r7, lsl #25
    292c:	b805b401 	stmdalt	r5, {r0, sl, ip, sp, pc}
    2930:	4f000000 	svcmi	0x00000000
    2934:	1700000f 	strne	r0, [r0, -pc]
    2938:	0000088e 	andeq	r0, r0, lr, lsl #17
    293c:	2805b401 	stmdacs	r5, {r0, sl, ip, sp, pc}
    2940:	01000001 	tsteq	r0, r1
    2944:	ea160051 	b	582a90 <_Min_Stack_Size+0x582690>
    2948:	0100000c 	tsteq	r0, ip
    294c:	0c8805d4 	cfstr32eq	mvfx0, [r8], {212}	; 0xd4
    2950:	00180800 	andseq	r0, r8, r0, lsl #16
    2954:	9c010000 	stcls	0, cr0, [r1], {-0}
    2958:	00000b0a 	andeq	r0, r0, sl, lsl #22
    295c:	000eb722 	andeq	fp, lr, r2, lsr #14
    2960:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    2964:	000000b8 	strheq	r0, [r0], -r8
    2968:	00000f89 	andeq	r0, r0, r9, lsl #31
    296c:	00088e17 	andeq	r8, r8, r7, lsl lr
    2970:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    2974:	00000128 	andeq	r0, r0, r8, lsr #2
    2978:	16005101 	strne	r5, [r0], -r1, lsl #2
    297c:	000011ca 	andeq	r1, r0, sl, asr #3
    2980:	a005f001 	andge	pc, r5, r1
    2984:	1808000c 	stmdane	r8, {r2, r3}
    2988:	01000000 	mrseq	r0, (UNDEF: 0)
    298c:	000b3f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    2990:	0ec62200 	cdpeq	2, 12, cr2, cr6, cr0, {0}
    2994:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2998:	0000b805 	andeq	fp, r0, r5, lsl #16
    299c:	000fc300 	andeq	ip, pc, r0, lsl #6
    29a0:	088e1700 	stmeq	lr, {r8, r9, sl, ip}
    29a4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    29a8:	00012805 	andeq	r2, r1, r5, lsl #16
    29ac:	00510100 	subseq	r0, r1, r0, lsl #2
    29b0:	00116116 	andseq	r6, r1, r6, lsl r1
    29b4:	06240100 	strteq	r0, [r4], -r0, lsl #2
    29b8:	08000cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp}
    29bc:	00000018 	andeq	r0, r0, r8, lsl r0
    29c0:	0b749c01 	bleq	1d299cc <_Min_Stack_Size+0x1d295cc>
    29c4:	dc220000 	stcle	0, cr0, [r2], #-0
    29c8:	0100000d 	tsteq	r0, sp
    29cc:	00b80624 	adcseq	r0, r8, r4, lsr #12
    29d0:	0ffd0000 	svceq	0x00fd0000
    29d4:	8e170000 	cdphi	0, 1, cr0, cr7, cr0, {0}
    29d8:	01000008 	tsteq	r0, r8
    29dc:	01280624 	teqeq	r8, r4, lsr #12
    29e0:	51010000 	mrspl	r0, (UNDEF: 1)
    29e4:	041b1600 	ldreq	r1, [fp], #-1536	; 0x600
    29e8:	51010000 	mrspl	r0, (UNDEF: 1)
    29ec:	000cd006 	andeq	sp, ip, r6
    29f0:	00001808 	andeq	r1, r0, r8, lsl #16
    29f4:	a99c0100 	ldmibge	ip, {r8}
    29f8:	2200000b 	andcs	r0, r0, #11
    29fc:	00001112 	andeq	r1, r0, r2, lsl r1
    2a00:	b8065101 	stmdalt	r6, {r0, r8, ip, lr}
    2a04:	37000000 	strcc	r0, [r0, -r0]
    2a08:	17000010 	smladne	r0, r0, r0, r0
    2a0c:	0000088e 	andeq	r0, r0, lr, lsl #17
    2a10:	28065101 	stmdacs	r6, {r0, r8, ip, lr}
    2a14:	01000001 	tsteq	r0, r1
    2a18:	5c160051 	ldcpl	0, cr0, [r6], {81}	; 0x51
    2a1c:	0100000a 	tsteq	r0, sl
    2a20:	0ce8067b 	stcleq	6, cr0, [r8], #492	; 0x1ec
    2a24:	00180800 	andseq	r0, r8, r0, lsl #16
    2a28:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a2c:	00000bde 	ldrdeq	r0, [r0], -lr
    2a30:	000c8722 	andeq	r8, ip, r2, lsr #14
    2a34:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    2a38:	000000b8 	strheq	r0, [r0], -r8
    2a3c:	00001071 	andeq	r1, r0, r1, ror r0
    2a40:	00088e17 	andeq	r8, r8, r7, lsl lr
    2a44:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    2a48:	00000128 	andeq	r0, r0, r8, lsr #2
    2a4c:	16005101 	strne	r5, [r0], -r1, lsl #2
    2a50:	00000ffb 	strdeq	r0, [r0], -fp
    2a54:	00069801 	andeq	r9, r6, r1, lsl #16
    2a58:	1808000d 	stmdane	r8, {r0, r2, r3}
    2a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a60:	000c139c 	muleq	ip, ip, r3
    2a64:	0eb72200 	cdpeq	2, 11, cr2, cr7, cr0, {0}
    2a68:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2a6c:	0000b806 	andeq	fp, r0, r6, lsl #16
    2a70:	0010ab00 	andseq	sl, r0, r0, lsl #22
    2a74:	088e1700 	stmeq	lr, {r8, r9, sl, ip}
    2a78:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2a7c:	00012806 	andeq	r2, r1, r6, lsl #16
    2a80:	00510100 	subseq	r0, r1, r0, lsl #2
    2a84:	000d1116 	andeq	r1, sp, r6, lsl r1
    2a88:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
    2a8c:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
    2a90:	00000018 	andeq	r0, r0, r8, lsl r0
    2a94:	0c489c01 	mcrreq	12, 0, r9, r8, cr1
    2a98:	c6220000 	strtgt	r0, [r2], -r0
    2a9c:	0100000e 	tsteq	r0, lr
    2aa0:	00b806b1 	ldrhteq	r0, [r8], r1
    2aa4:	10e50000 	rscne	r0, r5, r0
    2aa8:	8e170000 	cdphi	0, 1, cr0, cr7, cr0, {0}
    2aac:	01000008 	tsteq	r0, r8
    2ab0:	012806b1 			; <UNDEFINED> instruction: 0x012806b1
    2ab4:	51010000 	mrspl	r0, (UNDEF: 1)
    2ab8:	0c2c1600 	stceq	6, cr1, [ip], #-0
    2abc:	e2010000 	and	r0, r1, #0
    2ac0:	000d3006 	andeq	r3, sp, r6
    2ac4:	00001808 	andeq	r1, r0, r8, lsl #16
    2ac8:	7d9c0100 	ldfvcs	f0, [ip]
    2acc:	2200000c 	andcs	r0, r0, #12
    2ad0:	00000ddc 	ldrdeq	r0, [r0], -ip
    2ad4:	b806e201 	stmdalt	r6, {r0, r9, sp, lr, pc}
    2ad8:	1f000000 	svcne	0x00000000
    2adc:	17000011 	smladne	r0, r1, r0, r0
    2ae0:	0000088e 	andeq	r0, r0, lr, lsl #17
    2ae4:	2806e201 	stmdacs	r6, {r0, r9, sp, lr, pc}
    2ae8:	01000001 	tsteq	r0, r1
    2aec:	56160051 			; <UNDEFINED> instruction: 0x56160051
    2af0:	0100000f 	tsteq	r0, pc
    2af4:	0d48070b 	stcleq	7, cr0, [r8, #-44]	; 0xffffffd4
    2af8:	00180800 	andseq	r0, r8, r0, lsl #16
    2afc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b00:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
    2b04:	00111222 	andseq	r1, r1, r2, lsr #4
    2b08:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    2b0c:	000000b8 	strheq	r0, [r0], -r8
    2b10:	00001159 	andeq	r1, r0, r9, asr r1
    2b14:	00088e17 	andeq	r8, r8, r7, lsl lr
    2b18:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    2b1c:	00000128 	andeq	r0, r0, r8, lsr #2
    2b20:	16005101 	strne	r5, [r0], -r1, lsl #2
    2b24:	000011ad 	andeq	r1, r0, sp, lsr #3
    2b28:	60073c01 	andvs	r3, r7, r1, lsl #24
    2b2c:	1808000d 	stmdane	r8, {r0, r2, r3}
    2b30:	01000000 	mrseq	r0, (UNDEF: 0)
    2b34:	000ce79c 	muleq	ip, ip, r7
    2b38:	0c872200 	sfmeq	f2, 4, [r7], {0}
    2b3c:	3c010000 	stccc	0, cr0, [r1], {-0}
    2b40:	0000b807 	andeq	fp, r0, r7, lsl #16
    2b44:	00119300 	andseq	r9, r1, r0, lsl #6
    2b48:	088e1700 	stmeq	lr, {r8, r9, sl, ip}
    2b4c:	3c010000 	stccc	0, cr0, [r1], {-0}
    2b50:	00012807 	andeq	r2, r1, r7, lsl #16
    2b54:	00510100 	subseq	r0, r1, r0, lsl #2
    2b58:	000e7e16 	andeq	r7, lr, r6, lsl lr
    2b5c:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    2b60:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
    2b64:	00000018 	andeq	r0, r0, r8, lsl r0
    2b68:	0d1c9c01 	ldceq	12, cr9, [ip, #-4]
    2b6c:	b7220000 	strlt	r0, [r2, -r0]!
    2b70:	0100000e 	tsteq	r0, lr
    2b74:	00b8075c 	adcseq	r0, r8, ip, asr r7
    2b78:	11cd0000 	bicne	r0, sp, r0
    2b7c:	8e170000 	cdphi	0, 1, cr0, cr7, cr0, {0}
    2b80:	01000008 	tsteq	r0, r8
    2b84:	0128075c 	teqeq	r8, ip, asr r7
    2b88:	51010000 	mrspl	r0, (UNDEF: 1)
    2b8c:	10e61600 	rscne	r1, r6, r0, lsl #12
    2b90:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2b94:	000d9007 	andeq	r9, sp, r7
    2b98:	00001808 	andeq	r1, r0, r8, lsl #16
    2b9c:	519c0100 	orrspl	r0, ip, r0, lsl #2
    2ba0:	2200000d 	andcs	r0, r0, #13
    2ba4:	00000ec6 	andeq	r0, r0, r6, asr #29
    2ba8:	b8077801 	stmdalt	r7, {r0, fp, ip, sp, lr}
    2bac:	07000000 	streq	r0, [r0, -r0]
    2bb0:	17000012 	smladne	r0, r2, r0, r0
    2bb4:	0000088e 	andeq	r0, r0, lr, lsl #17
    2bb8:	28077801 	stmdacs	r7, {r0, fp, ip, sp, lr}
    2bbc:	01000001 	tsteq	r0, r1
    2bc0:	12160051 	andsne	r0, r6, #81	; 0x51
    2bc4:	01000010 	tsteq	r0, r0, lsl r0
    2bc8:	0da807ac 	stceq	7, cr0, [r8, #688]!	; 0x2b0
    2bcc:	00180800 	andseq	r0, r8, r0, lsl #16
    2bd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bd4:	00000d86 	andeq	r0, r0, r6, lsl #27
    2bd8:	000ddc22 	andeq	sp, sp, r2, lsr #24
    2bdc:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    2be0:	000000b8 	strheq	r0, [r0], -r8
    2be4:	00001241 	andeq	r1, r0, r1, asr #4
    2be8:	00088e17 	andeq	r8, r8, r7, lsl lr
    2bec:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    2bf0:	00000128 	andeq	r0, r0, r8, lsr #2
    2bf4:	16005101 	strne	r5, [r0], -r1, lsl #2
    2bf8:	00000ca1 	andeq	r0, r0, r1, lsr #25
    2bfc:	c007d901 	andgt	sp, r7, r1, lsl #18
    2c00:	1808000d 	stmdane	r8, {r0, r2, r3}
    2c04:	01000000 	mrseq	r0, (UNDEF: 0)
    2c08:	000dbb9c 	muleq	sp, ip, fp
    2c0c:	11122200 	tstne	r2, r0, lsl #4
    2c10:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2c14:	0000b807 	andeq	fp, r0, r7, lsl #16
    2c18:	00127b00 	andseq	r7, r2, r0, lsl #22
    2c1c:	088e1700 	stmeq	lr, {r8, r9, sl, ip}
    2c20:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2c24:	00012807 	andeq	r2, r1, r7, lsl #16
    2c28:	00510100 	subseq	r0, r1, r0, lsl #2
    2c2c:	00117816 	andseq	r7, r1, r6, lsl r8
    2c30:	08070100 	stmdaeq	r7, {r8}
    2c34:	08000dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp}
    2c38:	00000018 	andeq	r0, r0, r8, lsl r0
    2c3c:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    2c40:	cc220000 	stcgt	0, cr0, [r2], #-0
    2c44:	0100000c 	tsteq	r0, ip
    2c48:	00970807 	addseq	r0, r7, r7, lsl #16
    2c4c:	12b50000 	adcsne	r0, r5, #0
    2c50:	8e170000 	cdphi	0, 1, cr0, cr7, cr0, {0}
    2c54:	01000008 	tsteq	r0, r8
    2c58:	01280807 	teqeq	r8, r7, lsl #16
    2c5c:	51010000 	mrspl	r0, (UNDEF: 1)
    2c60:	034f2600 	movteq	r2, #62976	; 0xf600
    2c64:	0df00000 	ldcleq	0, cr0, [r0]
    2c68:	00340800 	eorseq	r0, r4, r0, lsl #16
    2c6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c70:	00000e28 	andeq	r0, r0, r8, lsr #28
    2c74:	00036020 	andeq	r6, r3, r0, lsr #32
    2c78:	0012ef00 	andseq	lr, r2, r0, lsl #30
    2c7c:	036c1e00 	cmneq	ip, #0, 28
    2c80:	13290000 	teqne	r9, #0
    2c84:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
    2c88:	95000003 	strls	r0, [r0, #-3]
    2c8c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2c90:	00000384 	andeq	r0, r0, r4, lsl #7
    2c94:	000013cb 	andeq	r1, r0, fp, asr #7
    2c98:	0cbe2700 	ldceq	7, cr2, [lr]
    2c9c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2ca0:	000e2408 	andeq	r2, lr, r8, lsl #8
    2ca4:	00001008 	andeq	r1, r0, r8
    2ca8:	189c0100 	ldmne	ip, {r8}
    2cac:	000010d6 	ldrdeq	r1, [r0], -r6
    2cb0:	06086d01 	streq	r6, [r8], -r1, lsl #26
    2cb4:	34000001 	strcc	r0, [r0], #-1
    2cb8:	1408000e 	strne	r0, [r8], #-14
    2cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    2cc0:	000e759c 	muleq	lr, ip, r5
    2cc4:	0ccc2200 	sfmeq	f2, 2, [ip], {0}
    2cc8:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2ccc:	00009708 	andeq	r9, r0, r8, lsl #14
    2cd0:	00141900 	andseq	r1, r4, r0, lsl #18
    2cd4:	0a521a00 	beq	14894dc <_Min_Stack_Size+0x14890dc>
    2cd8:	6f010000 	svcvs	0x00010000
    2cdc:	00010608 	andeq	r0, r1, r8, lsl #12
    2ce0:	00143a00 	andseq	r3, r4, r0, lsl #20
    2ce4:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    2ce8:	0100000c 	tsteq	r0, ip
    2cec:	0e48088f 	cdpeq	8, 4, cr0, cr8, cr15, {4}
    2cf0:	000c0800 	andeq	r0, ip, r0, lsl #16
    2cf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cf8:	00000e9a 	muleq	r0, sl, lr
    2cfc:	000ccc17 	andeq	ip, ip, r7, lsl ip
    2d00:	088f0100 	stmeq	pc, {r8}	; <UNPREDICTABLE>
    2d04:	00000097 	muleq	r0, r7, r0
    2d08:	06005001 	streq	r5, [r0], -r1
    2d0c:	00000097 	muleq	r0, r7, r0
    2d10:	00000eaa 	andeq	r0, r0, sl, lsr #29
    2d14:	0000c307 	andeq	ip, r0, r7, lsl #6
    2d18:	28000f00 	stmdacs	r0, {r8, r9, sl, fp}
    2d1c:	00001068 	andeq	r1, r0, r8, rrx
    2d20:	0ebb8d01 	cdpeq	13, 11, cr8, cr11, cr1, {0}
    2d24:	03050000 	movweq	r0, #20480	; 0x5000
    2d28:	20000014 	andcs	r0, r0, r4, lsl r0
    2d2c:	000ec029 	andeq	ip, lr, r9, lsr #32
    2d30:	0e9a0500 	cdpeq	5, 9, cr0, cr10, cr0, {0}
    2d34:	a52a0000 	strge	r0, [sl, #-0]!
    2d38:	06000004 	streq	r0, [r0], -r4
    2d3c:	00df06a7 	sbcseq	r0, pc, r7, lsr #13
    2d40:	ab000000 	blge	2d48 <_Min_Stack_Size+0x2948>
    2d44:	0400000b 	streq	r0, [r0], #-11
    2d48:	0009fd00 	andeq	pc, r9, r0, lsl #26
    2d4c:	56010400 	strpl	r0, [r1], -r0, lsl #8
    2d50:	01000001 	tsteq	r0, r1
    2d54:	000012c9 	andeq	r1, r0, r9, asr #5
    2d58:	00000021 	andeq	r0, r0, r1, lsr #32
    2d5c:	00000358 	andeq	r0, r0, r8, asr r3
    2d60:	00000000 	andeq	r0, r0, r0
    2d64:	00001424 	andeq	r1, r0, r4, lsr #8
    2d68:	16060102 	strne	r0, [r6], -r2, lsl #2
    2d6c:	03000003 	movweq	r0, #3
    2d70:	000002da 	ldrdeq	r0, [r0], -sl
    2d74:	00371c02 	eorseq	r1, r7, r2, lsl #24
    2d78:	01020000 	mrseq	r0, (UNDEF: 2)
    2d7c:	00031408 	andeq	r1, r3, r8, lsl #8
    2d80:	05020200 	streq	r0, [r2, #-512]	; 0x200
    2d84:	000000c1 	andeq	r0, r0, r1, asr #1
    2d88:	00009903 	andeq	r9, r0, r3, lsl #18
    2d8c:	50260200 	eorpl	r0, r6, r0, lsl #4
    2d90:	02000000 	andeq	r0, r0, #0
    2d94:	037f0702 	cmneq	pc, #524288	; 0x80000
    2d98:	fb030000 	blx	c2da2 <_Min_Stack_Size+0xc29a2>
    2d9c:	02000003 	andeq	r0, r0, #3
    2da0:	00006237 	andeq	r6, r0, r7, lsr r2
    2da4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2da8:	0000027b 	andeq	r0, r0, fp, ror r2
    2dac:	00008e03 	andeq	r8, r0, r3, lsl #28
    2db0:	74380200 	ldrtvc	r0, [r8], #-512	; 0x200
    2db4:	02000000 	andeq	r0, r0, #0
    2db8:	02890704 	addeq	r0, r9, #4, 14	; 0x100000
    2dbc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2dc0:	00027605 	andeq	r7, r2, r5, lsl #12
    2dc4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2dc8:	00000284 	andeq	r0, r0, r4, lsl #5
    2dcc:	69050404 	stmdbvs	r5, {r2, sl}
    2dd0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2dd4:	028e0704 	addeq	r0, lr, #4, 14	; 0x100000
    2dd8:	dc030000 	stcle	0, cr0, [r3], {-0}
    2ddc:	03000002 	movweq	r0, #2
    2de0:	00002c2a 	andeq	r2, r0, sl, lsr #24
    2de4:	009b0300 	addseq	r0, fp, r0, lsl #6
    2de8:	36030000 	strcc	r0, [r3], -r0
    2dec:	00000045 	andeq	r0, r0, r5, asr #32
    2df0:	0003fd03 	andeq	pc, r3, r3, lsl #26
    2df4:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
    2df8:	03000000 	movweq	r0, #0
    2dfc:	00000090 	muleq	r0, r0, r0
    2e00:	00694203 	rsbeq	r4, r9, r3, lsl #4
    2e04:	04020000 	streq	r0, [r2], #-0
    2e08:	00007207 	andeq	r7, r0, r7, lsl #4
    2e0c:	00a20500 	adceq	r0, r2, r0, lsl #10
    2e10:	ad050000 	stcge	0, cr0, [r5, #-0]
    2e14:	06000000 	streq	r0, [r0], -r0
    2e18:	01f70401 	mvnseq	r0, r1, lsl #8
    2e1c:	000000ea 	andeq	r0, r0, sl, ror #1
    2e20:	000a0007 	andeq	r0, sl, r7
    2e24:	53080000 	movwpl	r0, #32768	; 0x8000
    2e28:	01005445 	tsteq	r0, r5, asr #8
    2e2c:	0f940900 	svceq	0x00940900
    2e30:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    2e34:	0000d401 	andeq	sp, r0, r1, lsl #8
    2e38:	10dd0900 	sbcsne	r0, sp, r0, lsl #18
    2e3c:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    2e40:	0000d401 	andeq	sp, r0, r1, lsl #8
    2e44:	04010600 	streq	r0, [r1], #-1536	; 0x600
    2e48:	011801f9 			; <UNDEFINED> instruction: 0x011801f9
    2e4c:	f3070000 	vhadd.u8	d0, d7, d0
    2e50:	00000003 	andeq	r0, r0, r3
    2e54:	00040507 	andeq	r0, r4, r7, lsl #10
    2e58:	09000100 	stmdbeq	r0, {r8}
    2e5c:	00000528 	andeq	r0, r0, r8, lsr #10
    2e60:	0201f904 	andeq	pc, r1, #4, 18	; 0x10000
    2e64:	0a000001 	beq	2e70 <_Min_Stack_Size+0x2a70>
    2e68:	0526041c 	streq	r0, [r6, #-1052]!	; 0x41c
    2e6c:	000001e2 	andeq	r0, r0, r2, ror #3
    2e70:	0052530b 	subseq	r5, r2, fp, lsl #6
    2e74:	ca052804 	bgt	14ce8c <_Min_Stack_Size+0x14ca8c>
    2e78:	00000000 	andeq	r0, r0, r0
    2e7c:	0004320c 	andeq	r3, r4, ip, lsl #4
    2e80:	05290400 	streq	r0, [r9, #-1024]!	; 0x400
    2e84:	000000a2 	andeq	r0, r0, r2, lsr #1
    2e88:	52440b02 	subpl	r0, r4, #2048	; 0x800
    2e8c:	052a0400 	streq	r0, [sl, #-1024]!	; 0x400
    2e90:	000000ca 	andeq	r0, r0, sl, asr #1
    2e94:	043c0c04 	ldrteq	r0, [ip], #-3076	; 0xc04
    2e98:	2b040000 	blcs	102ea0 <_Min_Stack_Size+0x102aa0>
    2e9c:	0000a205 	andeq	sl, r0, r5, lsl #4
    2ea0:	420b0600 	andmi	r0, fp, #0, 12
    2ea4:	04005252 	streq	r5, [r0], #-594	; 0x252
    2ea8:	00ca052c 	sbceq	r0, sl, ip, lsr #10
    2eac:	0c080000 	stceq	0, cr0, [r8], {-0}
    2eb0:	00000446 	andeq	r0, r0, r6, asr #8
    2eb4:	a2052d04 	andge	r2, r5, #4, 26	; 0x100
    2eb8:	0a000000 	beq	2ec0 <_Min_Stack_Size+0x2ac0>
    2ebc:	3152430b 	cmpcc	r2, fp, lsl #6
    2ec0:	052e0400 	streq	r0, [lr, #-1024]!	; 0x400
    2ec4:	000000ca 	andeq	r0, r0, sl, asr #1
    2ec8:	04500c0c 	ldrbeq	r0, [r0], #-3084	; 0xc0c
    2ecc:	2f040000 	svccs	0x00040000
    2ed0:	0000a205 	andeq	sl, r0, r5, lsl #4
    2ed4:	430b0e00 	movwmi	r0, #48640	; 0xbe00
    2ed8:	04003252 	streq	r3, [r0], #-594	; 0x252
    2edc:	00ca0530 	sbceq	r0, sl, r0, lsr r5
    2ee0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    2ee4:	0000045a 	andeq	r0, r0, sl, asr r4
    2ee8:	a2053104 	andge	r3, r5, #4, 2
    2eec:	12000000 	andne	r0, r0, #0
    2ef0:	3352430b 	cmpcc	r2, #738197504	; 0x2c000000
    2ef4:	05320400 	ldreq	r0, [r2, #-1024]!	; 0x400
    2ef8:	000000ca 	andeq	r0, r0, sl, asr #1
    2efc:	04640c14 	strbteq	r0, [r4], #-3092	; 0xc14
    2f00:	33040000 	movwcc	r0, #16384	; 0x4000
    2f04:	0000a205 	andeq	sl, r0, r5, lsl #4
    2f08:	0f0c1600 	svceq	0x000c1600
    2f0c:	04000003 	streq	r0, [r0], #-3
    2f10:	00ca0534 	sbceq	r0, sl, r4, lsr r5
    2f14:	0c180000 	ldceq	0, cr0, [r8], {-0}
    2f18:	0000046e 	andeq	r0, r0, lr, ror #8
    2f1c:	a2053504 	andge	r3, r5, #4, 10	; 0x1000000
    2f20:	1a000000 	bne	2f28 <_Min_Stack_Size+0x2b28>
    2f24:	00a40900 	adceq	r0, r4, r0, lsl #18
    2f28:	36040000 	strcc	r0, [r4], -r0
    2f2c:	00012405 	andeq	r2, r1, r5, lsl #8
    2f30:	05100d00 	ldreq	r0, [r0, #-3328]	; 0xd00
    2f34:	00022730 	andeq	r2, r2, r0, lsr r7
    2f38:	0c0c0e00 	stceq	14, cr0, [ip], {-0}
    2f3c:	32050000 	andcc	r0, r5, #0
    2f40:	000000b8 	strheq	r0, [r0], -r8
    2f44:	0dcd0e00 	stcleq	14, cr0, [sp]
    2f48:	33050000 	movwcc	r0, #20480	; 0x5000
    2f4c:	000000b8 	strheq	r0, [r0], -r8
    2f50:	10580e04 	subsne	r0, r8, r4, lsl #28
    2f54:	34050000 	strcc	r0, [r5], #-0
    2f58:	000000b8 	strheq	r0, [r0], -r8
    2f5c:	0cda0e08 	ldcleq	14, cr0, [sl], {8}
    2f60:	35050000 	strcc	r0, [r5, #-0]
    2f64:	000000b8 	strheq	r0, [r0], -r8
    2f68:	9b03000c 	blls	c2fa0 <_Min_Stack_Size+0xc2ba0>
    2f6c:	05000011 	streq	r0, [r0, #-17]
    2f70:	0001ee36 	andeq	lr, r1, r6, lsr lr
    2f74:	06100d00 	ldreq	r0, [r0], -r0, lsl #26
    2f78:	00028336 	andeq	r8, r2, r6, lsr r3
    2f7c:	01470e00 	cmpeq	r7, r0, lsl #28
    2f80:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
    2f84:	000000b8 	strheq	r0, [r0], -r8
    2f88:	011d0e00 	tsteq	sp, r0, lsl #28
    2f8c:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
    2f90:	000000a2 	andeq	r0, r0, r2, lsr #1
    2f94:	00b20e04 	adcseq	r0, r2, r4, lsl #28
    2f98:	41060000 	mrsmi	r0, (UNDEF: 6)
    2f9c:	000000a2 	andeq	r0, r0, r2, lsr #1
    2fa0:	03020e06 	movweq	r0, #11782	; 0x2e06
    2fa4:	44060000 	strmi	r0, [r6], #-0
    2fa8:	000000a2 	andeq	r0, r0, r2, lsr #1
    2fac:	03c30e08 	biceq	r0, r3, #8, 28	; 0x80
    2fb0:	4b060000 	blmi	182fb8 <_Min_Stack_Size+0x182bb8>
    2fb4:	000000a2 	andeq	r0, r0, r2, lsr #1
    2fb8:	03920e0a 	orrseq	r0, r2, #10, 28	; 0xa0
    2fbc:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    2fc0:	000000a2 	andeq	r0, r0, r2, lsr #1
    2fc4:	6203000c 	andvs	r0, r3, #12
    2fc8:	06000003 	streq	r0, [r0], -r3
    2fcc:	00023251 	andeq	r3, r2, r1, asr r2
    2fd0:	06080d00 	streq	r0, [r8], -r0, lsl #26
    2fd4:	0002c757 	andeq	ip, r2, r7, asr r7
    2fd8:	14820e00 	strne	r0, [r2], #3584	; 0xe00
    2fdc:	5a060000 	bpl	182fe4 <_Min_Stack_Size+0x182be4>
    2fe0:	000000a2 	andeq	r0, r0, r2, lsr #1
    2fe4:	153f0e00 	ldrne	r0, [pc, #-3584]!	; 21ec <_Min_Stack_Size+0x1dec>
    2fe8:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2fec:	000000a2 	andeq	r0, r0, r2, lsr #1
    2ff0:	11f00e02 	mvnsne	r0, r2, lsl #28
    2ff4:	60060000 	andvs	r0, r6, r0
    2ff8:	000000a2 	andeq	r0, r0, r2, lsr #1
    2ffc:	127b0e04 	rsbsne	r0, fp, #4, 28	; 0x40
    3000:	63060000 	movwvs	r0, #24576	; 0x6000
    3004:	000000a2 	andeq	r0, r0, r2, lsr #1
    3008:	41030006 	tstmi	r3, r6
    300c:	06000012 			; <UNDEFINED> instruction: 0x06000012
    3010:	00028e66 	andeq	r8, r2, r6, ror #28
    3014:	13520f00 	cmpne	r2, #0, 30
    3018:	bb010000 	bllt	43020 <_Min_Stack_Size+0x42c20>
    301c:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
    3020:	0000010c 	andeq	r0, r0, ip, lsl #2
    3024:	048f9c01 	streq	r9, [pc], #3073	; 302c <_Min_Stack_Size+0x2c2c>
    3028:	f6100000 			; <UNDEFINED> instruction: 0xf6100000
    302c:	01000013 	tsteq	r0, r3, lsl r0
    3030:	00048fbb 			; <UNDEFINED> instruction: 0x00048fbb
    3034:	00147900 	andseq	r7, r4, r0, lsl #18
    3038:	0e921100 	fmleqs	f1, f2, f0
    303c:	0b680800 	bleq	1a05044 <_Min_Stack_Size+0x1a04c44>
    3040:	03110000 	tsteq	r1, #0
    3044:	01120000 	tsteq	r2, r0
    3048:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    304c:	40045001 	andmi	r5, r4, r1
    3050:	001f244b 	andseq	r2, pc, fp, asr #8
    3054:	000ea013 	andeq	sl, lr, r3, lsl r0
    3058:	000b6808 	andeq	r6, fp, r8, lsl #16
    305c:	00032c00 	andeq	r2, r3, r0, lsl #24
    3060:	51011200 	mrspl	r1, R9_usr
    3064:	01123001 	tsteq	r2, r1
    3068:	4b400450 	blmi	10041b0 <_Min_Stack_Size+0x1003db0>
    306c:	11001f24 	tstne	r0, r4, lsr #30
    3070:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
    3074:	00000b7f 	andeq	r0, r0, pc, ror fp
    3078:	00000344 	andeq	r0, r0, r4, asr #6
    307c:	01510112 	cmpeq	r1, r2, lsl r1
    3080:	50011231 	andpl	r1, r1, r1, lsr r2
    3084:	13004001 	movwne	r4, #1
    3088:	08000eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp}
    308c:	00000b7f 	andeq	r0, r0, pc, ror fp
    3090:	0000035c 	andeq	r0, r0, ip, asr r3
    3094:	01510112 	cmpeq	r1, r2, lsl r1
    3098:	50011230 	andpl	r1, r1, r0, lsr r2
    309c:	11004001 	tstne	r0, r1
    30a0:	08000ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp}
    30a4:	00000b68 	andeq	r0, r0, r8, ror #22
    30a8:	00000376 	andeq	r0, r0, r6, ror r3
    30ac:	01510112 	cmpeq	r1, r2, lsl r1
    30b0:	50011231 	andpl	r1, r1, r1, lsr r2
    30b4:	243d4003 	ldrtcs	r4, [sp], #-3
    30b8:	0ecc1300 	cdpeq	3, 12, cr1, cr12, cr0, {0}
    30bc:	0b680800 	bleq	1a050c4 <_Min_Stack_Size+0x1a04cc4>
    30c0:	03900000 	orrseq	r0, r0, #0
    30c4:	01120000 	tsteq	r2, r0
    30c8:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    30cc:	40035001 	andmi	r5, r3, r1
    30d0:	1100243d 	tstne	r0, sp, lsr r4
    30d4:	08000ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp}
    30d8:	00000b68 	andeq	r0, r0, r8, ror #22
    30dc:	000003aa 	andeq	r0, r0, sl, lsr #7
    30e0:	01510112 	cmpeq	r1, r2, lsl r1
    30e4:	50011231 	andpl	r1, r1, r1, lsr r2
    30e8:	243e4003 	ldrtcs	r4, [lr], #-3
    30ec:	0ee41300 	cdpeq	3, 14, cr1, cr4, cr0, {0}
    30f0:	0b680800 	bleq	1a050f8 <_Min_Stack_Size+0x1a04cf8>
    30f4:	03c40000 	biceq	r0, r4, #0
    30f8:	01120000 	tsteq	r2, r0
    30fc:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    3100:	40035001 	andmi	r5, r3, r1
    3104:	1100243e 	tstne	r0, lr, lsr r4
    3108:	08000eee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, fp}
    310c:	00000b68 	andeq	r0, r0, r8, ror #22
    3110:	000003de 	ldrdeq	r0, [r0], -lr
    3114:	01510112 	cmpeq	r1, r2, lsl r1
    3118:	50011231 	andpl	r1, r1, r1, lsr r2
    311c:	243f4003 	ldrtcs	r4, [pc], #-3	; 3124 <_Min_Stack_Size+0x2d24>
    3120:	0efc1300 	cdpeq	3, 15, cr1, cr12, cr0, {0}
    3124:	0b680800 	bleq	1a0512c <_Min_Stack_Size+0x1a04d2c>
    3128:	03f80000 	mvnseq	r0, #0
    312c:	01120000 	tsteq	r2, r0
    3130:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    3134:	40035001 	andmi	r5, r3, r1
    3138:	1100243f 	tstne	r0, pc, lsr r4
    313c:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
    3140:	00000b68 	andeq	r0, r0, r8, ror #22
    3144:	00000412 	andeq	r0, r0, r2, lsl r4
    3148:	01510112 	cmpeq	r1, r2, lsl r1
    314c:	50011231 	andpl	r1, r1, r1, lsr r2
    3150:	24404003 	strbcs	r4, [r0], #-3
    3154:	0f141300 	svceq	0x00141300
    3158:	0b680800 	bleq	1a05160 <_Min_Stack_Size+0x1a04d60>
    315c:	042c0000 	strteq	r0, [ip], #-0
    3160:	01120000 	tsteq	r2, r0
    3164:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    3168:	40035001 	andmi	r5, r3, r1
    316c:	11002440 	tstne	r0, r0, asr #8
    3170:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
    3174:	00000b7f 	andeq	r0, r0, pc, ror fp
    3178:	00000445 	andeq	r0, r0, r5, asr #8
    317c:	01510112 	cmpeq	r1, r2, lsl r1
    3180:	50011231 	andpl	r1, r1, r1, lsr r2
    3184:	00200802 	eoreq	r0, r0, r2, lsl #16
    3188:	000f2813 	andeq	r2, pc, r3, lsl r8	; <UNPREDICTABLE>
    318c:	000b7f08 	andeq	r7, fp, r8, lsl #30
    3190:	00045e00 	andeq	r5, r4, r0, lsl #28
    3194:	51011200 	mrspl	r1, R9_usr
    3198:	01123001 	tsteq	r2, r1
    319c:	20080250 	andcs	r0, r8, r0, asr r2
    31a0:	0f321100 	svceq	0x00321100
    31a4:	0b680800 	bleq	1a051ac <_Min_Stack_Size+0x1a04dac>
    31a8:	04780000 	ldrbteq	r0, [r8], #-0
    31ac:	01120000 	tsteq	r2, r0
    31b0:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    31b4:	40035001 	andmi	r5, r3, r1
    31b8:	1400244a 	strne	r2, [r0], #-1098	; 0x44a
    31bc:	08000f40 	stmdaeq	r0, {r6, r8, r9, sl, fp}
    31c0:	00000b68 	andeq	r0, r0, r8, ror #22
    31c4:	01510112 	cmpeq	r1, r2, lsl r1
    31c8:	50011230 	andpl	r1, r1, r0, lsr r2
    31cc:	244a4003 	strbcs	r4, [sl], #-3
    31d0:	04150000 	ldreq	r0, [r5], #-0
    31d4:	000001e2 	andeq	r0, r0, r2, ror #3
    31d8:	0000670f 	andeq	r6, r0, pc, lsl #14
    31dc:	60f60100 	rscsvs	r0, r6, r0, lsl #2
    31e0:	c408000f 	strgt	r0, [r8], #-15
    31e4:	01000000 	mrseq	r0, (UNDEF: 0)
    31e8:	0005239c 	muleq	r5, ip, r3
    31ec:	13f61000 	mvnsne	r1, #0
    31f0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    31f4:	0000048f 	andeq	r0, r0, pc, lsl #9
    31f8:	00001549 	andeq	r1, r0, r9, asr #10
    31fc:	0014c510 	andseq	ip, r4, r0, lsl r5
    3200:	23f60100 	mvnscs	r0, #0, 2
    3204:	75000005 	strvc	r0, [r0, #-5]
    3208:	16000015 			; <UNDEFINED> instruction: 0x16000015
    320c:	00000cd3 	ldrdeq	r0, [r0], -r3
    3210:	00b8f801 	adcseq	pc, r8, r1, lsl #16
    3214:	15ba0000 	ldrne	r0, [sl, #0]!
    3218:	98160000 	ldmdals	r6, {}	; <UNPREDICTABLE>
    321c:	01000012 	tsteq	r0, r2, lsl r0
    3220:	0000b8f8 	strdeq	fp, [r0], -r8
    3224:	00166b00 	andseq	r6, r6, r0, lsl #22
    3228:	11e11600 	mvnne	r1, r0, lsl #12
    322c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    3230:	000000b8 	strheq	r0, [r0], -r8
    3234:	000016a1 	andeq	r1, r0, r1, lsr #13
    3238:	00149c16 	andseq	r9, r4, r6, lsl ip
    323c:	b8fa0100 	ldmlt	sl!, {r8}^
    3240:	cc000000 	stcgt	0, cr0, [r0], {-0}
    3244:	17000016 	smladne	r0, r6, r0, r0
    3248:	000014d6 	ldrdeq	r1, [r0], -r6
    324c:	0227fb01 	eoreq	pc, r7, #1024	; 0x400
    3250:	91020000 	mrsls	r0, (UNDEF: 2)
    3254:	0fa61858 	svceq	0x00a61858
    3258:	0b960800 	bleq	fe585260 <_estack+0xde555260>
    325c:	01120000 	tsteq	r2, r0
    3260:	007d0250 	rsbseq	r0, sp, r0, asr r2
    3264:	04150000 	ldreq	r0, [r5], #-0
    3268:	00000283 	andeq	r0, r0, r3, lsl #5
    326c:	00151e19 	andseq	r1, r5, r9, lsl lr
    3270:	01670100 	cmneq	r7, r0, lsl #2
    3274:	08001024 	stmdaeq	r0, {r2, r5, ip}
    3278:	00000016 	andeq	r0, r0, r6, lsl r0
    327c:	054e9c01 	strbeq	r9, [lr, #-3073]	; 0xc01
    3280:	c51a0000 	ldrgt	r0, [sl, #-0]
    3284:	01000014 	tsteq	r0, r4, lsl r0
    3288:	05230167 	streq	r0, [r3, #-359]!	; 0x167
    328c:	50010000 	andpl	r0, r1, r0
    3290:	14e71900 	strbtne	r1, [r7], #2304	; 0x900
    3294:	7b010000 	blvc	4329c <_Min_Stack_Size+0x42e9c>
    3298:	00103c01 	andseq	r3, r0, r1, lsl #24
    329c:	00002208 	andeq	r2, r0, r8, lsl #4
    32a0:	939c0100 	orrsls	r0, ip, #0, 2
    32a4:	1a000005 	bne	32c0 <_Min_Stack_Size+0x2ec0>
    32a8:	000013f6 	strdeq	r1, [r0], -r6
    32ac:	8f017b01 	svchi	0x00017b01
    32b0:	01000004 	tsteq	r0, r4
    32b4:	135f1b50 	cmpne	pc, #80, 22	; 0x14000
    32b8:	7b010000 	blvc	432c0 <_Min_Stack_Size+0x42ec0>
    32bc:	00059301 	andeq	r9, r5, r1, lsl #6
    32c0:	00170200 	andseq	r0, r7, r0, lsl #4
    32c4:	0cd31c00 	ldcleq	12, cr1, [r3], {0}
    32c8:	7d010000 	stcvc	0, cr0, [r1, #-0]
    32cc:	0000b801 	andeq	fp, r0, r1, lsl #16
    32d0:	00172300 	andseq	r2, r7, r0, lsl #6
    32d4:	04150000 	ldreq	r0, [r5], #-0
    32d8:	000002c7 	andeq	r0, r0, r7, asr #5
    32dc:	00137519 	andseq	r7, r3, r9, lsl r5
    32e0:	019a0100 	orrseq	r0, sl, r0, lsl #2
    32e4:	08001060 	stmdaeq	r0, {r5, r6, ip}
    32e8:	0000000c 	andeq	r0, r0, ip
    32ec:	05be9c01 	ldreq	r9, [lr, #3073]!	; 0xc01
    32f0:	5f1a0000 	svcpl	0x001a0000
    32f4:	01000013 	tsteq	r0, r3, lsl r0
    32f8:	0593019a 	ldreq	r0, [r3, #410]	; 0x19a
    32fc:	50010000 	andpl	r0, r1, r0
    3300:	00e31900 	rsceq	r1, r3, r0, lsl #18
    3304:	ab010000 	blge	4330c <_Min_Stack_Size+0x42f0c>
    3308:	00106c01 	andseq	r6, r0, r1, lsl #24
    330c:	00001a08 	andeq	r1, r0, r8, lsl #20
    3310:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    3314:	1a000005 	bne	3330 <_Min_Stack_Size+0x2f30>
    3318:	000013f6 	strdeq	r1, [r0], -r6
    331c:	8f01ab01 	svchi	0x0001ab01
    3320:	01000004 	tsteq	r0, r4
    3324:	088e1a50 	stmeq	lr, {r4, r6, r9, fp, ip}
    3328:	ab010000 	blge	43330 <_Min_Stack_Size+0x42f30>
    332c:	00011801 	andeq	r1, r1, r1, lsl #16
    3330:	00510100 	subseq	r0, r1, r0, lsl #2
    3334:	00121319 	andseq	r1, r2, r9, lsl r3
    3338:	01c50100 	biceq	r0, r5, r0, lsl #2
    333c:	08001088 	stmdaeq	r0, {r3, r7, ip}
    3340:	00000012 	andeq	r0, r0, r2, lsl r0
    3344:	06269c01 	strteq	r9, [r6], -r1, lsl #24
    3348:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    334c:	01000013 	tsteq	r0, r3, lsl r0
    3350:	048f01c5 	streq	r0, [pc], #453	; 3358 <_Min_Stack_Size+0x2f58>
    3354:	50010000 	andpl	r0, r1, r0
    3358:	00152f1b 	andseq	r2, r5, fp, lsl pc
    335c:	01c50100 	biceq	r0, r5, r0, lsl #2
    3360:	00000097 	muleq	r0, r7, r0
    3364:	00001771 	andeq	r1, r0, r1, ror r7
    3368:	143b1900 	ldrtne	r1, [fp], #-2304	; 0x900
    336c:	da010000 	ble	43374 <_Min_Stack_Size+0x42f74>
    3370:	00109c01 	andseq	r9, r0, r1, lsl #24
    3374:	00001a08 	andeq	r1, r0, r8, lsl #20
    3378:	599c0100 	ldmibpl	ip, {r8}
    337c:	1a000006 	bne	339c <_Min_Stack_Size+0x2f9c>
    3380:	000013f6 	strdeq	r1, [r0], -r6
    3384:	8f01da01 	svchi	0x0001da01
    3388:	01000004 	tsteq	r0, r4
    338c:	088e1a50 	stmeq	lr, {r4, r6, r9, fp, ip}
    3390:	da010000 	ble	43398 <_Min_Stack_Size+0x42f98>
    3394:	00011801 	andeq	r1, r1, r1, lsl #16
    3398:	00510100 	subseq	r0, r1, r0, lsl #2
    339c:	0013fd19 	andseq	pc, r3, r9, lsl sp	; <UNPREDICTABLE>
    33a0:	01f40100 	mvnseq	r0, r0, lsl #2
    33a4:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
    33a8:	0000001a 	andeq	r0, r0, sl, lsl r0
    33ac:	068c9c01 	streq	r9, [ip], r1, lsl #24
    33b0:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    33b4:	01000013 	tsteq	r0, r3, lsl r0
    33b8:	048f01f4 	streq	r0, [pc], #500	; 33c0 <_Min_Stack_Size+0x2fc0>
    33bc:	50010000 	andpl	r0, r1, r0
    33c0:	00088e1a 	andeq	r8, r8, sl, lsl lr
    33c4:	01f40100 	mvnseq	r0, r0, lsl #2
    33c8:	00000118 	andeq	r0, r0, r8, lsl r1
    33cc:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    33d0:	000000f7 	strdeq	r0, [r0], -r7
    33d4:	d4022d01 	strle	r2, [r2], #-3329	; 0xd01
    33d8:	08080010 	stmdaeq	r8, {r4}
    33dc:	01000000 	mrseq	r0, (UNDEF: 0)
    33e0:	0006c19c 	muleq	r6, ip, r1
    33e4:	13f61a00 	mvnsne	r1, #0, 20
    33e8:	2d010000 	stccs	0, cr0, [r1, #-0]
    33ec:	00048f02 	andeq	r8, r4, r2, lsl #30
    33f0:	1b500100 	blne	14037f8 <_Min_Stack_Size+0x14033f8>
    33f4:	00000101 	andeq	r0, r0, r1, lsl #2
    33f8:	a2022d01 	andge	r2, r2, #1, 26	; 0x40
    33fc:	92000000 	andls	r0, r0, #0
    3400:	00000017 	andeq	r0, r0, r7, lsl r0
    3404:	0004f11d 	andeq	pc, r4, sp, lsl r1	; <UNPREDICTABLE>
    3408:	023d0100 	eorseq	r0, sp, #0, 2
    340c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3410:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
    3414:	00000008 	andeq	r0, r0, r8
    3418:	06ec9c01 	strbteq	r9, [ip], r1, lsl #24
    341c:	f61b0000 			; <UNDEFINED> instruction: 0xf61b0000
    3420:	01000013 	tsteq	r0, r3, lsl r0
    3424:	048f023d 	streq	r0, [pc], #573	; 342c <_Min_Stack_Size+0x302c>
    3428:	17b30000 	ldrne	r0, [r3, r0]!
    342c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3430:	000013a6 	andeq	r1, r0, r6, lsr #7
    3434:	e4027101 	str	r7, [r2], #-257	; 0x101
    3438:	16080010 			; <UNDEFINED> instruction: 0x16080010
    343c:	01000000 	mrseq	r0, (UNDEF: 0)
    3440:	0007219c 	muleq	r7, ip, r1
    3444:	13f61a00 	mvnsne	r1, #0, 20
    3448:	71010000 	mrsvc	r0, (UNDEF: 1)
    344c:	00048f02 	andeq	r8, r4, r2, lsl #30
    3450:	1b500100 	blne	1403858 <_Min_Stack_Size+0x1403458>
    3454:	00001426 	andeq	r1, r0, r6, lsr #8
    3458:	97027101 	strls	r7, [r2, -r1, lsl #2]
    345c:	d4000000 	strle	r0, [r0], #-0
    3460:	00000017 	andeq	r0, r0, r7, lsl r0
    3464:	0011fb19 	andseq	pc, r1, r9, lsl fp	; <UNPREDICTABLE>
    3468:	02850100 	addeq	r0, r5, #0, 2
    346c:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
    3470:	0000001a 	andeq	r0, r0, sl, lsl r0
    3474:	07549c01 	ldrbeq	r9, [r4, -r1, lsl #24]
    3478:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    347c:	01000013 	tsteq	r0, r3, lsl r0
    3480:	048f0285 	streq	r0, [pc], #645	; 3488 <_Min_Stack_Size+0x3088>
    3484:	50010000 	andpl	r0, r1, r0
    3488:	00088e1a 	andeq	r8, r8, sl, lsl lr
    348c:	02850100 	addeq	r0, r5, #0, 2
    3490:	00000118 	andeq	r0, r0, r8, lsl r1
    3494:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    3498:	000014f7 	strdeq	r1, [r0], -r7
    349c:	1802a001 	stmdane	r2, {r0, sp, pc}
    34a0:	16080011 			; <UNDEFINED> instruction: 0x16080011
    34a4:	01000000 	mrseq	r0, (UNDEF: 0)
    34a8:	0007899c 	muleq	r7, ip, r9
    34ac:	13f61a00 	mvnsne	r1, #0, 20
    34b0:	a0010000 	andge	r0, r1, r0
    34b4:	00048f02 	andeq	r8, r4, r2, lsl #30
    34b8:	1b500100 	blne	14038c0 <_Min_Stack_Size+0x14034c0>
    34bc:	00001261 	andeq	r1, r0, r1, ror #4
    34c0:	a202a001 	andge	sl, r2, #1
    34c4:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    34c8:	00000017 	andeq	r0, r0, r7, lsl r0
    34cc:	00132619 	andseq	r2, r3, r9, lsl r6
    34d0:	02e50100 	rsceq	r0, r5, #0, 2
    34d4:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
    34d8:	00000016 	andeq	r0, r0, r6, lsl r0
    34dc:	07be9c01 	ldreq	r9, [lr, r1, lsl #24]!
    34e0:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    34e4:	01000013 	tsteq	r0, r3, lsl r0
    34e8:	048f02e5 	streq	r0, [pc], #741	; 34f0 <_Min_Stack_Size+0x30f0>
    34ec:	50010000 	andpl	r0, r1, r0
    34f0:	0012261b 	andseq	r2, r2, fp, lsl r6
    34f4:	02e50100 	rsceq	r0, r5, #0, 2
    34f8:	000000a2 	andeq	r0, r0, r2, lsr #1
    34fc:	00001816 	andeq	r1, r0, r6, lsl r8
    3500:	14641900 	strbtne	r1, [r4], #-2304	; 0x900
    3504:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    3508:	00114802 	andseq	r4, r1, r2, lsl #16
    350c:	00001a08 	andeq	r1, r0, r8, lsl #20
    3510:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    3514:	1a000007 	bne	3538 <_Min_Stack_Size+0x3138>
    3518:	000013f6 	strdeq	r1, [r0], -r6
    351c:	8f02f701 	svchi	0x0002f701
    3520:	01000004 	tsteq	r0, r4
    3524:	088e1a50 	stmeq	lr, {r4, r6, r9, fp, ip}
    3528:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    352c:	00011802 	andeq	r1, r1, r2, lsl #16
    3530:	00510100 	subseq	r0, r1, r0, lsl #2
    3534:	0013ca19 	andseq	ip, r3, r9, lsl sl
    3538:	030f0100 	movweq	r0, #61696	; 0xf100
    353c:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
    3540:	0000000c 	andeq	r0, r0, ip
    3544:	08169c01 	ldmdaeq	r6, {r0, sl, fp, ip, pc}
    3548:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    354c:	01000013 	tsteq	r0, r3, lsl r0
    3550:	048f030f 	streq	r0, [pc], #783	; 3558 <_Min_Stack_Size+0x3158>
    3554:	50010000 	andpl	r0, r1, r0
    3558:	150a1900 	strne	r1, [sl, #-2304]	; 0x900
    355c:	44010000 	strmi	r0, [r1], #-0
    3560:	00117003 	andseq	r7, r1, r3
    3564:	00001a08 	andeq	r1, r0, r8, lsl #20
    3568:	499c0100 	ldmibmi	ip, {r8}
    356c:	1a000008 	bne	3594 <_Min_Stack_Size+0x3194>
    3570:	000013f6 	strdeq	r1, [r0], -r6
    3574:	8f034401 	svchi	0x00034401
    3578:	01000004 	tsteq	r0, r4
    357c:	088e1a50 	stmeq	lr, {r4, r6, r9, fp, ip}
    3580:	44010000 	strmi	r0, [r1], #-0
    3584:	00011803 	andeq	r1, r1, r3, lsl #16
    3588:	00510100 	subseq	r0, r1, r0, lsl #2
    358c:	0013b719 	andseq	fp, r3, r9, lsl r7
    3590:	03980100 	orrseq	r0, r8, #0, 2
    3594:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
    3598:	00000012 	andeq	r0, r0, r2, lsl r0
    359c:	087e9c01 	ldmdaeq	lr!, {r0, sl, fp, ip, pc}^
    35a0:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    35a4:	01000013 	tsteq	r0, r3, lsl r0
    35a8:	048f0398 	streq	r0, [pc], #920	; 35b0 <_Min_Stack_Size+0x31b0>
    35ac:	50010000 	andpl	r0, r1, r0
    35b0:	0012b91b 	andseq	fp, r2, fp, lsl r9
    35b4:	03980100 	orrseq	r0, r8, #0, 2
    35b8:	00000097 	muleq	r0, r7, r0
    35bc:	00001837 	andeq	r1, r0, r7, lsr r8
    35c0:	14131900 	ldrne	r1, [r3], #-2304	; 0x900
    35c4:	ab010000 	blge	435cc <_Min_Stack_Size+0x431cc>
    35c8:	0011a003 	andseq	sl, r1, r3
    35cc:	00001a08 	andeq	r1, r0, r8, lsl #20
    35d0:	b19c0100 	orrslt	r0, ip, r0, lsl #2
    35d4:	1a000008 	bne	35fc <_Min_Stack_Size+0x31fc>
    35d8:	000013f6 	strdeq	r1, [r0], -r6
    35dc:	8f03ab01 	svchi	0x0003ab01
    35e0:	01000004 	tsteq	r0, r4
    35e4:	088e1a50 	stmeq	lr, {r4, r6, r9, fp, ip}
    35e8:	ab010000 	blge	435f0 <_Min_Stack_Size+0x431f0>
    35ec:	00011803 	andeq	r1, r1, r3, lsl #16
    35f0:	00510100 	subseq	r0, r1, r0, lsl #2
    35f4:	0014ae19 	andseq	sl, r4, r9, lsl lr
    35f8:	03c40100 	biceq	r0, r4, #0, 2
    35fc:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
    3600:	0000001a 	andeq	r0, r0, sl, lsl r0
    3604:	08e49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}^
    3608:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    360c:	01000013 	tsteq	r0, r3, lsl r0
    3610:	048f03c4 	streq	r0, [pc], #964	; 3618 <_Min_Stack_Size+0x3218>
    3614:	50010000 	andpl	r0, r1, r0
    3618:	00088e1a 	andeq	r8, r8, sl, lsl lr
    361c:	03c40100 	biceq	r0, r4, #0, 2
    3620:	00000118 	andeq	r0, r0, r8, lsl r1
    3624:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    3628:	00001471 	andeq	r1, r0, r1, ror r4
    362c:	d8040b01 	stmdale	r4, {r0, r8, r9, fp}
    3630:	16080011 			; <UNDEFINED> instruction: 0x16080011
    3634:	01000000 	mrseq	r0, (UNDEF: 0)
    3638:	0009199c 	muleq	r9, ip, r9
    363c:	13f61a00 	mvnsne	r1, #0, 20
    3640:	0b010000 	bleq	43648 <_Min_Stack_Size+0x43248>
    3644:	00048f04 	andeq	r8, r4, r4, lsl #30
    3648:	1b500100 	blne	1403a50 <_Min_Stack_Size+0x1403650>
    364c:	00001289 	andeq	r1, r0, r9, lsl #5
    3650:	a2040b01 	andge	r0, r4, #1024	; 0x400
    3654:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    3658:	00000018 	andeq	r0, r0, r8, lsl r0
    365c:	00148e19 	andseq	r8, r4, r9, lsl lr
    3660:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    3664:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
    3668:	0000001a 	andeq	r0, r0, sl, lsl r0
    366c:	094c9c01 	stmdbeq	ip, {r0, sl, fp, ip, pc}^
    3670:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
    3674:	01000013 	tsteq	r0, r3, lsl r0
    3678:	048f041d 	streq	r0, [pc], #1053	; 3680 <_Min_Stack_Size+0x3280>
    367c:	50010000 	andpl	r0, r1, r0
    3680:	00088e1a 	andeq	r8, r8, sl, lsl lr
    3684:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    3688:	00000118 	andeq	r0, r0, r8, lsl r1
    368c:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    3690:	0000126e 	andeq	r1, r0, lr, ror #4
    3694:	0c044b01 	stceq	11, cr4, [r4], {1}
    3698:	14080012 	strne	r0, [r8], #-18
    369c:	01000000 	mrseq	r0, (UNDEF: 0)
    36a0:	00098f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    36a4:	13f61a00 	mvnsne	r1, #0, 20
    36a8:	4b010000 	blmi	436b0 <_Min_Stack_Size+0x432b0>
    36ac:	00048f04 	andeq	r8, r4, r4, lsl #30
    36b0:	1b500100 	blne	1403ab8 <_Min_Stack_Size+0x14036b8>
    36b4:	000013e9 	andeq	r1, r0, r9, ror #7
    36b8:	a2044b01 	andge	r4, r4, #1024	; 0x400
    36bc:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    36c0:	1a000018 	bne	3728 <_Min_Stack_Size+0x3328>
    36c4:	0000088e 	andeq	r0, r0, lr, lsl #17
    36c8:	18044b01 	stmdane	r4, {r0, r8, r9, fp, lr}
    36cc:	01000001 	tsteq	r0, r1
    36d0:	da190052 	ble	643820 <_Min_Stack_Size+0x643420>
    36d4:	01000013 	tsteq	r0, r3, lsl r0
    36d8:	122004cf 	eorne	r0, r0, #-822083584	; 0xcf000000
    36dc:	003a0800 	eorseq	r0, sl, r0, lsl #16
    36e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36e4:	00000a12 	andeq	r0, r0, r2, lsl sl
    36e8:	0013f61b 	andseq	pc, r3, fp, lsl r6	; <UNPREDICTABLE>
    36ec:	04cf0100 	strbeq	r0, [pc], #256	; 36f4 <_Min_Stack_Size+0x32f4>
    36f0:	0000048f 	andeq	r0, r0, pc, lsl #9
    36f4:	000018b3 			; <UNDEFINED> instruction: 0x000018b3
    36f8:	0012581b 	andseq	r5, r2, fp, lsl r8
    36fc:	04cf0100 	strbeq	r0, [pc], #256	; 3704 <_Min_Stack_Size+0x3304>
    3700:	000000a2 	andeq	r0, r0, r2, lsr #1
    3704:	000018ec 	andeq	r1, r0, ip, ror #17
    3708:	00088e1a 	andeq	r8, r8, sl, lsl lr
    370c:	04cf0100 	strbeq	r0, [pc], #256	; 3714 <_Min_Stack_Size+0x3314>
    3710:	00000118 	andeq	r0, r0, r8, lsl r1
    3714:	511c5201 	tstpl	ip, r1, lsl #4
    3718:	01000015 	tsteq	r0, r5, lsl r0
    371c:	00b804d1 	ldrsbteq	r0, [r8], r1
    3720:	190d0000 	stmdbne	sp, {}	; <UNPREDICTABLE>
    3724:	351c0000 	ldrcc	r0, [ip, #-0]
    3728:	01000014 	tsteq	r0, r4, lsl r0
    372c:	00b804d1 	ldrsbteq	r0, [r8], r1
    3730:	192c0000 	stmdbne	ip!, {}	; <UNPREDICTABLE>
    3734:	4a1c0000 	bmi	70373c <_Min_Stack_Size+0x70333c>
    3738:	01000015 	tsteq	r0, r5, lsl r0
    373c:	00b804d1 	ldrsbteq	r0, [r8], r1
    3740:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    3744:	8b1e0000 	blhi	78374c <_Min_Stack_Size+0x78334c>
    3748:	01000013 	tsteq	r0, r3, lsl r0
    374c:	00b804d2 	ldrsbteq	r0, [r8], r2
    3750:	50010000 	andpl	r0, r1, r0
    3754:	04c31d00 	strbeq	r1, [r3], #3328	; 0xd00
    3758:	0f010000 	svceq	0x00010000
    375c:	0000ea05 	andeq	lr, r0, r5, lsl #20
    3760:	00125c00 	andseq	r5, r2, r0, lsl #24
    3764:	00000c08 	andeq	r0, r0, r8, lsl #24
    3768:	5b9c0100 	blpl	fe703b70 <_estack+0xde6d3b70>
    376c:	1b00000a 	blne	379c <_Min_Stack_Size+0x339c>
    3770:	000013f6 	strdeq	r1, [r0], -r6
    3774:	8f050f01 	svchi	0x00050f01
    3778:	75000004 	strvc	r0, [r0, #-4]
    377c:	1a000019 	bne	37e8 <_Min_Stack_Size+0x33e8>
    3780:	00001347 	andeq	r1, r0, r7, asr #6
    3784:	a2050f01 	andge	r0, r5, #1, 30
    3788:	01000000 	mrseq	r0, (UNDEF: 0)
    378c:	0a521c51 	beq	148a8d8 <_Min_Stack_Size+0x148a4d8>
    3790:	11010000 	mrsne	r0, (UNDEF: 1)
    3794:	0000ea05 	andeq	lr, r0, r5, lsl #20
    3798:	00199600 	andseq	r9, r9, r0, lsl #12
    379c:	96190000 	ldrls	r0, [r9], -r0
    37a0:	01000013 	tsteq	r0, r3, lsl r0
    37a4:	12680540 	rsbne	r0, r8, #64, 10	; 0x10000000
    37a8:	00080800 	andeq	r0, r8, r0, lsl #16
    37ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    37b0:	00000a90 	muleq	r0, r0, sl
    37b4:	0013f61a 	andseq	pc, r3, sl, lsl r6	; <UNPREDICTABLE>
    37b8:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    37bc:	0000048f 	andeq	r0, r0, pc, lsl #9
    37c0:	471b5001 	ldrmi	r5, [fp, -r1]
    37c4:	01000013 	tsteq	r0, r3, lsl r0
    37c8:	00a20540 	adceq	r0, r2, r0, asr #10
    37cc:	19be0000 	ldmibne	lr!, {}	; <UNPREDICTABLE>
    37d0:	1d000000 	stcne	0, cr0, [r0, #-0]
    37d4:	00001452 	andeq	r1, r0, r2, asr r4
    37d8:	f6056201 			; <UNDEFINED> instruction: 0xf6056201
    37dc:	70000000 	andvc	r0, r0, r0
    37e0:	4c080012 	stcmi	0, cr0, [r8], {18}
    37e4:	01000000 	mrseq	r0, (UNDEF: 0)
    37e8:	000b0b9c 	muleq	fp, ip, fp
    37ec:	13f61b00 	mvnsne	r1, #0, 22
    37f0:	62010000 	andvs	r0, r1, #0
    37f4:	00048f05 	andeq	r8, r4, r5, lsl #30
    37f8:	0019df00 	andseq	sp, r9, r0, lsl #30
    37fc:	12581b00 	subsne	r1, r8, #0, 22
    3800:	62010000 	andvs	r0, r1, #0
    3804:	0000a205 	andeq	sl, r0, r5, lsl #4
    3808:	001a2400 	andseq	r2, sl, r0, lsl #8
    380c:	14341c00 	ldrtne	r1, [r4], #-3072	; 0xc00
    3810:	64010000 	strvs	r0, [r1], #-0
    3814:	0000b805 	andeq	fp, r0, r5, lsl #16
    3818:	001a5000 	andseq	r5, sl, r0
    381c:	154a1c00 	strbne	r1, [sl, #-3072]	; 0xc00
    3820:	64010000 	strvs	r0, [r1], #-0
    3824:	0000b805 	andeq	fp, r0, r5, lsl #16
    3828:	001abd00 	andseq	fp, sl, r0, lsl #26
    382c:	15511c00 	ldrbne	r1, [r1, #-3072]	; 0xc00
    3830:	64010000 	strvs	r0, [r1], #-0
    3834:	0000b805 	andeq	fp, r0, r5, lsl #16
    3838:	001b1b00 	andseq	r1, fp, r0, lsl #22
    383c:	0a521c00 	beq	148a844 <_Min_Stack_Size+0x148a444>
    3840:	65010000 	strvs	r0, [r1, #-0]
    3844:	0000f605 	andeq	pc, r0, r5, lsl #12
    3848:	001b7b00 	andseq	r7, fp, r0, lsl #22
    384c:	a1190000 	tstge	r9, r0
    3850:	01000012 	tsteq	r0, r2, lsl r0
    3854:	12bc05ac 	adcsne	r0, ip, #172, 10	; 0x2b000000
    3858:	00100800 	andseq	r0, r0, r0, lsl #16
    385c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3860:	00000b5c 	andeq	r0, r0, ip, asr fp
    3864:	0013f61a 	andseq	pc, r3, sl, lsl r6	; <UNPREDICTABLE>
    3868:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    386c:	0000048f 	andeq	r0, r0, pc, lsl #9
    3870:	581b5001 	ldmdapl	fp, {r0, ip, lr}
    3874:	01000012 	tsteq	r0, r2, lsl r0
    3878:	00a205ac 	adceq	r0, r2, ip, lsr #11
    387c:	1bbd0000 	blne	fef43884 <_estack+0xdef13884>
    3880:	341c0000 	ldrcc	r0, [ip], #-0
    3884:	01000014 	tsteq	r0, r4, lsl r0
    3888:	00a205ae 	adceq	r0, r2, lr, lsr #11
    388c:	1bde0000 	blne	ff783894 <_estack+0xdf753894>
    3890:	4a1f0000 	bmi	7c3898 <_Min_Stack_Size+0x7c3498>
    3894:	01000015 	tsteq	r0, r5, lsl r0
    3898:	00a205ae 	adceq	r0, r2, lr, lsr #11
    389c:	20000000 	andcs	r0, r0, r0
    38a0:	000004a5 	andeq	r0, r0, r5, lsr #9
    38a4:	cf06a707 	svcgt	0x0006a707
    38a8:	21000000 	mrscs	r0, (UNDEF: 0)
    38ac:	00000c2c 	andeq	r0, r0, ip, lsr #24
    38b0:	7f024905 	svcvc	0x00024905
    38b4:	2200000b 	andcs	r0, r0, #11
    38b8:	000000b8 	strheq	r0, [r0], -r8
    38bc:	00011822 	andeq	r1, r1, r2, lsr #16
    38c0:	56210000 	strtpl	r0, [r1], -r0
    38c4:	0500000f 	streq	r0, [r0, #-15]
    38c8:	0b96024a 	bleq	fe5841f8 <_estack+0xde5541f8>
    38cc:	b8220000 	stmdalt	r2!, {}	; <UNPREDICTABLE>
    38d0:	22000000 	andcs	r0, r0, #0
    38d4:	00000118 	andeq	r0, r0, r8, lsl r1
    38d8:	10a92100 	adcne	r2, r9, r0, lsl #2
    38dc:	32050000 	andcc	r0, r5, #0
    38e0:	000ba802 	andeq	sl, fp, r2, lsl #16
    38e4:	0ba82200 	bleq	fea0c0ec <_estack+0xde9dc0ec>
    38e8:	15000000 	strne	r0, [r0, #-0]
    38ec:	00022704 	andeq	r2, r2, r4, lsl #14
    38f0:	02d80000 	sbcseq	r0, r8, #0
    38f4:	00040000 	andeq	r0, r4, r0
    38f8:	00000bea 	andeq	r0, r0, sl, ror #23
    38fc:	01560104 	cmpeq	r6, r4, lsl #2
    3900:	72010000 	andvc	r0, r1, #0
    3904:	21000016 	tstcs	r0, r6, lsl r0
    3908:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    390c:	00000004 	andeq	r0, r0, r4
    3910:	83000000 	movwhi	r0, #0
    3914:	02000019 	andeq	r0, r0, #25
    3918:	03160601 	tsteq	r6, #1048576	; 0x100000
    391c:	da030000 	ble	c3924 <_Min_Stack_Size+0xc3524>
    3920:	02000002 	andeq	r0, r0, #2
    3924:	0000371c 	andeq	r3, r0, ip, lsl r7
    3928:	08010200 	stmdaeq	r1, {r9}
    392c:	00000314 	andeq	r0, r0, r4, lsl r3
    3930:	c1050202 	tstgt	r5, r2, lsl #4
    3934:	02000000 	andeq	r0, r0, #0
    3938:	037f0702 	cmneq	pc, #524288	; 0x80000
    393c:	fb030000 	blx	c3946 <_Min_Stack_Size+0xc3546>
    3940:	02000003 	andeq	r0, r0, #3
    3944:	00005737 	andeq	r5, r0, r7, lsr r7
    3948:	05040200 	streq	r0, [r4, #-512]	; 0x200
    394c:	0000027b 	andeq	r0, r0, fp, ror r2
    3950:	00008e03 	andeq	r8, r0, r3, lsl #28
    3954:	69380200 	ldmdbvs	r8!, {r9}
    3958:	02000000 	andeq	r0, r0, #0
    395c:	02890704 	addeq	r0, r9, #4, 14	; 0x100000
    3960:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3964:	00027605 	andeq	r7, r2, r5, lsl #12
    3968:	07080200 	streq	r0, [r8, -r0, lsl #4]
    396c:	00000284 	andeq	r0, r0, r4, lsl #5
    3970:	69050404 	stmdbvs	r5, {r2, sl}
    3974:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3978:	028e0704 	addeq	r0, lr, #4, 14	; 0x100000
    397c:	dc030000 	stcle	0, cr0, [r3], {-0}
    3980:	03000002 	movweq	r0, #2
    3984:	00002c2a 	andeq	r2, r0, sl, lsr #24
    3988:	03fd0300 	mvnseq	r0, #0, 6
    398c:	41030000 	mrsmi	r0, (UNDEF: 3)
    3990:	0000004c 	andeq	r0, r0, ip, asr #32
    3994:	00009003 	andeq	r9, r0, r3
    3998:	5e420300 	cdppl	3, 4, cr0, cr2, cr0, {0}
    399c:	02000000 	andeq	r0, r0, #0
    39a0:	00720704 	rsbseq	r0, r2, r4, lsl #14
    39a4:	a2050000 	andge	r0, r5, #0
    39a8:	06000000 	streq	r0, [r0], -r0
    39ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    39b0:	000000c9 	andeq	r0, r0, r9, asr #1
    39b4:	0000ad07 	andeq	sl, r0, r7, lsl #26
    39b8:	06000100 	streq	r0, [r0], -r0, lsl #2
    39bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    39c0:	000000d9 	ldrdeq	r0, [r0], -r9
    39c4:	0000ad07 	andeq	sl, r0, r7, lsl #26
    39c8:	05000300 	streq	r0, [r0, #-768]	; 0x300
    39cc:	00000097 	muleq	r0, r7, r0
    39d0:	f7040108 			; <UNDEFINED> instruction: 0xf7040108
    39d4:	0000f401 	andeq	pc, r0, r1, lsl #8
    39d8:	0a000900 	beq	5de0 <_Min_Stack_Size+0x59e0>
    39dc:	0a000000 	beq	39e4 <_Min_Stack_Size+0x35e4>
    39e0:	00544553 	subseq	r4, r4, r3, asr r5
    39e4:	940b0001 	strls	r0, [fp], #-1
    39e8:	0400000f 	streq	r0, [r0], #-15
    39ec:	00de01f7 	ldrsheq	r0, [lr], #23
    39f0:	01080000 	mrseq	r0, (UNDEF: 8)
    39f4:	1601f904 	strne	pc, [r1], -r4, lsl #18
    39f8:	09000001 	stmdbeq	r0, {r0}
    39fc:	000003f3 	strdeq	r0, [r0], -r3
    3a00:	04050900 	streq	r0, [r5], #-2304	; 0x900
    3a04:	00010000 	andeq	r0, r1, r0
    3a08:	0005280b 	andeq	r2, r5, fp, lsl #16
    3a0c:	01f90400 	mvnseq	r0, r0, lsl #8
    3a10:	00000100 	andeq	r0, r0, r0, lsl #2
    3a14:	e604240c 	str	r2, [r4], -ip, lsl #8
    3a18:	00016d03 	andeq	r6, r1, r3, lsl #26
    3a1c:	15c00d00 	strbne	r0, [r0, #3328]	; 0xd00
    3a20:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
    3a24:	0000b403 	andeq	fp, r0, r3, lsl #8
    3a28:	500e0000 	andpl	r0, lr, r0
    3a2c:	0400434d 	streq	r4, [r0], #-845	; 0x34d
    3a30:	00b403e9 	adcseq	r0, r4, r9, ror #7
    3a34:	0d040000 	stceq	0, cr0, [r4, #-0]
    3a38:	00001604 	andeq	r1, r0, r4, lsl #12
    3a3c:	6d03ea04 	vstrvs	s28, [r3, #-16]
    3a40:	08000001 	stmdaeq	r0, {r0}
    3a44:	0015e10d 	andseq	lr, r5, sp, lsl #2
    3a48:	03eb0400 	mvneq	r0, #0, 8
    3a4c:	000000b9 	strheq	r0, [r0], -r9
    3a50:	15ba0d18 	ldrne	r0, [sl, #3352]!	; 0xd18
    3a54:	ec040000 	stc	0, cr0, [r4], {-0}
    3a58:	0000b403 	andeq	fp, r0, r3, lsl #8
    3a5c:	05002000 	streq	r2, [r0, #-0]
    3a60:	000000c9 	andeq	r0, r0, r9, asr #1
    3a64:	00164e0b 	andseq	r4, r6, fp, lsl #28
    3a68:	03ed0400 	mvneq	r0, #0, 8
    3a6c:	00000122 	andeq	r0, r0, r2, lsr #2
    3a70:	0015960f 	andseq	r9, r5, pc, lsl #12
    3a74:	cc640100 	stfgte	f0, [r4], #-0
    3a78:	1a080012 	bne	203ac8 <_Min_Stack_Size+0x2036c8>
    3a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    3a80:	0001c49c 	muleq	r1, ip, r4
    3a84:	12d81000 	sbcsne	r1, r8, #0
    3a88:	02c80800 	sbceq	r0, r8, #0, 16
    3a8c:	01ad0000 			; <UNDEFINED> instruction: 0x01ad0000
    3a90:	01110000 	tsteq	r1, r0
    3a94:	11310151 	teqne	r1, r1, asr r1
    3a98:	0a035001 	beq	d7aa4 <_Min_Stack_Size+0xd76a4>
    3a9c:	12004000 	andne	r4, r0, #0
    3aa0:	080012e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, ip}
    3aa4:	000002c8 	andeq	r0, r0, r8, asr #5
    3aa8:	01510111 	cmpeq	r1, r1, lsl r1
    3aac:	50011130 	andpl	r1, r1, r0, lsr r1
    3ab0:	40000a03 	andmi	r0, r0, r3, lsl #20
    3ab4:	d00f0000 	andle	r0, pc, r0
    3ab8:	01000016 	tsteq	r0, r6, lsl r0
    3abc:	0012e876 	andseq	lr, r2, r6, ror r8
    3ac0:	00000c08 	andeq	r0, r0, r8, lsl #24
    3ac4:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    3ac8:	13000001 	movwne	r0, #1
    3acc:	0000163b 	andeq	r1, r0, fp, lsr r6
    3ad0:	008c7601 	addeq	r7, ip, r1, lsl #12
    3ad4:	50010000 	andpl	r0, r1, r0
    3ad8:	15ea0f00 	strbne	r0, [sl, #3840]!	; 0xf00
    3adc:	8b010000 	blhi	43ae4 <_Min_Stack_Size+0x436e4>
    3ae0:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
    3ae4:	0000000c 	andeq	r0, r0, ip
    3ae8:	020a9c01 	andeq	r9, sl, #256	; 0x100
    3aec:	8e130000 	cdphi	0, 1, cr0, cr3, cr0, {0}
    3af0:	01000008 	tsteq	r0, r8
    3af4:	0001168b 	andeq	r1, r1, fp, lsl #13
    3af8:	00500100 	subseq	r0, r0, r0, lsl #2
    3afc:	0015a40f 	andseq	sl, r5, pc, lsl #8
    3b00:	00a20100 	adceq	r0, r2, r0, lsl #2
    3b04:	2e080013 	mcrcs	0, 0, r0, cr8, cr3, {0}
    3b08:	01000000 	mrseq	r0, (UNDEF: 0)
    3b0c:	00024d9c 	muleq	r2, ip, sp
    3b10:	165d1400 	ldrbne	r1, [sp], -r0, lsl #8
    3b14:	a2010000 	andge	r0, r1, #0
    3b18:	0000008c 	andeq	r0, r0, ip, lsl #1
    3b1c:	00001c05 	andeq	r1, r0, r5, lsl #24
    3b20:	00160b14 	andseq	r0, r6, r4, lsl fp
    3b24:	8ca20100 	stfhis	f0, [r2]
    3b28:	26000000 	strcs	r0, [r0], -r0
    3b2c:	1500001c 	strne	r0, [r0, #-28]
    3b30:	00706d74 	rsbseq	r6, r0, r4, ror sp
    3b34:	00a2a401 	adceq	sl, r2, r1, lsl #8
    3b38:	1c470000 	marne	acc0, r0, r7
    3b3c:	0f000000 	svceq	0x00000000
    3b40:	0000161b 	andeq	r1, r0, fp, lsl r6
    3b44:	1330b701 	teqne	r0, #262144	; 0x40000
    3b48:	000c0800 	andeq	r0, ip, r0, lsl #16
    3b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b50:	00000270 	andeq	r0, r0, r0, ror r2
    3b54:	0015c713 	andseq	ip, r5, r3, lsl r7
    3b58:	a2b70100 	adcsge	r0, r7, #0, 2
    3b5c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b60:	5a0f0050 	bpl	3c3ca8 <_Min_Stack_Size+0x3c38a8>
    3b64:	01000015 	tsteq	r0, r5, lsl r0
    3b68:	00133cc8 	andseq	r3, r3, r8, asr #25
    3b6c:	00000c08 	andeq	r0, r0, r8, lsl #24
    3b70:	939c0100 	orrsls	r0, ip, #0, 2
    3b74:	13000002 	movwne	r0, #2
    3b78:	0000088e 	andeq	r0, r0, lr, lsl #17
    3b7c:	0116c801 	tsteq	r6, r1, lsl #16
    3b80:	50010000 	andpl	r0, r1, r0
    3b84:	15751600 	ldrbne	r1, [r5, #-1536]!	; 0x600
    3b88:	d5010000 	strle	r0, [r1, #-0]
    3b8c:	000000f4 	strdeq	r0, [r0], -r4
    3b90:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
    3b94:	00000010 	andeq	r0, r0, r0, lsl r0
    3b98:	02bc9c01 	adcseq	r9, ip, #256	; 0x100
    3b9c:	52170000 	andspl	r0, r7, #0
    3ba0:	0100000a 	tsteq	r0, sl
    3ba4:	0000f4d7 	ldrdeq	pc, [r0], -r7
    3ba8:	001c8400 	andseq	r8, ip, r0, lsl #8
    3bac:	a5180000 	ldrge	r0, [r8, #-0]
    3bb0:	05000004 	streq	r0, [r0, #-4]
    3bb4:	00d906a7 	sbcseq	r0, r9, r7, lsr #13
    3bb8:	56190000 	ldrpl	r0, [r9], -r0
    3bbc:	0600000f 	streq	r0, [r0], -pc
    3bc0:	a21a024a 	andsge	r0, sl, #-1610612732	; 0xa0000004
    3bc4:	1a000000 	bne	3bcc <_Min_Stack_Size+0x37cc>
    3bc8:	00000116 	andeq	r0, r0, r6, lsl r1
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <_Min_Stack_Size+0x2bfcac>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <_Min_Stack_Size+0x380828>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19
  2c:	0b0b0024 	bleq	2c00c4 <_Min_Stack_Size+0x2bfcc4>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	35050000 	strcc	r0, [r5, #-0]
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	01010600 	tsteq	r1, r0, lsl #12
  40:	13011349 	movwne	r1, #4937	; 0x1349
  44:	21070000 	mrscs	r0, (UNDEF: 7)
  48:	2f134900 	svccs	0x00134900
  4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  50:	0b0b0104 	bleq	2c0468 <_Min_Stack_Size+0x2c0068>
  54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03002809 	movweq	r2, #2057	; 0x809
  60:	000d1c0e 	andeq	r1, sp, lr, lsl #24
  64:	00280a00 	eoreq	r0, r8, r0, lsl #20
  68:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
  6c:	160b0000 	strne	r0, [fp], -r0
  70:	3a0e0300 	bcc	380c78 <_Min_Stack_Size+0x380878>
  74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	0c000013 	stceq	0, cr0, [r0], {19}
  7c:	0b0b0113 	bleq	2c04d0 <_Min_Stack_Size+0x2c00d0>
  80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
  84:	00001301 	andeq	r1, r0, r1, lsl #6
  88:	03000d0d 	movweq	r0, #3341	; 0xd0d
  8c:	3b0b3a0e 	blcc	2ce8cc <_Min_Stack_Size+0x2ce4cc>
  90:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  94:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
  98:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
  a0:	0b381349 	bleq	e04dcc <_Min_Stack_Size+0xe049cc>
  a4:	040f0000 	streq	r0, [pc], #-0	; ac <_Min_Heap_Size+0xac>
  a8:	3a0b0b01 	bcc	2c2cb4 <_Min_Stack_Size+0x2c28b4>
  ac:	010b3b0b 	tsteq	fp, fp, lsl #22
  b0:	10000013 	andne	r0, r0, r3, lsl r0
  b4:	0b0b0113 	bleq	2c0508 <_Min_Stack_Size+0x2c0108>
  b8:	0b3b0b3a 	bleq	ec2da8 <_Min_Stack_Size+0xec29a8>
  bc:	00001301 	andeq	r1, r0, r1, lsl #6
  c0:	03000d11 	movweq	r0, #3345	; 0xd11
  c4:	3b0b3a0e 	blcc	2ce904 <_Min_Stack_Size+0x2ce504>
  c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  cc:	1200000b 	andne	r0, r0, #11
  d0:	0b0b000f 	bleq	2c0114 <_Min_Stack_Size+0x2bfd14>
  d4:	0f130000 	svceq	0x00130000
  d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  dc:	14000013 	strne	r0, [r0], #-19
  e0:	13490026 	movtne	r0, #36902	; 0x9026
  e4:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  e8:	03193f01 	tsteq	r9, #1, 30
  ec:	3b0b3a0e 	blcc	2ce92c <_Min_Stack_Size+0x2ce52c>
  f0:	1119270b 	tstne	r9, fp, lsl #14
  f4:	40061201 	andmi	r1, r6, r1, lsl #4
  f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  fc:	00001301 	andeq	r1, r0, r1, lsl #6
 100:	01828916 	orreq	r8, r2, r6, lsl r9
 104:	31011101 	tstcc	r1, r1, lsl #2
 108:	00130113 	andseq	r0, r3, r3, lsl r1
 10c:	828a1700 	addhi	r1, sl, #0, 14
 110:	18020001 	stmdane	r2, {r0}
 114:	00184291 	mulseq	r8, r1, r2
 118:	82891800 	addhi	r1, r9, #0, 16
 11c:	01110101 	tsteq	r1, r1, lsl #2
 120:	31194295 			; <UNDEFINED> instruction: 0x31194295
 124:	19000013 	stmdbne	r0, {r0, r1, r4}
 128:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 12c:	0b3b0b3a 	bleq	ec2e1c <_Min_Stack_Size+0xec2a1c>
 130:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 134:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
 138:	11010182 	smlabbne	r1, r2, r1, r0
 13c:	00133101 	andseq	r3, r3, r1, lsl #2
 140:	012e1b00 	teqeq	lr, r0, lsl #22
 144:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 148:	0b3b0b3a 	bleq	ec2e38 <_Min_Stack_Size+0xec2a38>
 14c:	0b201927 	bleq	8065f0 <_Min_Stack_Size+0x8061f0>
 150:	00001301 	andeq	r1, r0, r1, lsl #6
 154:	0300051c 	movweq	r0, #1308	; 0x51c
 158:	3b0b3a08 	blcc	2ce980 <_Min_Stack_Size+0x2ce580>
 15c:	0013490b 	andseq	r4, r3, fp, lsl #18
 160:	012e1d00 	teqeq	lr, r0, lsl #26
 164:	01111331 	tsteq	r1, r1, lsr r3
 168:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 16c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 170:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 174:	13310005 	teqne	r1, #5
 178:	00001702 	andeq	r1, r0, r2, lsl #14
 17c:	0300051f 	movweq	r0, #1311	; 0x51f
 180:	3b0b3a08 	blcc	2ce9a8 <_Min_Stack_Size+0x2ce5a8>
 184:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 188:	20000018 	andcs	r0, r0, r8, lsl r0
 18c:	00000018 	andeq	r0, r0, r8, lsl r0
 190:	03003421 	movweq	r3, #1057	; 0x421
 194:	3b0b3a08 	blcc	2ce9bc <_Min_Stack_Size+0x2ce5bc>
 198:	0013490b 	andseq	r4, r3, fp, lsl #18
 19c:	00342200 	eorseq	r2, r4, r0, lsl #4
 1a0:	0b3a0803 	bleq	e821b4 <_Min_Stack_Size+0xe81db4>
 1a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1a8:	00001802 	andeq	r1, r0, r2, lsl #16
 1ac:	03003423 	movweq	r3, #1059	; 0x423
 1b0:	3b0b3a08 	blcc	2ce9d8 <_Min_Stack_Size+0x2ce5d8>
 1b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1b8:	24000017 	strcs	r0, [r0], #-23
 1bc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 1c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c4:	0b590b58 	bleq	1642f2c <_Min_Stack_Size+0x1642b2c>
 1c8:	00001301 	andeq	r1, r0, r1, lsl #6
 1cc:	49002125 	stmdbmi	r0, {r0, r2, r5, r8, sp}
 1d0:	00052f13 	andeq	r2, r5, r3, lsl pc
 1d4:	012e2600 	teqeq	lr, r0, lsl #12
 1d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 1dc:	0b3b0b3a 	bleq	ec2ecc <_Min_Stack_Size+0xec2acc>
 1e0:	13491927 	movtne	r1, #39207	; 0x9927
 1e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1ec:	00130119 	andseq	r0, r3, r9, lsl r1
 1f0:	010b2700 	tsteq	fp, r0, lsl #14
 1f4:	13011755 	movwne	r1, #5973	; 0x1755
 1f8:	89280000 	stmdbhi	r8!, {}	; <UNPREDICTABLE>
 1fc:	11000182 	smlabbne	r0, r2, r1, r0
 200:	00133101 	andseq	r3, r3, r1, lsl #2
 204:	00342900 	eorseq	r2, r4, r0, lsl #18
 208:	0b3a0e03 	bleq	e83a1c <_Min_Stack_Size+0xe8361c>
 20c:	1349053b 	movtne	r0, #38203	; 0x953b
 210:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 214:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 218:	03193f01 	tsteq	r9, #1, 30
 21c:	3b0b3a0e 	blcc	2cea5c <_Min_Stack_Size+0x2ce65c>
 220:	3c192705 	ldccc	7, cr2, [r9], {5}
 224:	00130119 	andseq	r0, r3, r9, lsl r1
 228:	00052b00 	andeq	r2, r5, r0, lsl #22
 22c:	00001349 	andeq	r1, r0, r9, asr #6
 230:	3f012e2c 	svccc	0x00012e2c
 234:	3a0e0319 	bcc	380ea0 <_Min_Stack_Size+0x380aa0>
 238:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 23c:	3c134919 	ldccc	9, cr4, [r3], {25}
 240:	00130119 	andseq	r0, r3, r9, lsl r1
 244:	012e2d00 	teqeq	lr, r0, lsl #26
 248:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 24c:	13491927 	movtne	r1, #39207	; 0x9927
 250:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
 254:	00001301 	andeq	r1, r0, r1, lsl #6
 258:	3f012e2e 	svccc	0x00012e2e
 25c:	3a0e0319 	bcc	380ec8 <_Min_Stack_Size+0x380ac8>
 260:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 264:	3c134919 	ldccc	9, cr4, [r3], {25}
 268:	00000019 	andeq	r0, r0, r9, lsl r0
 26c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 270:	030b130e 	movweq	r1, #45838	; 0xb30e
 274:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
 278:	10011117 	andne	r1, r1, r7, lsl r1
 27c:	02000017 	andeq	r0, r0, #23
 280:	0b0b0024 	bleq	2c0318 <_Min_Stack_Size+0x2bff18>
 284:	0e030b3e 	vmoveq.16	d3[0], r0
 288:	16030000 	strne	r0, [r3], -r0
 28c:	3a0e0300 	bcc	380e94 <_Min_Stack_Size+0x380a94>
 290:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	04000013 	streq	r0, [r0], #-19
 298:	0b0b0024 	bleq	2c0330 <_Min_Stack_Size+0x2bff30>
 29c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2a0:	35050000 	strcc	r0, [r5, #-0]
 2a4:	00134900 	andseq	r4, r3, r0, lsl #18
 2a8:	002e0600 	eoreq	r0, lr, r0, lsl #12
 2ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 2b0:	0b3b0b3a 	bleq	ec2fa0 <_Min_Stack_Size+0xec2ba0>
 2b4:	01111927 	tsteq	r1, r7, lsr #18
 2b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2bc:	00194297 	mulseq	r9, r7, r2
 2c0:	00340700 	eorseq	r0, r4, r0, lsl #14
 2c4:	0b3a0e03 	bleq	e83ad8 <_Min_Stack_Size+0xe836d8>
 2c8:	1349053b 	movtne	r0, #38203	; 0x953b
 2cc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2d0:	01000000 	mrseq	r0, (UNDEF: 0)
 2d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2d8:	0e030b13 	vmoveq.32	d3[0], r0
 2dc:	17550e1b 	smmlane	r5, fp, lr, r0
 2e0:	17100111 			; <UNDEFINED> instruction: 0x17100111
 2e4:	24020000 	strcs	r0, [r2], #-0
 2e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2ec:	000e030b 	andeq	r0, lr, fp, lsl #6
 2f0:	00160300 	andseq	r0, r6, r0, lsl #6
 2f4:	0b3a0e03 	bleq	e83b08 <_Min_Stack_Size+0xe83708>
 2f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2fc:	24040000 	strcs	r0, [r4], #-0
 300:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 304:	0008030b 	andeq	r0, r8, fp, lsl #6
 308:	00350500 	eorseq	r0, r5, r0, lsl #10
 30c:	00001349 	andeq	r1, r0, r9, asr #6
 310:	0b011306 	bleq	44f30 <_Min_Stack_Size+0x44b30>
 314:	3b0b3a0b 	blcc	2ceb48 <_Min_Stack_Size+0x2ce748>
 318:	00130105 	andseq	r0, r3, r5, lsl #2
 31c:	000d0700 	andeq	r0, sp, r0, lsl #14
 320:	0b3a0e03 	bleq	e83b34 <_Min_Stack_Size+0xe83734>
 324:	1349053b 	movtne	r0, #38203	; 0x953b
 328:	00000b38 	andeq	r0, r0, r8, lsr fp
 32c:	03000d08 	movweq	r0, #3336	; 0xd08
 330:	3b0b3a08 	blcc	2ceb58 <_Min_Stack_Size+0x2ce758>
 334:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 338:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 33c:	13490026 	movtne	r0, #36902	; 0x9026
 340:	010a0000 	mrseq	r0, (UNDEF: 10)
 344:	01134901 	tsteq	r3, r1, lsl #18
 348:	0b000013 	bleq	39c <_Min_Heap_Size+0x39c>
 34c:	13490021 	movtne	r0, #36897	; 0x9021
 350:	00000b2f 	andeq	r0, r0, pc, lsr #22
 354:	0300160c 	movweq	r1, #1548	; 0x60c
 358:	3b0b3a0e 	blcc	2ceb98 <_Min_Stack_Size+0x2ce798>
 35c:	00134905 	andseq	r4, r3, r5, lsl #18
 360:	01040d00 	tsteq	r4, r0, lsl #26
 364:	0b3a0b0b 	bleq	e82f98 <_Min_Stack_Size+0xe82b98>
 368:	1301053b 	movwne	r0, #5435	; 0x153b
 36c:	280e0000 	stmdacs	lr, {}	; <UNPREDICTABLE>
 370:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 374:	0f00000d 	svceq	0x0000000d
 378:	08030028 	stmdaeq	r3, {r3, r5}
 37c:	00000d1c 	andeq	r0, r0, ip, lsl sp
 380:	03012e10 	movweq	r2, #7696	; 0x1e10
 384:	3b0b3a0e 	blcc	2cebc4 <_Min_Stack_Size+0x2ce7c4>
 388:	20192705 	andscs	r2, r9, r5, lsl #14
 38c:	0013010b 	andseq	r0, r3, fp, lsl #2
 390:	00341100 	eorseq	r1, r4, r0, lsl #2
 394:	0b3a0e03 	bleq	e83ba8 <_Min_Stack_Size+0xe837a8>
 398:	1349053b 	movtne	r0, #38203	; 0x953b
 39c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 3a0:	03193f01 	tsteq	r9, #1, 30
 3a4:	3b0b3a0e 	blcc	2cebe4 <_Min_Stack_Size+0x2ce7e4>
 3a8:	1119270b 	tstne	r9, fp, lsl #14
 3ac:	40061201 	andmi	r1, r6, r1, lsl #4
 3b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3b4:	00001301 	andeq	r1, r0, r1, lsl #6
 3b8:	31011d13 	tstcc	r1, r3, lsl sp
 3bc:	55015213 	strpl	r5, [r1, #-531]	; 0x213
 3c0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
 3c4:	1400000b 	strne	r0, [r0], #-11
 3c8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 3cc:	34150000 	ldrcc	r0, [r5], #-0
 3d0:	02133100 	andseq	r3, r3, #0, 2
 3d4:	16000018 			; <UNDEFINED> instruction: 0x16000018
 3d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3dc:	0b3a0e03 	bleq	e83bf0 <_Min_Stack_Size+0xe837f0>
 3e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3ec:	00130119 	andseq	r0, r3, r9, lsl r1
 3f0:	00341700 	eorseq	r1, r4, r0, lsl #14
 3f4:	0b3a0803 	bleq	e82408 <_Min_Stack_Size+0xe82008>
 3f8:	1349053b 	movtne	r0, #38203	; 0x953b
 3fc:	00001702 	andeq	r1, r0, r2, lsl #14
 400:	03003418 	movweq	r3, #1048	; 0x418
 404:	3b0b3a0e 	blcc	2cec44 <_Min_Stack_Size+0x2ce844>
 408:	02134905 	andseq	r4, r3, #81920	; 0x14000
 40c:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
 410:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 414:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 418:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 41c:	0000193c 	andeq	r1, r0, ip, lsr r9
 420:	0300341a 	movweq	r3, #1050	; 0x41a
 424:	3b0b3a0e 	blcc	2cec64 <_Min_Stack_Size+0x2ce864>
 428:	3f13490b 	svccc	0x0013490b
 42c:	00180219 	andseq	r0, r8, r9, lsl r2
 430:	11010000 	mrsne	r0, (UNDEF: 1)
 434:	11061000 	mrsne	r1, (UNDEF: 6)
 438:	03011201 	movweq	r1, #4609	; 0x1201
 43c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
 440:	00051308 	andeq	r1, r5, r8, lsl #6
 444:	11010000 	mrsne	r0, (UNDEF: 1)
 448:	55061000 	strpl	r1, [r6, #-0]
 44c:	1b080306 	blne	20106c <_Min_Stack_Size+0x200c6c>
 450:	13082508 	movwne	r2, #34056	; 0x8508
 454:	00000005 	andeq	r0, r0, r5
 458:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 45c:	030b130e 	movweq	r1, #45838	; 0xb30e
 460:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
 464:	10011117 	andne	r1, r1, r7, lsl r1
 468:	02000017 	andeq	r0, r0, #23
 46c:	0b0b0024 	bleq	2c0504 <_Min_Stack_Size+0x2c0104>
 470:	0e030b3e 	vmoveq.16	d3[0], r0
 474:	16030000 	strne	r0, [r3], -r0
 478:	3a0e0300 	bcc	381080 <_Min_Stack_Size+0x380c80>
 47c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 480:	04000013 	streq	r0, [r0], #-19
 484:	0b0b0024 	bleq	2c051c <_Min_Stack_Size+0x2c011c>
 488:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 48c:	13050000 	movwne	r0, #20480	; 0x5000
 490:	3a050b01 	bcc	14309c <_Min_Stack_Size+0x142c9c>
 494:	01053b0b 	tsteq	r5, fp, lsl #22
 498:	06000013 			; <UNDEFINED> instruction: 0x06000013
 49c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 4a4:	0b381349 	bleq	e051d0 <_Min_Stack_Size+0xe04dd0>
 4a8:	0d070000 	stceq	0, cr0, [r7, #-0]
 4ac:	3a0e0300 	bcc	3810b4 <_Min_Stack_Size+0x380cb4>
 4b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b4:	00053813 	andeq	r3, r5, r3, lsl r8
 4b8:	000d0800 	andeq	r0, sp, r0, lsl #16
 4bc:	0b3a0803 	bleq	e824d0 <_Min_Stack_Size+0xe820d0>
 4c0:	1349053b 	movtne	r0, #38203	; 0x953b
 4c4:	00000538 	andeq	r0, r0, r8, lsr r5
 4c8:	49010109 	stmdbmi	r1, {r0, r3, r8}
 4cc:	00130113 	andseq	r0, r3, r3, lsl r1
 4d0:	00210a00 	eoreq	r0, r1, r0, lsl #20
 4d4:	0b2f1349 	bleq	bc5200 <_Min_Stack_Size+0xbc4e00>
 4d8:	350b0000 	strcc	r0, [fp, #-0]
 4dc:	00134900 	andseq	r4, r3, r0, lsl #18
 4e0:	00210c00 	eoreq	r0, r1, r0, lsl #24
 4e4:	052f1349 	streq	r1, [pc, #-841]!	; 1a3 <_Min_Heap_Size+0x1a3>
 4e8:	160d0000 	strne	r0, [sp], -r0
 4ec:	3a0e0300 	bcc	3810f4 <_Min_Stack_Size+0x380cf4>
 4f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 4f8:	0b0b0113 	bleq	2c094c <_Min_Stack_Size+0x2c054c>
 4fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 500:	00001301 	andeq	r1, r0, r1, lsl #6
 504:	03000d0f 	movweq	r0, #3343	; 0xd0f
 508:	3b0b3a08 	blcc	2ced30 <_Min_Stack_Size+0x2ce930>
 50c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 510:	1000000b 	andne	r0, r0, fp
 514:	13490026 	movtne	r0, #36902	; 0x9026
 518:	04110000 	ldreq	r0, [r1], #-0
 51c:	3a0b0b01 	bcc	2c3128 <_Min_Stack_Size+0x2c2d28>
 520:	01053b0b 	tsteq	r5, fp, lsl #22
 524:	12000013 	andne	r0, r0, #19
 528:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 52c:	00000d1c 	andeq	r0, r0, ip, lsl sp
 530:	0b011313 	bleq	45184 <_Min_Stack_Size+0x44d84>
 534:	3b0b3a0b 	blcc	2ced68 <_Min_Stack_Size+0x2ce968>
 538:	0013010b 	andseq	r0, r3, fp, lsl #2
 53c:	000d1400 	andeq	r1, sp, r0, lsl #8
 540:	0b3a0e03 	bleq	e83d54 <_Min_Stack_Size+0xe83954>
 544:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 548:	00000b38 	andeq	r0, r0, r8, lsr fp
 54c:	3f012e15 	svccc	0x00012e15
 550:	3a0e0319 	bcc	3811bc <_Min_Stack_Size+0x380dbc>
 554:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 558:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 55c:	97184006 	ldrls	r4, [r8, -r6]
 560:	13011942 	movwne	r1, #6466	; 0x1942
 564:	05160000 	ldreq	r0, [r6, #-0]
 568:	3a0e0300 	bcc	381170 <_Min_Stack_Size+0x380d70>
 56c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 570:	00170213 	andseq	r0, r7, r3, lsl r2
 574:	00341700 	eorseq	r1, r4, r0, lsl #14
 578:	0b3a0e03 	bleq	e83d8c <_Min_Stack_Size+0xe8398c>
 57c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 580:	00001702 	andeq	r1, r0, r2, lsl #14
 584:	0b000f18 	bleq	41ec <_Min_Stack_Size+0x3dec>
 588:	0013490b 	andseq	r4, r3, fp, lsl #18
 58c:	00051900 	andeq	r1, r5, r0, lsl #18
 590:	0b3a0e03 	bleq	e83da4 <_Min_Stack_Size+0xe839a4>
 594:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 598:	00001802 	andeq	r1, r0, r2, lsl #16
 59c:	0300341a 	movweq	r3, #1050	; 0x41a
 5a0:	3b0b3a0e 	blcc	2cede0 <_Min_Stack_Size+0x2ce9e0>
 5a4:	3f134905 	svccc	0x00134905
 5a8:	00193c19 	andseq	r3, r9, r9, lsl ip
 5ac:	11010000 	mrsne	r0, (UNDEF: 1)
 5b0:	130e2501 	movwne	r2, #58625	; 0xe501
 5b4:	1b0e030b 	blne	3811e8 <_Min_Stack_Size+0x380de8>
 5b8:	1117550e 	tstne	r7, lr, lsl #10
 5bc:	00171001 	andseq	r1, r7, r1
 5c0:	00240200 	eoreq	r0, r4, r0, lsl #4
 5c4:	0b3e0b0b 	bleq	f831f8 <_Min_Stack_Size+0xf82df8>
 5c8:	00000e03 	andeq	r0, r0, r3, lsl #28
 5cc:	03001603 	movweq	r1, #1539	; 0x603
 5d0:	3b0b3a0e 	blcc	2cee10 <_Min_Stack_Size+0x2cea10>
 5d4:	0013490b 	andseq	r4, r3, fp, lsl #18
 5d8:	00240400 	eoreq	r0, r4, r0, lsl #8
 5dc:	0b3e0b0b 	bleq	f83210 <_Min_Stack_Size+0xf82e10>
 5e0:	00000803 	andeq	r0, r0, r3, lsl #16
 5e4:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 5e8:	06000013 			; <UNDEFINED> instruction: 0x06000013
 5ec:	13490101 	movtne	r0, #37121	; 0x9101
 5f0:	00001301 	andeq	r1, r0, r1, lsl #6
 5f4:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 5f8:	000b2f13 	andeq	r2, fp, r3, lsl pc
 5fc:	01040800 	tsteq	r4, r0, lsl #16
 600:	0b3a0b0b 	bleq	e83234 <_Min_Stack_Size+0xe82e34>
 604:	1301053b 	movwne	r0, #5435	; 0x153b
 608:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 60c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 610:	0a00000d 	beq	64c <_Min_Stack_Size+0x24c>
 614:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 618:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 61c:	00001349 	andeq	r1, r0, r9, asr #6
 620:	0b01130b 	bleq	45254 <_Min_Stack_Size+0x44e54>
 624:	3b0b3a0b 	blcc	2cee58 <_Min_Stack_Size+0x2cea58>
 628:	00130105 	andseq	r0, r3, r5, lsl #2
 62c:	000d0c00 	andeq	r0, sp, r0, lsl #24
 630:	0b3a0e03 	bleq	e83e44 <_Min_Stack_Size+0xe83a44>
 634:	1349053b 	movtne	r0, #38203	; 0x953b
 638:	00000b38 	andeq	r0, r0, r8, lsr fp
 63c:	03000d0d 	movweq	r0, #3341	; 0xd0d
 640:	3b0b3a08 	blcc	2cee68 <_Min_Stack_Size+0x2cea68>
 644:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 648:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 64c:	0b0b0104 	bleq	2c0a64 <_Min_Stack_Size+0x2c0664>
 650:	0b3b0b3a 	bleq	ec3340 <_Min_Stack_Size+0xec2f40>
 654:	00001301 	andeq	r1, r0, r1, lsl #6
 658:	0b01130f 	bleq	4529c <_Min_Stack_Size+0x44e9c>
 65c:	3b0b3a0b 	blcc	2cee90 <_Min_Stack_Size+0x2cea90>
 660:	0013010b 	andseq	r0, r3, fp, lsl #2
 664:	000d1000 	andeq	r1, sp, r0
 668:	0b3a0e03 	bleq	e83e7c <_Min_Stack_Size+0xe83a7c>
 66c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 670:	00000b38 	andeq	r0, r0, r8, lsr fp
 674:	3f012e11 	svccc	0x00012e11
 678:	3a0e0319 	bcc	3812e4 <_Min_Stack_Size+0x380ee4>
 67c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 680:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 684:	97184006 	ldrls	r4, [r8, -r6]
 688:	13011942 	movwne	r1, #6466	; 0x1942
 68c:	05120000 	ldreq	r0, [r2, #-0]
 690:	3a0e0300 	bcc	381298 <_Min_Stack_Size+0x380e98>
 694:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 698:	00170213 	andseq	r0, r7, r3, lsl r2
 69c:	82891300 	addhi	r1, r9, #0, 6
 6a0:	01110101 	tsteq	r1, r1, lsl #2
 6a4:	13011331 	movwne	r1, #4913	; 0x1331
 6a8:	8a140000 	bhi	5006b0 <_Min_Stack_Size+0x5002b0>
 6ac:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 6b0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 6b4:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
 6b8:	11010182 	smlabbne	r1, r2, r1, r0
 6bc:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
 6c0:	13011331 	movwne	r1, #4913	; 0x1331
 6c4:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
 6c8:	11010182 	smlabbne	r1, r2, r1, r0
 6cc:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
 6d0:	00001331 	andeq	r1, r0, r1, lsr r3
 6d4:	0b000f17 	bleq	4338 <_Min_Stack_Size+0x3f38>
 6d8:	0013490b 	andseq	r4, r3, fp, lsl #18
 6dc:	00051800 	andeq	r1, r5, r0, lsl #16
 6e0:	0b3a0e03 	bleq	e83ef4 <_Min_Stack_Size+0xe83af4>
 6e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6e8:	00001802 	andeq	r1, r0, r2, lsl #16
 6ec:	03003419 	movweq	r3, #1049	; 0x419
 6f0:	3b0b3a0e 	blcc	2cef30 <_Min_Stack_Size+0x2ceb30>
 6f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6f8:	1a000017 	bne	75c <_Min_Stack_Size+0x35c>
 6fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 700:	0b3b0b3a 	bleq	ec33f0 <_Min_Stack_Size+0xec2ff0>
 704:	17021349 	strne	r1, [r2, -r9, asr #6]
 708:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 70c:	03193f01 	tsteq	r9, #1, 30
 710:	3b0b3a0e 	blcc	2cef50 <_Min_Stack_Size+0x2ceb50>
 714:	11192705 	tstne	r9, r5, lsl #14
 718:	40061201 	andmi	r1, r6, r1, lsl #4
 71c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 720:	00001301 	andeq	r1, r0, r1, lsl #6
 724:	0300051c 	movweq	r0, #1308	; 0x51c
 728:	3b0b3a0e 	blcc	2cef68 <_Min_Stack_Size+0x2ceb68>
 72c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 730:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 734:	08030034 	stmdaeq	r3, {r2, r4, r5}
 738:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 73c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 740:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 744:	03193f01 	tsteq	r9, #1, 30
 748:	3b0b3a0e 	blcc	2cef88 <_Min_Stack_Size+0x2ceb88>
 74c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 750:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 754:	97184006 	ldrls	r4, [r8, -r6]
 758:	13011942 	movwne	r1, #6466	; 0x1942
 75c:	051f0000 	ldreq	r0, [pc, #-0]	; 764 <_Min_Stack_Size+0x364>
 760:	3a0e0300 	bcc	381368 <_Min_Stack_Size+0x380f68>
 764:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 768:	00170213 	andseq	r0, r7, r3, lsl r2
 76c:	00342000 	eorseq	r2, r4, r0
 770:	0b3a0e03 	bleq	e83f84 <_Min_Stack_Size+0xe83b84>
 774:	1349053b 	movtne	r0, #38203	; 0x953b
 778:	00001702 	andeq	r1, r0, r2, lsl #14
 77c:	03003421 	movweq	r3, #1057	; 0x421
 780:	3b0b3a0e 	blcc	2cefc0 <_Min_Stack_Size+0x2cebc0>
 784:	3f134905 	svccc	0x00134905
 788:	00193c19 	andseq	r3, r9, r9, lsl ip
 78c:	012e2200 	teqeq	lr, r0, lsl #4
 790:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 794:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 798:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 79c:	05230000 	streq	r0, [r3, #-0]!
 7a0:	00134900 	andseq	r4, r3, r0, lsl #18
 7a4:	11010000 	mrsne	r0, (UNDEF: 1)
 7a8:	130e2501 	movwne	r2, #58625	; 0xe501
 7ac:	1b0e030b 	blne	3813e0 <_Min_Stack_Size+0x380fe0>
 7b0:	1117550e 	tstne	r7, lr, lsl #10
 7b4:	00171001 	andseq	r1, r7, r1
 7b8:	00240200 	eoreq	r0, r4, r0, lsl #4
 7bc:	0b3e0b0b 	bleq	f833f0 <_Min_Stack_Size+0xf82ff0>
 7c0:	00000e03 	andeq	r0, r0, r3, lsl #28
 7c4:	03001603 	movweq	r1, #1539	; 0x603
 7c8:	3b0b3a0e 	blcc	2cf008 <_Min_Stack_Size+0x2cec08>
 7cc:	0013490b 	andseq	r4, r3, fp, lsl #18
 7d0:	00240400 	eoreq	r0, r4, r0, lsl #8
 7d4:	0b3e0b0b 	bleq	f83408 <_Min_Stack_Size+0xf83008>
 7d8:	00000803 	andeq	r0, r0, r3, lsl #16
 7dc:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 7e0:	06000013 			; <UNDEFINED> instruction: 0x06000013
 7e4:	13490101 	movtne	r0, #37121	; 0x9101
 7e8:	00001301 	andeq	r1, r0, r1, lsl #6
 7ec:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 7f0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 7f4:	01040800 	tsteq	r4, r0, lsl #16
 7f8:	0b3a0b0b 	bleq	e8342c <_Min_Stack_Size+0xe8302c>
 7fc:	1301053b 	movwne	r0, #5435	; 0x153b
 800:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 804:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 808:	0a00000d 	beq	844 <_Min_Stack_Size+0x444>
 80c:	08030028 	stmdaeq	r3, {r3, r5}
 810:	00000d1c 	andeq	r0, r0, ip, lsl sp
 814:	0300160b 	movweq	r1, #1547	; 0x60b
 818:	3b0b3a0e 	blcc	2cf058 <_Min_Stack_Size+0x2cec58>
 81c:	00134905 	andseq	r4, r3, r5, lsl #18
 820:	01130c00 	tsteq	r3, r0, lsl #24
 824:	0b3a0b0b 	bleq	e83458 <_Min_Stack_Size+0xe83058>
 828:	1301053b 	movwne	r0, #5435	; 0x153b
 82c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 830:	3a080300 	bcc	201438 <_Min_Stack_Size+0x201038>
 834:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 838:	000b3813 	andeq	r3, fp, r3, lsl r8
 83c:	000d0e00 	andeq	r0, sp, r0, lsl #28
 840:	0b3a0e03 	bleq	e84054 <_Min_Stack_Size+0xe83c54>
 844:	1349053b 	movtne	r0, #38203	; 0x953b
 848:	00000b38 	andeq	r0, r0, r8, lsr fp
 84c:	0b01130f 	bleq	45490 <_Min_Stack_Size+0x45090>
 850:	3b0b3a0b 	blcc	2cf084 <_Min_Stack_Size+0x2cec84>
 854:	0013010b 	andseq	r0, r3, fp, lsl #2
 858:	000d1000 	andeq	r1, sp, r0
 85c:	0b3a0e03 	bleq	e84070 <_Min_Stack_Size+0xe83c70>
 860:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 864:	00000b38 	andeq	r0, r0, r8, lsr fp
 868:	3f012e11 	svccc	0x00012e11
 86c:	3a0e0319 	bcc	3814d8 <_Min_Stack_Size+0x3810d8>
 870:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 874:	20134919 	andscs	r4, r3, r9, lsl r9
 878:	0013010b 	andseq	r0, r3, fp, lsl #2
 87c:	00051200 	andeq	r1, r5, r0, lsl #4
 880:	0b3a0e03 	bleq	e84094 <_Min_Stack_Size+0xe83c94>
 884:	1349053b 	movtne	r0, #38203	; 0x953b
 888:	34130000 	ldrcc	r0, [r3], #-0
 88c:	3a080300 	bcc	201494 <_Min_Stack_Size+0x201094>
 890:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 894:	14000013 	strne	r0, [r0], #-19
 898:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 89c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 8a0:	00001349 	andeq	r1, r0, r9, asr #6
 8a4:	3f002e15 	svccc	0x00002e15
 8a8:	3a0e0319 	bcc	381514 <_Min_Stack_Size+0x381114>
 8ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 8b4:	97184006 	ldrls	r4, [r8, -r6]
 8b8:	00001942 	andeq	r1, r0, r2, asr #18
 8bc:	3f012e16 	svccc	0x00012e16
 8c0:	3a0e0319 	bcc	38152c <_Min_Stack_Size+0x38112c>
 8c4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 8c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 8cc:	97184006 	ldrls	r4, [r8, -r6]
 8d0:	13011942 	movwne	r1, #6466	; 0x1942
 8d4:	05170000 	ldreq	r0, [r7, #-0]
 8d8:	3a0e0300 	bcc	3814e0 <_Min_Stack_Size+0x3810e0>
 8dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 8e0:	00180213 	andseq	r0, r8, r3, lsl r2
 8e4:	012e1800 	teqeq	lr, r0, lsl #16
 8e8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 8ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 8f0:	13491927 	movtne	r1, #39207	; 0x9927
 8f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8fc:	00130119 	andseq	r0, r3, r9, lsl r1
 900:	00341900 	eorseq	r1, r4, r0, lsl #18
 904:	0b3a0e03 	bleq	e84118 <_Min_Stack_Size+0xe83d18>
 908:	1349053b 	movtne	r0, #38203	; 0x953b
 90c:	00001802 	andeq	r1, r0, r2, lsl #16
 910:	0300341a 	movweq	r3, #1050	; 0x41a
 914:	3b0b3a0e 	blcc	2cf154 <_Min_Stack_Size+0x2ced54>
 918:	02134905 	andseq	r4, r3, #81920	; 0x14000
 91c:	1b000017 	blne	980 <_Min_Stack_Size+0x580>
 920:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 924:	17550152 			; <UNDEFINED> instruction: 0x17550152
 928:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
 92c:	00001301 	andeq	r1, r0, r1, lsl #6
 930:	3100051c 	tstcc	r0, ip, lsl r5
 934:	000b1c13 	andeq	r1, fp, r3, lsl ip
 938:	010b1d00 	tsteq	fp, r0, lsl #26
 93c:	00001755 	andeq	r1, r0, r5, asr r7
 940:	3100341e 	tstcc	r0, lr, lsl r4
 944:	00170213 	andseq	r0, r7, r3, lsl r2
 948:	011d1f00 	tsteq	sp, r0, lsl #30
 94c:	01111331 	tsteq	r1, r1, lsr r3
 950:	0b580612 	bleq	16021a0 <_Min_Stack_Size+0x1601da0>
 954:	00000559 	andeq	r0, r0, r9, asr r5
 958:	31000520 	tstcc	r0, r0, lsr #10
 95c:	00170213 	andseq	r0, r7, r3, lsl r2
 960:	010b2100 	mrseq	r2, (UNDEF: 27)
 964:	06120111 			; <UNDEFINED> instruction: 0x06120111
 968:	05220000 	streq	r0, [r2, #-0]!
 96c:	3a0e0300 	bcc	381574 <_Min_Stack_Size+0x381174>
 970:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 974:	00170213 	andseq	r0, r7, r3, lsl r2
 978:	002e2300 	eoreq	r2, lr, r0, lsl #6
 97c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 980:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 984:	13491927 	movtne	r1, #39207	; 0x9927
 988:	06120111 			; <UNDEFINED> instruction: 0x06120111
 98c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 990:	24000019 	strcs	r0, [r0], #-25
 994:	08030034 	stmdaeq	r3, {r2, r4, r5}
 998:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 99c:	17021349 	strne	r1, [r2, -r9, asr #6]
 9a0:	0f250000 	svceq	0x00250000
 9a4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 9a8:	26000013 			; <UNDEFINED> instruction: 0x26000013
 9ac:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
 9b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9b8:	00130119 	andseq	r0, r3, r9, lsl r1
 9bc:	002e2700 	eoreq	r2, lr, r0, lsl #14
 9c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 9c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 9c8:	01111927 	tsteq	r1, r7, lsr #18
 9cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9d0:	00194297 	mulseq	r9, r7, r2
 9d4:	00342800 	eorseq	r2, r4, r0, lsl #16
 9d8:	0b3a0e03 	bleq	e841ec <_Min_Stack_Size+0xe83dec>
 9dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9e0:	00001802 	andeq	r1, r0, r2, lsl #16
 9e4:	49002629 	stmdbmi	r0, {r0, r3, r5, r9, sl, sp}
 9e8:	2a000013 	bcs	a3c <_Min_Stack_Size+0x63c>
 9ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 9f4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 9f8:	0000193c 	andeq	r1, r0, ip, lsr r9
 9fc:	01110100 	tsteq	r1, r0, lsl #2
 a00:	0b130e25 	bleq	4c429c <_Min_Stack_Size+0x4c3e9c>
 a04:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 a08:	01111755 	tsteq	r1, r5, asr r7
 a0c:	00001710 	andeq	r1, r0, r0, lsl r7
 a10:	0b002402 	bleq	9a20 <_Min_Stack_Size+0x9620>
 a14:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 a18:	0300000e 	movweq	r0, #14
 a1c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 a20:	0b3b0b3a 	bleq	ec3710 <_Min_Stack_Size+0xec3310>
 a24:	00001349 	andeq	r1, r0, r9, asr #6
 a28:	0b002404 	bleq	9a40 <_Min_Stack_Size+0x9640>
 a2c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 a30:	05000008 	streq	r0, [r0, #-8]
 a34:	13490035 	movtne	r0, #36917	; 0x9035
 a38:	04060000 	streq	r0, [r6], #-0
 a3c:	3a0b0b01 	bcc	2c3648 <_Min_Stack_Size+0x2c3248>
 a40:	01053b0b 	tsteq	r5, fp, lsl #22
 a44:	07000013 	smladeq	r0, r3, r0, r0
 a48:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 a4c:	00000d1c 	andeq	r0, r0, ip, lsl sp
 a50:	03002808 	movweq	r2, #2056	; 0x808
 a54:	000d1c08 	andeq	r1, sp, r8, lsl #24
 a58:	00160900 	andseq	r0, r6, r0, lsl #18
 a5c:	0b3a0e03 	bleq	e84270 <_Min_Stack_Size+0xe83e70>
 a60:	1349053b 	movtne	r0, #38203	; 0x953b
 a64:	130a0000 	movwne	r0, #40960	; 0xa000
 a68:	3a0b0b01 	bcc	2c3674 <_Min_Stack_Size+0x2c3274>
 a6c:	01053b0b 	tsteq	r5, fp, lsl #22
 a70:	0b000013 	bleq	ac4 <_Min_Stack_Size+0x6c4>
 a74:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 a78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 a7c:	0b381349 	bleq	e057a8 <_Min_Stack_Size+0xe053a8>
 a80:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 a84:	3a0e0300 	bcc	38168c <_Min_Stack_Size+0x38128c>
 a88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 a8c:	000b3813 	andeq	r3, fp, r3, lsl r8
 a90:	01130d00 	tsteq	r3, r0, lsl #26
 a94:	0b3a0b0b 	bleq	e836c8 <_Min_Stack_Size+0xe832c8>
 a98:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 a9c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 aa0:	3a0e0300 	bcc	3816a8 <_Min_Stack_Size+0x3812a8>
 aa4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 aa8:	000b3813 	andeq	r3, fp, r3, lsl r8
 aac:	012e0f00 	teqeq	lr, r0, lsl #30
 ab0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 ab4:	0b3b0b3a 	bleq	ec37a4 <_Min_Stack_Size+0xec33a4>
 ab8:	01111927 	tsteq	r1, r7, lsr #18
 abc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ac0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 ac4:	10000013 	andne	r0, r0, r3, lsl r0
 ac8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 acc:	0b3b0b3a 	bleq	ec37bc <_Min_Stack_Size+0xec33bc>
 ad0:	17021349 	strne	r1, [r2, -r9, asr #6]
 ad4:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
 ad8:	11010182 	smlabbne	r1, r2, r1, r0
 adc:	01133101 	tsteq	r3, r1, lsl #2
 ae0:	12000013 	andne	r0, r0, #19
 ae4:	0001828a 	andeq	r8, r1, sl, lsl #5
 ae8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 aec:	13000018 	movwne	r0, #24
 af0:	01018289 	smlabbeq	r1, r9, r2, r8
 af4:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
 af8:	01133119 	tsteq	r3, r9, lsl r1
 afc:	14000013 	strne	r0, [r0], #-19
 b00:	01018289 	smlabbeq	r1, r9, r2, r8
 b04:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
 b08:	00133119 	andseq	r3, r3, r9, lsl r1
 b0c:	000f1500 	andeq	r1, pc, r0, lsl #10
 b10:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 b14:	34160000 	ldrcc	r0, [r6], #-0
 b18:	3a0e0300 	bcc	381720 <_Min_Stack_Size+0x381320>
 b1c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b20:	00170213 	andseq	r0, r7, r3, lsl r2
 b24:	00341700 	eorseq	r1, r4, r0, lsl #14
 b28:	0b3a0e03 	bleq	e8433c <_Min_Stack_Size+0xe83f3c>
 b2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b30:	00001802 	andeq	r1, r0, r2, lsl #16
 b34:	01828918 	orreq	r8, r2, r8, lsl r9
 b38:	31011101 	tstcc	r1, r1, lsl #2
 b3c:	19000013 	stmdbne	r0, {r0, r1, r4}
 b40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b44:	0b3a0e03 	bleq	e84358 <_Min_Stack_Size+0xe83f58>
 b48:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 b4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b54:	00130119 	andseq	r0, r3, r9, lsl r1
 b58:	00051a00 	andeq	r1, r5, r0, lsl #20
 b5c:	0b3a0e03 	bleq	e84370 <_Min_Stack_Size+0xe83f70>
 b60:	1349053b 	movtne	r0, #38203	; 0x953b
 b64:	00001802 	andeq	r1, r0, r2, lsl #16
 b68:	0300051b 	movweq	r0, #1307	; 0x51b
 b6c:	3b0b3a0e 	blcc	2cf3ac <_Min_Stack_Size+0x2cefac>
 b70:	02134905 	andseq	r4, r3, #81920	; 0x14000
 b74:	1c000017 	stcne	0, cr0, [r0], {23}
 b78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 b7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 b80:	17021349 	strne	r1, [r2, -r9, asr #6]
 b84:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 b88:	03193f01 	tsteq	r9, #1, 30
 b8c:	3b0b3a0e 	blcc	2cf3cc <_Min_Stack_Size+0x2cefcc>
 b90:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 b94:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 b98:	97184006 	ldrls	r4, [r8, -r6]
 b9c:	13011942 	movwne	r1, #6466	; 0x1942
 ba0:	341e0000 	ldrcc	r0, [lr], #-0
 ba4:	3a0e0300 	bcc	3817ac <_Min_Stack_Size+0x3813ac>
 ba8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 bac:	00180213 	andseq	r0, r8, r3, lsl r2
 bb0:	00341f00 	eorseq	r1, r4, r0, lsl #30
 bb4:	0b3a0e03 	bleq	e843c8 <_Min_Stack_Size+0xe83fc8>
 bb8:	1349053b 	movtne	r0, #38203	; 0x953b
 bbc:	34200000 	strtcc	r0, [r0], #-0
 bc0:	3a0e0300 	bcc	3817c8 <_Min_Stack_Size+0x3813c8>
 bc4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 bc8:	3c193f13 	ldccc	15, cr3, [r9], {19}
 bcc:	21000019 	tstcs	r0, r9, lsl r0
 bd0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 bd4:	0b3a0e03 	bleq	e843e8 <_Min_Stack_Size+0xe83fe8>
 bd8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 bdc:	1301193c 	movwne	r1, #6460	; 0x193c
 be0:	05220000 	streq	r0, [r2, #-0]!
 be4:	00134900 	andseq	r4, r3, r0, lsl #18
 be8:	11010000 	mrsne	r0, (UNDEF: 1)
 bec:	130e2501 	movwne	r2, #58625	; 0xe501
 bf0:	1b0e030b 	blne	381824 <_Min_Stack_Size+0x381424>
 bf4:	1117550e 	tstne	r7, lr, lsl #10
 bf8:	00171001 	andseq	r1, r7, r1
 bfc:	00240200 	eoreq	r0, r4, r0, lsl #4
 c00:	0b3e0b0b 	bleq	f83834 <_Min_Stack_Size+0xf83434>
 c04:	00000e03 	andeq	r0, r0, r3, lsl #28
 c08:	03001603 	movweq	r1, #1539	; 0x603
 c0c:	3b0b3a0e 	blcc	2cf44c <_Min_Stack_Size+0x2cf04c>
 c10:	0013490b 	andseq	r4, r3, fp, lsl #18
 c14:	00240400 	eoreq	r0, r4, r0, lsl #8
 c18:	0b3e0b0b 	bleq	f8384c <_Min_Stack_Size+0xf8344c>
 c1c:	00000803 	andeq	r0, r0, r3, lsl #16
 c20:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 c24:	06000013 			; <UNDEFINED> instruction: 0x06000013
 c28:	13490101 	movtne	r0, #37121	; 0x9101
 c2c:	00001301 	andeq	r1, r0, r1, lsl #6
 c30:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 c34:	000b2f13 	andeq	r2, fp, r3, lsl pc
 c38:	01040800 	tsteq	r4, r0, lsl #16
 c3c:	0b3a0b0b 	bleq	e83870 <_Min_Stack_Size+0xe83470>
 c40:	1301053b 	movwne	r0, #5435	; 0x153b
 c44:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 c48:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 c4c:	0a00000d 	beq	c88 <_Min_Stack_Size+0x888>
 c50:	08030028 	stmdaeq	r3, {r3, r5}
 c54:	00000d1c 	andeq	r0, r0, ip, lsl sp
 c58:	0300160b 	movweq	r1, #1547	; 0x60b
 c5c:	3b0b3a0e 	blcc	2cf49c <_Min_Stack_Size+0x2cf09c>
 c60:	00134905 	andseq	r4, r3, r5, lsl #18
 c64:	01130c00 	tsteq	r3, r0, lsl #24
 c68:	0b3a0b0b 	bleq	e8389c <_Min_Stack_Size+0xe8349c>
 c6c:	1301053b 	movwne	r0, #5435	; 0x153b
 c70:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 c74:	3a0e0300 	bcc	38187c <_Min_Stack_Size+0x38147c>
 c78:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c7c:	000b3813 	andeq	r3, fp, r3, lsl r8
 c80:	000d0e00 	andeq	r0, sp, r0, lsl #28
 c84:	0b3a0803 	bleq	e82c98 <_Min_Stack_Size+0xe82898>
 c88:	1349053b 	movtne	r0, #38203	; 0x953b
 c8c:	00000b38 	andeq	r0, r0, r8, lsr fp
 c90:	3f012e0f 	svccc	0x00012e0f
 c94:	3a0e0319 	bcc	381900 <_Min_Stack_Size+0x381500>
 c98:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 c9c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 ca0:	97184006 	ldrls	r4, [r8, -r6]
 ca4:	13011942 	movwne	r1, #6466	; 0x1942
 ca8:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
 cac:	11010182 	smlabbne	r1, r2, r1, r0
 cb0:	01133101 	tsteq	r3, r1, lsl #2
 cb4:	11000013 	tstne	r0, r3, lsl r0
 cb8:	0001828a 	andeq	r8, r1, sl, lsl #5
 cbc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 cc0:	12000018 	andne	r0, r0, #24
 cc4:	01018289 	smlabbeq	r1, r9, r2, r8
 cc8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
 ccc:	00133119 	andseq	r3, r3, r9, lsl r1
 cd0:	00051300 	andeq	r1, r5, r0, lsl #6
 cd4:	0b3a0e03 	bleq	e844e8 <_Min_Stack_Size+0xe840e8>
 cd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 cdc:	00001802 	andeq	r1, r0, r2, lsl #16
 ce0:	03000514 	movweq	r0, #1300	; 0x514
 ce4:	3b0b3a0e 	blcc	2cf524 <_Min_Stack_Size+0x2cf124>
 ce8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 cec:	15000017 	strne	r0, [r0, #-23]
 cf0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 cf4:	0b3b0b3a 	bleq	ec39e4 <_Min_Stack_Size+0xec35e4>
 cf8:	17021349 	strne	r1, [r2, -r9, asr #6]
 cfc:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 d00:	03193f01 	tsteq	r9, #1, 30
 d04:	3b0b3a0e 	blcc	2cf544 <_Min_Stack_Size+0x2cf144>
 d08:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 d0c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 d10:	97184006 	ldrls	r4, [r8, -r6]
 d14:	13011942 	movwne	r1, #6466	; 0x1942
 d18:	34170000 	ldrcc	r0, [r7], #-0
 d1c:	3a0e0300 	bcc	381924 <_Min_Stack_Size+0x381524>
 d20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d24:	00170213 	andseq	r0, r7, r3, lsl r2
 d28:	00341800 	eorseq	r1, r4, r0, lsl #16
 d2c:	0b3a0e03 	bleq	e84540 <_Min_Stack_Size+0xe84140>
 d30:	1349053b 	movtne	r0, #38203	; 0x953b
 d34:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 d38:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 d3c:	03193f01 	tsteq	r9, #1, 30
 d40:	3b0b3a0e 	blcc	2cf580 <_Min_Stack_Size+0x2cf180>
 d44:	3c192705 	ldccc	7, cr2, [r9], {5}
 d48:	1a000019 	bne	db4 <_Min_Stack_Size+0x9b4>
 d4c:	13490005 	movtne	r0, #36869	; 0x9005
 d50:	Address 0x00000d50 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000260 	stmdaeq	r0, {r5, r6, r9}
       4:	08000268 	stmdaeq	r0, {r3, r5, r6, r9}
       8:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
       c:	84080002 	strhi	r0, [r8], #-2
      10:	03080002 	movweq	r0, #32770	; 0x8002
      14:	9f017400 	svcls	0x00017400
	...
      20:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
      24:	080002b2 	stmdaeq	r0, {r1, r4, r5, r7, r9}
      28:	5e910003 	cdppl	0, 9, cr0, cr1, cr3, {0}
      2c:	0002b29f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
      30:	00030c08 	andeq	r0, r3, r8, lsl #24
      34:	91000308 	tstls	r0, r8, lsl #6
      38:	00009f5d 	andeq	r9, r0, sp, asr pc
      3c:	00000000 	andeq	r0, r0, r0
      40:	02a40000 	adceq	r0, r4, #0
      44:	02b20800 	adcseq	r0, r2, #0, 16
      48:	00020800 	andeq	r0, r2, r0, lsl #16
      4c:	02b29f41 	adcseq	r9, r2, #260	; 0x104
      50:	02b40800 	adcseq	r0, r4, #0, 16
      54:	00020800 	andeq	r0, r2, r0, lsl #16
      58:	02b49f31 	adcseq	r9, r4, #49, 30	; 0xc4
      5c:	030c0800 	movweq	r0, #51200	; 0xc800
      60:	00020800 	andeq	r0, r2, r0, lsl #16
      64:	00009f30 	andeq	r9, r0, r0, lsr pc
      68:	00000000 	andeq	r0, r0, r0
      6c:	02b40000 	adcseq	r0, r4, #0
      70:	02b60800 	adcseq	r0, r6, #0, 16
      74:	00030800 	andeq	r0, r3, r0, lsl #16
      78:	ca9f5d91 	bgt	fe7d76c4 <_estack+0xde7a76c4>
      7c:	ce080002 	cdpgt	0, 0, cr0, cr8, cr2, {0}
      80:	01080002 	tsteq	r8, r2
      84:	02ce5500 	sbceq	r5, lr, #0, 10
      88:	02d40800 	sbcseq	r0, r4, #0, 16
      8c:	00030800 	andeq	r0, r3, r0, lsl #16
      90:	009f7f75 	addseq	r7, pc, r5, ror pc	; <UNPREDICTABLE>
      94:	00000000 	andeq	r0, r0, r0
      98:	ea000000 	b	a0 <_Min_Heap_Size+0xa0>
      9c:	ee080002 	cdp	0, 0, cr0, cr8, cr2, {0}
      a0:	03080002 	movweq	r0, #32770	; 0x8002
      a4:	9f017500 	svcls	0x00017500
      a8:	080002ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9}
      ac:	080002fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9}
      b0:	00550001 	subseq	r0, r5, r1
      b4:	00000000 	andeq	r0, r0, r0
      b8:	46000000 	strmi	r0, [r0], -r0
      bc:	4e080003 	cdpmi	0, 0, cr0, cr8, cr3, {0}
      c0:	01080003 	tsteq	r8, r3
      c4:	03785000 	cmneq	r8, #0
      c8:	03900800 	orrseq	r0, r0, #0, 16
      cc:	00020800 	andeq	r0, r2, r0, lsl #16
      d0:	00009f3a 	andeq	r9, r0, sl, lsr pc
      d4:	00000000 	andeq	r0, r0, r0
      d8:	04c40000 	strbeq	r0, [r4], #0
      dc:	04c80800 	strbeq	r0, [r8], #2048	; 0x800
      e0:	00020800 	andeq	r0, r2, r0, lsl #16
      e4:	04c89f30 	strbeq	r9, [r8], #3888	; 0xf30
      e8:	04cc0800 	strbeq	r0, [ip], #2048	; 0x800
      ec:	00050800 	andeq	r0, r5, r0, lsl #16
      f0:	1a3c0072 	bne	f002c0 <_Min_Stack_Size+0xeffec0>
      f4:	0004cc9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
      f8:	0004d608 	andeq	sp, r4, r8, lsl #12
      fc:	52000108 	andpl	r0, r0, #8, 2
     100:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
     104:	080004ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl}
     108:	00710006 	rsbseq	r0, r1, r6
     10c:	9f1aff08 	svcls	0x001aff08
     110:	080004ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl}
     114:	080004f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl}
     118:	1a520001 	bne	1480124 <_Min_Stack_Size+0x147fd24>
     11c:	1c080005 	stcne	0, cr0, [r8], {5}
     120:	01080005 	tsteq	r8, r5
     124:	00005200 	andeq	r5, r0, r0, lsl #4
     128:	00000000 	andeq	r0, r0, r0
     12c:	04c40000 	strbeq	r0, [r4], #0
     130:	04d60800 	ldrbeq	r0, [r6], #2048	; 0x800
     134:	00020800 	andeq	r0, r2, r0, lsl #16
     138:	04ea9f30 	strbteq	r9, [sl], #3888	; 0xf30
     13c:	05080800 	streq	r0, [r8, #-2048]	; 0x800
     140:	00020800 	andeq	r0, r2, r0, lsl #16
     144:	05089f30 	streq	r9, [r8, #-3888]	; 0xf30
     148:	05180800 	ldreq	r0, [r8, #-2048]	; 0x800
     14c:	00010800 	andeq	r0, r1, r0, lsl #16
     150:	00051a52 	andeq	r1, r5, r2, asr sl
     154:	00053408 	andeq	r3, r5, r8, lsl #8
     158:	30000208 	andcc	r0, r0, r8, lsl #4
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	0004c400 	andeq	ip, r4, r0, lsl #8
     168:	0004d608 	andeq	sp, r4, r8, lsl #12
     16c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     170:	0004ea9f 	muleq	r4, pc, sl	; <UNPREDICTABLE>
     174:	00050c08 	andeq	r0, r5, r8, lsl #24
     178:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     17c:	00050c9f 	muleq	r5, pc, ip	; <UNPREDICTABLE>
     180:	00051008 	andeq	r1, r5, r8
     184:	73000d08 	movwvc	r0, #3336	; 0xd08
     188:	243d4800 	ldrtcs	r4, [sp], #-2048	; 0x800
     18c:	2325401a 	teqcs	r5, #26
     190:	9f243101 	svcls	0x00243101
     194:	0800051a 	stmdaeq	r0, {r1, r3, r4, r8, sl}
     198:	08000534 	stmdaeq	r0, {r2, r4, r5, r8, sl}
     19c:	9f320002 	svcls	0x00320002
	...
     1a8:	080004c4 	stmdaeq	r0, {r2, r6, r7, sl}
     1ac:	080004d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl}
     1b0:	9f300002 	svcls	0x00300002
     1b4:	080004ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl}
     1b8:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
     1bc:	9f300002 	svcls	0x00300002
     1c0:	080004ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl}
     1c4:	0800051a 	stmdaeq	r0, {r1, r3, r4, r8, sl}
     1c8:	00700009 	rsbseq	r0, r0, r9
     1cc:	1a244240 	bne	910ad4 <_Min_Stack_Size+0x9106d4>
     1d0:	1a9f2546 	bne	fe7c96f0 <_estack+0xde7996f0>
     1d4:	34080005 	strcc	r0, [r8], #-5
     1d8:	02080005 	andeq	r0, r8, #5
     1dc:	009f3000 	addseq	r3, pc, r0
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	c4000000 	strgt	r0, [r0], #-0
     1e8:	d6080004 	strle	r0, [r8], -r4
     1ec:	02080004 	andeq	r0, r8, #4
     1f0:	ea9f3200 	b	fe7cc9f8 <_estack+0xde79c9f8>
     1f4:	fc080004 	stc2	0, cr0, [r8], {4}
     1f8:	02080004 	andeq	r0, r8, #4
     1fc:	fc9f3200 	ldc2	2, cr3, [pc], {0}
     200:	1a080004 	bne	200218 <_Min_Stack_Size+0x1ffe18>
     204:	01080005 	tsteq	r8, r5
     208:	051a5100 	ldreq	r5, [sl, #-256]	; 0x100
     20c:	05340800 	ldreq	r0, [r4, #-2048]!	; 0x800
     210:	00020800 	andeq	r0, r2, r0, lsl #16
     214:	00009f32 	andeq	r9, r0, r2, lsr pc
     218:	00000000 	andeq	r0, r0, r0
     21c:	05840000 	streq	r0, [r4]
     220:	05880800 	streq	r0, [r8, #2048]	; 0x800
     224:	00010800 	andeq	r0, r1, r0, lsl #16
     228:	00058850 	andeq	r8, r5, r0, asr r8
     22c:	00059808 	andeq	r9, r5, r8, lsl #16
     230:	f3000408 	vshl.u8	d0, d8, d0
     234:	009f5001 	addseq	r5, pc, r1
     238:	00000000 	andeq	r0, r0, r0
     23c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     240:	ac080005 	stcge	0, cr0, [r8], {5}
     244:	01080005 	tsteq	r8, r5
     248:	05ac5000 	streq	r5, [ip, #0]!
     24c:	05b80800 	ldreq	r0, [r8, #2048]!	; 0x800
     250:	00040800 	andeq	r0, r4, r0, lsl #16
     254:	9f5001f3 	svcls	0x005001f3
     258:	080005b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl}
     25c:	080005f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl}
     260:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
     264:	10080005 	andne	r0, r8, r5
     268:	04080006 	streq	r0, [r8], #-6
     26c:	5001f300 	andpl	pc, r1, r0, lsl #6
     270:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     274:	00000000 	andeq	r0, r0, r0
     278:	00059800 	andeq	r9, r5, r0, lsl #16
     27c:	0005ca08 	andeq	ip, r5, r8, lsl #20
     280:	30000208 	andcc	r0, r0, r8, lsl #4
     284:	0005ca9f 	muleq	r5, pc, sl	; <UNPREDICTABLE>
     288:	0005da08 	andeq	sp, r5, r8, lsl #20
     28c:	52000108 	andpl	r0, r0, #8, 2
     290:	080005dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl}
     294:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
     298:	e0540001 	subs	r0, r4, r1
     29c:	ea080005 	b	2002b8 <_Min_Stack_Size+0x1ffeb8>
     2a0:	01080005 	tsteq	r8, r5
     2a4:	05ec5200 	strbeq	r5, [ip, #512]!	; 0x200
     2a8:	05f80800 	ldrbeq	r0, [r8, #2048]!	; 0x800
     2ac:	00010800 	andeq	r0, r1, r0, lsl #16
     2b0:	00000052 	andeq	r0, r0, r2, asr r0
     2b4:	00000000 	andeq	r0, r0, r0
     2b8:	00059800 	andeq	r9, r5, r0, lsl #16
     2bc:	0005ca08 	andeq	ip, r5, r8, lsl #20
     2c0:	30000208 	andcc	r0, r0, r8, lsl #4
     2c4:	0005ca9f 	muleq	r5, pc, sl	; <UNPREDICTABLE>
     2c8:	0005da08 	andeq	sp, r5, r8, lsl #20
     2cc:	34000508 	strcc	r0, [r0], #-1288	; 0x508
     2d0:	9f1c0072 	svcls	0x001c0072
	...
     2dc:	08000598 	stmdaeq	r0, {r3, r4, r7, r8, sl}
     2e0:	080005ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl}
     2e4:	9f3f0002 	svcls	0x003f0002
     2e8:	080005ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl}
     2ec:	080005da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl}
     2f0:	723f0005 	eorsvc	r0, pc, #5
     2f4:	009f2600 	addseq	r2, pc, r0, lsl #12
     2f8:	00000000 	andeq	r0, r0, r0
     2fc:	10000000 	andne	r0, r0, r0
     300:	1c080006 	stcne	0, cr0, [r8], {6}
     304:	01080006 	tsteq	r8, r6
     308:	061c5000 	ldreq	r5, [ip], -r0
     30c:	06240800 	strteq	r0, [r4], -r0, lsl #16
     310:	00040800 	andeq	r0, r4, r0, lsl #16
     314:	9f5001f3 	svcls	0x005001f3
	...
     320:	08000610 	stmdaeq	r0, {r4, r9, sl}
     324:	08000614 	stmdaeq	r0, {r2, r4, r9, sl}
     328:	14510001 	ldrbne	r0, [r1], #-1
     32c:	24080006 	strcs	r0, [r8], #-6
     330:	04080006 	streq	r0, [r8], #-6
     334:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     338:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     33c:	00000000 	andeq	r0, r0, r0
     340:	00062400 	andeq	r2, r6, r0, lsl #8
     344:	00062e08 	andeq	r2, r6, r8, lsl #28
     348:	50000108 	andpl	r0, r0, r8, lsl #2
     34c:	0800062e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl}
     350:	08000632 	stmdaeq	r0, {r1, r4, r5, r9, sl}
     354:	01f30004 	mvnseq	r0, r4
     358:	06329f50 	shsaxeq	r9, r2, r0
     35c:	06340800 	ldrteq	r0, [r4], -r0, lsl #16
     360:	00010800 	andeq	r0, r1, r0, lsl #16
     364:	00063450 	andeq	r3, r6, r0, asr r4
     368:	00063c08 	andeq	r3, r6, r8, lsl #24
     36c:	f3000408 	vshl.u8	d0, d8, d0
     370:	009f5001 	addseq	r5, pc, r1
     374:	00000000 	andeq	r0, r0, r0
     378:	54000000 	strpl	r0, [r0], #-0
     37c:	9e080006 	cdpls	0, 0, cr0, cr8, cr6, {0}
     380:	01080006 	tsteq	r8, r6
     384:	069e5000 	ldreq	r5, [lr], r0
     388:	06b20800 	ldrteq	r0, [r2], r0, lsl #16
     38c:	00040800 	andeq	r0, r4, r0, lsl #16
     390:	9f5001f3 	svcls	0x005001f3
     394:	080006b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl}
     398:	080006b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl}
     39c:	b4500001 	ldrblt	r0, [r0], #-1
     3a0:	c6080006 	strgt	r0, [r8], -r6
     3a4:	04080006 	streq	r0, [r8], #-6
     3a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     3ac:	0006c69f 	muleq	r6, pc, r6	; <UNPREDICTABLE>
     3b0:	0006c808 	andeq	ip, r6, r8, lsl #16
     3b4:	50000108 	andpl	r0, r0, r8, lsl #2
     3b8:	080006c8 	stmdaeq	r0, {r3, r6, r7, r9, sl}
     3bc:	080006da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl}
     3c0:	01f30004 	mvnseq	r0, r4
     3c4:	06da9f50 			; <UNDEFINED> instruction: 0x06da9f50
     3c8:	06dc0800 	ldrbeq	r0, [ip], r0, lsl #16
     3cc:	00010800 	andeq	r0, r1, r0, lsl #16
     3d0:	0006dc50 	andeq	sp, r6, r0, asr ip
     3d4:	0006ee08 	andeq	lr, r6, r8, lsl #28
     3d8:	f3000408 	vshl.u8	d0, d8, d0
     3dc:	ee9f5001 	cdp	0, 9, cr5, cr15, cr1, {0}
     3e0:	f0080006 			; <UNDEFINED> instruction: 0xf0080006
     3e4:	01080006 	tsteq	r8, r6
     3e8:	06f05000 	ldrbteq	r5, [r0], r0
     3ec:	07020800 	streq	r0, [r2, -r0, lsl #16]
     3f0:	00040800 	andeq	r0, r4, r0, lsl #16
     3f4:	9f5001f3 	svcls	0x005001f3
     3f8:	08000702 	stmdaeq	r0, {r1, r8, r9, sl}
     3fc:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
     400:	04500001 	ldrbeq	r0, [r0], #-1
     404:	16080007 	strne	r0, [r8], -r7
     408:	04080007 	streq	r0, [r8], #-7
     40c:	5001f300 	andpl	pc, r1, r0, lsl #6
     410:	0007169f 	muleq	r7, pc, r6	; <UNPREDICTABLE>
     414:	00071808 	andeq	r1, r7, r8, lsl #16
     418:	50000108 	andpl	r0, r0, r8, lsl #2
     41c:	08000718 	stmdaeq	r0, {r3, r4, r8, r9, sl}
     420:	0800072a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl}
     424:	01f30004 	mvnseq	r0, r4
     428:	072a9f50 			; <UNDEFINED> instruction: 0x072a9f50
     42c:	072c0800 	streq	r0, [ip, -r0, lsl #16]!
     430:	00010800 	andeq	r0, r1, r0, lsl #16
     434:	00072c50 	andeq	r2, r7, r0, asr ip
     438:	00073e08 	andeq	r3, r7, r8, lsl #28
     43c:	f3000408 	vshl.u8	d0, d8, d0
     440:	3e9f5001 	cdpcc	0, 9, cr5, cr15, cr1, {0}
     444:	40080007 	andmi	r0, r8, r7
     448:	01080007 	tsteq	r8, r7
     44c:	07405000 	strbeq	r5, [r0, -r0]
     450:	07520800 	ldrbeq	r0, [r2, -r0, lsl #16]
     454:	00040800 	andeq	r0, r4, r0, lsl #16
     458:	9f5001f3 	svcls	0x005001f3
     45c:	08000752 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl}
     460:	08000756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl}
     464:	56500001 	ldrbpl	r0, [r0], -r1
     468:	6a080007 	bvs	20048c <_Min_Stack_Size+0x20008c>
     46c:	04080007 	streq	r0, [r8], #-7
     470:	5001f300 	andpl	pc, r1, r0, lsl #6
     474:	00076a9f 	muleq	r7, pc, sl	; <UNPREDICTABLE>
     478:	00076e08 	andeq	r6, r7, r8, lsl #28
     47c:	50000108 	andpl	r0, r0, r8, lsl #2
     480:	0800076e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl}
     484:	080007b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl}
     488:	01f30004 	mvnseq	r0, r4
     48c:	00009f50 	andeq	r9, r0, r0, asr pc
     490:	00000000 	andeq	r0, r0, r0
     494:	07b00000 	ldreq	r0, [r0, r0]!
     498:	07c20800 	strbeq	r0, [r2, r0, lsl #16]
     49c:	00020800 	andeq	r0, r2, r0, lsl #16
     4a0:	07c29f30 			; <UNDEFINED> instruction: 0x07c29f30
     4a4:	086c0800 	stmdaeq	ip!, {fp}^
     4a8:	00010800 	andeq	r0, r1, r0, lsl #16
     4ac:	00000053 	andeq	r0, r0, r3, asr r0
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	0007b000 	andeq	fp, r7, r0
     4b8:	0007c208 	andeq	ip, r7, r8, lsl #4
     4bc:	30000208 	andcc	r0, r0, r8, lsl #4
     4c0:	0007c29f 	muleq	r7, pc, r2	; <UNPREDICTABLE>
     4c4:	0007cc08 	andeq	ip, r7, r8, lsl #24
     4c8:	54000108 	strpl	r0, [r0], #-264	; 0x108
     4cc:	080007d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl}
     4d0:	080007e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl}
     4d4:	e4540001 	ldrb	r0, [r4], #-1
     4d8:	1a080007 	bne	2004fc <_Min_Stack_Size+0x2000fc>
     4dc:	06080008 	streq	r0, [r8], -r8
     4e0:	73007700 	movwvc	r7, #1792	; 0x700
     4e4:	1a9f2400 	bne	fe7c94ec <_estack+0xde7994ec>
     4e8:	26080008 	strcs	r0, [r8], -r8
     4ec:	06080008 	streq	r0, [r8], -r8
     4f0:	73007700 	movwvc	r7, #1792	; 0x700
     4f4:	2c9f247f 	cfldrscs	mvf2, [pc], {127}	; 0x7f
     4f8:	6c080008 	stcvs	0, cr0, [r8], {8}
     4fc:	06080008 	streq	r0, [r8], -r8
     500:	73007700 	movwvc	r7, #1792	; 0x700
     504:	009f2400 	addseq	r2, pc, r0, lsl #8
     508:	00000000 	andeq	r0, r0, r0
     50c:	b0000000 	andlt	r0, r0, r0
     510:	c2080007 	andgt	r0, r8, #7
     514:	02080007 	andeq	r0, r8, #7
     518:	c29f3000 	addsgt	r3, pc, #0
     51c:	cc080007 	stcgt	0, cr0, [r8], {7}
     520:	01080007 	tsteq	r8, r7
     524:	07d45500 	ldrbeq	r5, [r4, r0, lsl #10]
     528:	08080800 	stmdaeq	r8, {fp}
     52c:	00010800 	andeq	r0, r1, r0, lsl #16
     530:	00080855 	andeq	r0, r8, r5, asr r8
     534:	00081a08 	andeq	r1, r8, r8, lsl #20
     538:	77000908 	strvc	r0, [r0, -r8, lsl #18]
     53c:	24007300 	strcs	r7, [r0], #-768	; 0x300
     540:	9f1a0076 	svcls	0x001a0076
     544:	0800081a 	stmdaeq	r0, {r1, r3, r4, fp}
     548:	08000826 	stmdaeq	r0, {r1, r2, r5, fp}
     54c:	00770009 	rsbseq	r0, r7, r9
     550:	76247f73 	qsub16vc	r7, r4, r3
     554:	2c9f1a00 	vldmiacs	pc, {s2-s1}
     558:	58080008 	stmdapl	r8, {r3}
     55c:	01080008 	tsteq	r8, r8
     560:	08585500 	ldmdaeq	r8, {r8, sl, ip, lr}^
     564:	086c0800 	stmdaeq	ip!, {fp}^
     568:	00090800 	andeq	r0, r9, r0, lsl #16
     56c:	00730077 	rsbseq	r0, r3, r7, ror r0
     570:	1a007624 	bne	1de08 <_Min_Stack_Size+0x1da08>
     574:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     578:	00000000 	andeq	r0, r0, r0
     57c:	0008a400 	andeq	sl, r8, r0, lsl #8
     580:	0008ae08 	andeq	sl, r8, r8, lsl #28
     584:	50000108 	andpl	r0, r0, r8, lsl #2
     588:	080008ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp}
     58c:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
     590:	01f30004 	mvnseq	r0, r4
     594:	00009f50 	andeq	r9, r0, r0, asr pc
     598:	00000000 	andeq	r0, r0, r0
     59c:	08a40000 	stmiaeq	r4!, {}	; <UNPREDICTABLE>
     5a0:	08a60800 	stmiaeq	r6!, {fp}
     5a4:	00020800 	andeq	r0, r2, r0, lsl #16
     5a8:	08a69f30 	stmiaeq	r6!, {r4, r5, r8, r9, sl, fp, ip, pc}
     5ac:	08b00800 	ldmeq	r0!, {fp}
     5b0:	000c0800 	andeq	r0, ip, r0, lsl #16
     5b4:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
     5b8:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
     5bc:	9f2e301a 	svcls	0x002e301a
	...
     5c8:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
     5cc:	080008b2 	stmdaeq	r0, {r1, r4, r5, r7, fp}
     5d0:	b2500001 	subslt	r0, r0, #1
     5d4:	b6080008 	strlt	r0, [r8], -r8
     5d8:	04080008 	streq	r0, [r8], #-8
     5dc:	5001f300 	andpl	pc, r1, r0, lsl #6
     5e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     5e4:	00000000 	andeq	r0, r0, r0
     5e8:	0008b800 	andeq	fp, r8, r0, lsl #16
     5ec:	0008c208 	andeq	ip, r8, r8, lsl #4
     5f0:	50000108 	andpl	r0, r0, r8, lsl #2
     5f4:	080008c2 	stmdaeq	r0, {r1, r6, r7, fp}
     5f8:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
     5fc:	01f30004 	mvnseq	r0, r4
     600:	00009f50 	andeq	r9, r0, r0, asr pc
     604:	00000000 	andeq	r0, r0, r0
     608:	08b80000 	ldmeq	r8!, {}	; <UNPREDICTABLE>
     60c:	08ba0800 	ldmeq	sl!, {fp}
     610:	00020800 	andeq	r0, r2, r0, lsl #16
     614:	08ba9f30 	ldmeq	sl!, {r4, r5, r8, r9, sl, fp, ip, pc}
     618:	08c40800 	stmiaeq	r4, {fp}^
     61c:	000c0800 	andeq	r0, ip, r0, lsl #16
     620:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
     624:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
     628:	9f2e301a 	svcls	0x002e301a
	...
     634:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
     638:	080008c6 	stmdaeq	r0, {r1, r2, r6, r7, fp}
     63c:	c6500001 	ldrbgt	r0, [r0], -r1
     640:	ca080008 	bgt	200668 <_Min_Stack_Size+0x200268>
     644:	04080008 	streq	r0, [r8], #-8
     648:	5001f300 	andpl	pc, r1, r0, lsl #6
     64c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     650:	00000000 	andeq	r0, r0, r0
     654:	0008e400 	andeq	lr, r8, r0, lsl #8
     658:	0008e808 	andeq	lr, r8, r8, lsl #16
     65c:	51000108 	tstpl	r0, r8, lsl #2
     660:	080008e8 	stmdaeq	r0, {r3, r5, r6, r7, fp}
     664:	080008ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp}
     668:	01f30004 	mvnseq	r0, r4
     66c:	00009f51 	andeq	r9, r0, r1, asr pc
     670:	00000000 	andeq	r0, r0, r0
     674:	08ec0000 	stmiaeq	ip!, {}^	; <UNPREDICTABLE>
     678:	08f20800 	ldmeq	r2!, {fp}^
     67c:	00010800 	andeq	r0, r1, r0, lsl #16
     680:	0008f250 	andeq	pc, r8, r0, asr r2	; <UNPREDICTABLE>
     684:	00091408 	andeq	r1, r9, r8, lsl #8
     688:	f3000408 	vshl.u8	d0, d8, d0
     68c:	009f5001 	addseq	r5, pc, r1
     690:	00000000 	andeq	r0, r0, r0
     694:	ec000000 	stc	0, cr0, [r0], {-0}
     698:	f6080008 			; <UNDEFINED> instruction: 0xf6080008
     69c:	01080008 	tsteq	r8, r8
     6a0:	08f65100 	ldmeq	r6!, {r8, ip, lr}^
     6a4:	09140800 	ldmdbeq	r4, {fp}
     6a8:	00040800 	andeq	r0, r4, r0, lsl #16
     6ac:	9f5101f3 	svcls	0x005101f3
	...
     6b8:	080008ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp}
     6bc:	0800090e 	stmdaeq	r0, {r1, r2, r3, r8, fp}
     6c0:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
     6c4:	14080009 	strne	r0, [r8], #-9
     6c8:	04080009 	streq	r0, [r8], #-9
     6cc:	5201f300 	andpl	pc, r1, #0, 6
     6d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     6d4:	00000000 	andeq	r0, r0, r0
     6d8:	0008ec00 	andeq	lr, r8, r0, lsl #24
     6dc:	0008fa08 	andeq	pc, r8, r8, lsl #20
     6e0:	30000208 	andcc	r0, r0, r8, lsl #4
     6e4:	0008fa9f 	muleq	r8, pc, sl	; <UNPREDICTABLE>
     6e8:	00090e08 	andeq	r0, r9, r8, lsl #28
     6ec:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
     6f0:	1aff0800 	bne	fffc26f8 <_estack+0xdff926f8>
     6f4:	9f240071 	svcls	0x00240071
     6f8:	0800090e 	stmdaeq	r0, {r1, r2, r3, r8, fp}
     6fc:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     700:	01f3000a 	mvnseq	r0, sl
     704:	1aff0852 	bne	fffc2854 <_estack+0xdff92854>
     708:	9f240071 	svcls	0x00240071
	...
     714:	080008ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp}
     718:	08000910 	stmdaeq	r0, {r4, r8, fp}
     71c:	9f300002 	svcls	0x00300002
     720:	08000910 	stmdaeq	r0, {r4, r8, fp}
     724:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     728:	00530001 	subseq	r0, r3, r1
     72c:	00000000 	andeq	r0, r0, r0
     730:	7c000000 	stcvc	0, cr0, [r0], {-0}
     734:	94080009 	strls	r0, [r8], #-9
     738:	02080009 	andeq	r0, r8, #9
     73c:	949f3000 	ldrls	r3, [pc], #0	; 744 <_Min_Stack_Size+0x344>
     740:	98080009 	stmdals	r8, {r0, r3}
     744:	07080009 	streq	r0, [r8, -r9]
     748:	41007000 	mrsmi	r7, (UNDEF: 0)
     74c:	9f1a3125 	svcls	0x001a3125
     750:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     754:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     758:	9f300002 	svcls	0x00300002
	...
     764:	0800097c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp}
     768:	0800097e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp}
     76c:	9f310002 	svcls	0x00310002
     770:	0800097e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp}
     774:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     778:	9f410002 	svcls	0x00410002
	...
     784:	0800097c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp}
     788:	0800097e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp}
     78c:	9f300002 	svcls	0x00300002
     790:	0800097e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp}
     794:	08000980 	stmdaeq	r0, {r7, r8, fp}
     798:	00530001 	subseq	r0, r3, r1
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	7c000000 	stcvc	0, cr0, [r0], {-0}
     7a4:	90080009 	andls	r0, r8, r9
     7a8:	02080009 	andeq	r0, r8, #9
     7ac:	9c9f3000 	ldcls	0, cr3, [pc], {0}
     7b0:	ac080009 	stcge	0, cr0, [r8], {9}
     7b4:	02080009 	andeq	r0, r8, #9
     7b8:	009f3100 	addseq	r3, pc, r0, lsl #2
     7bc:	00000000 	andeq	r0, r0, r0
     7c0:	90000000 	andls	r0, r0, r0
     7c4:	9c080009 	stcls	0, cr0, [r8], {9}
     7c8:	03080009 	movweq	r0, #32777	; 0x8009
     7cc:	9f310800 	svcls	0x00310800
	...
     7d8:	08000990 	stmdaeq	r0, {r4, r7, r8, fp}
     7dc:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
     7e0:	9f310002 	svcls	0x00310002
     7e4:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
     7e8:	0800099c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp}
     7ec:	9f410002 	svcls	0x00410002
	...
     7f8:	08000990 	stmdaeq	r0, {r4, r7, r8, fp}
     7fc:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
     800:	9f300002 	svcls	0x00300002
     804:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
     808:	08000998 	stmdaeq	r0, {r3, r4, r7, r8, fp}
     80c:	00500001 	subseq	r0, r0, r1
     810:	00000000 	andeq	r0, r0, r0
     814:	90000000 	andls	r0, r0, r0
     818:	9c080009 	stcls	0, cr0, [r8], {9}
     81c:	02080009 	andeq	r0, r8, #9
     820:	009f3000 	addseq	r3, pc, r0
     824:	00000000 	andeq	r0, r0, r0
     828:	ac000000 	stcge	0, cr0, [r0], {-0}
     82c:	b8080009 	stmdalt	r8, {r0, r3}
     830:	01080009 	tsteq	r8, r9
     834:	09b85000 	ldmibeq	r8!, {ip, lr}
     838:	09c00800 	stmibeq	r0, {fp}^
     83c:	00040800 	andeq	r0, r4, r0, lsl #16
     840:	9f5001f3 	svcls	0x005001f3
	...
     84c:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     850:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
     854:	9f300002 	svcls	0x00300002
     858:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
     85c:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
     860:	b8520001 	ldmdalt	r2, {r0}^
     864:	c0080009 	andgt	r0, r8, r9
     868:	01080009 	tsteq	r8, r9
     86c:	00005000 	andeq	r5, r0, r0
     870:	00000000 	andeq	r0, r0, r0
     874:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
     878:	0a020800 	beq	82880 <_Min_Stack_Size+0x82480>
     87c:	00010800 	andeq	r0, r1, r0, lsl #16
     880:	000a0250 	andeq	r0, sl, r0, asr r2
     884:	000a1c08 	andeq	r1, sl, r8, lsl #24
     888:	f3000408 	vshl.u8	d0, d8, d0
     88c:	009f5001 	addseq	r5, pc, r1
     890:	00000000 	andeq	r0, r0, r0
     894:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     898:	06080009 	streq	r0, [r8], -r9
     89c:	0108000a 	tsteq	r8, sl
     8a0:	0a065100 	beq	194ca8 <_Min_Stack_Size+0x1948a8>
     8a4:	0a1c0800 	beq	7028ac <_Min_Stack_Size+0x7024ac>
     8a8:	00040800 	andeq	r0, r4, r0, lsl #16
     8ac:	9f5101f3 	svcls	0x005101f3
	...
     8b8:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
     8bc:	08000a0c 	stmdaeq	r0, {r2, r3, r9, fp}
     8c0:	0c520001 	mrrceq	0, 0, r0, r2, cr1
     8c4:	1c08000a 	stcne	0, cr0, [r8], {10}
     8c8:	0408000a 	streq	r0, [r8], #-10
     8cc:	5201f300 	andpl	pc, r1, #0, 6
     8d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8d4:	00000000 	andeq	r0, r0, r0
     8d8:	0009f800 	andeq	pc, r9, r0, lsl #16
     8dc:	000a0408 	andeq	r0, sl, r8, lsl #8
     8e0:	53000108 	movwpl	r0, #264	; 0x108
     8e4:	08000a04 	stmdaeq	r0, {r2, r9, fp}
     8e8:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     8ec:	01f30004 	mvnseq	r0, r4
     8f0:	00009f53 	andeq	r9, r0, r3, asr pc
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
     8fc:	0a120800 	beq	482904 <_Min_Stack_Size+0x482504>
     900:	00020800 	andeq	r0, r2, r0, lsl #16
     904:	00000091 	muleq	r0, r1, r0
     908:	00000000 	andeq	r0, r0, r0
     90c:	0a280000 	beq	a00914 <_Min_Stack_Size+0xa00514>
     910:	0a340800 	beq	d02918 <_Min_Stack_Size+0xd02518>
     914:	00010800 	andeq	r0, r1, r0, lsl #16
     918:	000a3450 	andeq	r3, sl, r0, asr r4
     91c:	000a4008 	andeq	r4, sl, r8
     920:	f3000408 	vshl.u8	d0, d8, d0
     924:	009f5001 	addseq	r5, pc, r1
     928:	00000000 	andeq	r0, r0, r0
     92c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     930:	2e08000a 	cdpcs	0, 0, cr0, cr8, cr10, {0}
     934:	0108000a 	tsteq	r8, sl
     938:	0a2e5100 	beq	b94d40 <_Min_Stack_Size+0xb94940>
     93c:	0a400800 	beq	1002944 <_Min_Stack_Size+0x1002544>
     940:	00040800 	andeq	r0, r4, r0, lsl #16
     944:	9f5101f3 	svcls	0x005101f3
	...
     950:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
     954:	08000a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp}
     958:	2a520001 	bcs	1480964 <_Min_Stack_Size+0x1480564>
     95c:	4008000a 	andmi	r0, r8, sl
     960:	0408000a 	streq	r0, [r8], #-10
     964:	5201f300 	andpl	pc, r1, #0, 6
     968:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     96c:	00000000 	andeq	r0, r0, r0
     970:	000a4c00 	andeq	r4, sl, r0, lsl #24
     974:	000a5808 	andeq	r5, sl, r8, lsl #16
     978:	50000108 	andpl	r0, r0, r8, lsl #2
     97c:	08000a58 	stmdaeq	r0, {r3, r4, r6, r9, fp}
     980:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
     984:	01f30004 	mvnseq	r0, r4
     988:	00009f50 	andeq	r9, r0, r0, asr pc
     98c:	00000000 	andeq	r0, r0, r0
     990:	0a4c0000 	beq	1300998 <_Min_Stack_Size+0x1300598>
     994:	0a520800 	beq	148299c <_Min_Stack_Size+0x148259c>
     998:	00010800 	andeq	r0, r1, r0, lsl #16
     99c:	000a5251 	andeq	r5, sl, r1, asr r2
     9a0:	000a6408 	andeq	r6, sl, r8, lsl #8
     9a4:	f3000408 	vshl.u8	d0, d8, d0
     9a8:	009f5101 	addseq	r5, pc, r1, lsl #2
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	4c000000 	stcmi	0, cr0, [r0], {-0}
     9b4:	4e08000a 	cdpmi	0, 0, cr0, cr8, cr10, {0}
     9b8:	0108000a 	tsteq	r8, sl
     9bc:	0a4e5200 	beq	13951c4 <_Min_Stack_Size+0x1394dc4>
     9c0:	0a640800 	beq	19029c8 <_Min_Stack_Size+0x19025c8>
     9c4:	00040800 	andeq	r0, r4, r0, lsl #16
     9c8:	9f5201f3 	svcls	0x005201f3
	...
     9d4:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
     9d8:	08000a88 	stmdaeq	r0, {r3, r7, r9, fp}
     9dc:	88500001 	ldmdahi	r0, {r0}^
     9e0:	9008000a 	andls	r0, r8, sl
     9e4:	0408000a 	streq	r0, [r8], #-10
     9e8:	5001f300 	andpl	pc, r1, r0, lsl #6
     9ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	000a7c00 	andeq	r7, sl, r0, lsl #24
     9f8:	000a8608 	andeq	r8, sl, r8, lsl #12
     9fc:	51000108 	tstpl	r0, r8, lsl #2
     a00:	08000a86 	stmdaeq	r0, {r1, r2, r7, r9, fp}
     a04:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
     a08:	01f30004 	mvnseq	r0, r4
     a0c:	00009f51 	andeq	r9, r0, r1, asr pc
     a10:	00000000 	andeq	r0, r0, r0
     a14:	0a7c0000 	beq	1f00a1c <_Min_Stack_Size+0x1f0061c>
     a18:	0a800800 	beq	fe002a20 <_estack+0xddfd2a20>
     a1c:	00020800 	andeq	r0, r2, r0, lsl #16
     a20:	0a809f30 	beq	fe0286e8 <_estack+0xddff86e8>
     a24:	0a840800 	beq	fe102a2c <_estack+0xde0d2a2c>
     a28:	00090800 	andeq	r0, r9, r0, lsl #16
     a2c:	ff110072 			; <UNDEFINED> instruction: 0xff110072
     a30:	1a44ffff 	bne	1140a34 <_Min_Stack_Size+0x1140634>
     a34:	000a849f 	muleq	sl, pc, r4	; <UNPREDICTABLE>
     a38:	000a8808 	andeq	r8, sl, r8, lsl #16
     a3c:	52000108 	andpl	r0, r0, #8, 2
     a40:	08000a88 	stmdaeq	r0, {r3, r7, r9, fp}
     a44:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
     a48:	00500001 	subseq	r0, r0, r1
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	90000000 	andls	r0, r0, r0
     a54:	9c08000a 	stcls	0, cr0, [r8], {10}
     a58:	0108000a 	tsteq	r8, sl
     a5c:	0a9c5000 	beq	fe714a64 <_estack+0xde6e4a64>
     a60:	0aa40800 	beq	fe902a68 <_estack+0xde8d2a68>
     a64:	00040800 	andeq	r0, r4, r0, lsl #16
     a68:	9f5001f3 	svcls	0x005001f3
	...
     a74:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
     a78:	08000a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp}
     a7c:	9a510001 	bls	1440a88 <_Min_Stack_Size+0x1440688>
     a80:	a408000a 	strge	r0, [r8], #-10
     a84:	0408000a 	streq	r0, [r8], #-10
     a88:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a90:	00000000 	andeq	r0, r0, r0
     a94:	000a9000 	andeq	r9, sl, r0
     a98:	000a9408 	andeq	r9, sl, r8, lsl #8
     a9c:	30000208 	andcc	r0, r0, r8, lsl #4
     aa0:	000a949f 	muleq	sl, pc, r4	; <UNPREDICTABLE>
     aa4:	000a9808 	andeq	r9, sl, r8, lsl #16
     aa8:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
     aac:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
     ab0:	9f1a07ff 	svcls	0x001a07ff
     ab4:	08000a98 	stmdaeq	r0, {r3, r4, r7, r9, fp}
     ab8:	08000a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp}
     abc:	9c520001 	mrrcls	0, 0, r0, r2, cr1
     ac0:	a408000a 	strge	r0, [r8], #-10
     ac4:	0108000a 	tsteq	r8, sl
     ac8:	00005000 	andeq	r5, r0, r0
     acc:	00000000 	andeq	r0, r0, r0
     ad0:	0aa40000 	beq	fe900ad8 <_estack+0xde8d0ad8>
     ad4:	0aae0800 	beq	feb82adc <_estack+0xdeb52adc>
     ad8:	00010800 	andeq	r0, r1, r0, lsl #16
     adc:	000aae50 	andeq	sl, sl, r0, asr lr
     ae0:	000ab808 	andeq	fp, sl, r8, lsl #16
     ae4:	f3000408 	vshl.u8	d0, d8, d0
     ae8:	009f5001 	addseq	r5, pc, r1
     aec:	00000000 	andeq	r0, r0, r0
     af0:	a4000000 	strge	r0, [r0], #-0
     af4:	a808000a 	stmdage	r8, {r1, r3}
     af8:	0208000a 	andeq	r0, r8, #10
     afc:	a89f3000 	ldmge	pc, {ip, sp}	; <UNPREDICTABLE>
     b00:	ae08000a 	cdpge	0, 0, cr0, cr8, cr10, {0}
     b04:	0108000a 	tsteq	r8, sl
     b08:	0aae5200 	beq	feb95310 <_estack+0xdeb65310>
     b0c:	0ab80800 	beq	fee02b14 <_estack+0xdedd2b14>
     b10:	00010800 	andeq	r0, r1, r0, lsl #16
     b14:	00000050 	andeq	r0, r0, r0, asr r0
     b18:	00000000 	andeq	r0, r0, r0
     b1c:	000ac800 	andeq	ip, sl, r0, lsl #16
     b20:	000ad208 	andeq	sp, sl, r8, lsl #4
     b24:	50000108 	andpl	r0, r0, r8, lsl #2
     b28:	08000ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp}
     b2c:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
     b30:	01f30004 	mvnseq	r0, r4
     b34:	00009f50 	andeq	r9, r0, r0, asr pc
     b38:	00000000 	andeq	r0, r0, r0
     b3c:	0ac80000 	beq	ff200b44 <_estack+0xdf1d0b44>
     b40:	0acc0800 	beq	ff302b48 <_estack+0xdf2d2b48>
     b44:	00020800 	andeq	r0, r2, r0, lsl #16
     b48:	0acc9f30 	beq	ff328810 <_estack+0xdf2f8810>
     b4c:	0ad20800 	beq	ff482b54 <_estack+0xdf452b54>
     b50:	00010800 	andeq	r0, r1, r0, lsl #16
     b54:	000ad252 	andeq	sp, sl, r2, asr r2
     b58:	000adc08 	andeq	sp, sl, r8, lsl #24
     b5c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     b68:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
     b6c:	08000ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp}
     b70:	e6500001 	ldrb	r0, [r0], -r1
     b74:	f008000a 			; <UNDEFINED> instruction: 0xf008000a
     b78:	0408000a 	streq	r0, [r8], #-10
     b7c:	5001f300 	andpl	pc, r1, r0, lsl #6
     b80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b84:	00000000 	andeq	r0, r0, r0
     b88:	000adc00 	andeq	sp, sl, r0, lsl #24
     b8c:	000ae008 	andeq	lr, sl, r8
     b90:	30000208 	andcc	r0, r0, r8, lsl #4
     b94:	000ae09f 	muleq	sl, pc, r0	; <UNPREDICTABLE>
     b98:	000ae608 	andeq	lr, sl, r8, lsl #12
     b9c:	52000108 	andpl	r0, r0, #8, 2
     ba0:	08000ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp}
     ba4:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
     ba8:	00500001 	subseq	r0, r0, r1
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     bb4:	fc08000a 	stc2	0, cr0, [r8], {10}
     bb8:	0108000a 	tsteq	r8, sl
     bbc:	0afc5000 	beq	fff14bc4 <_estack+0xdfee4bc4>
     bc0:	0b040800 	bleq	102bc8 <_Min_Stack_Size+0x1027c8>
     bc4:	00040800 	andeq	r0, r4, r0, lsl #16
     bc8:	9f5001f3 	svcls	0x005001f3
	...
     bd4:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
     bd8:	08000af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp}
     bdc:	9f300002 	svcls	0x00300002
     be0:	08000af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp}
     be4:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
     be8:	fc520001 	mrrc2	0, 0, r0, r2, cr1
     bec:	0408000a 	streq	r0, [r8], #-10
     bf0:	0108000b 	tsteq	r8, fp
     bf4:	00005000 	andeq	r5, r0, r0
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	0b040000 	bleq	100c04 <_Min_Stack_Size+0x100804>
     c00:	0b080800 	bleq	202c08 <_Min_Stack_Size+0x202808>
     c04:	00020800 	andeq	r0, r2, r0, lsl #16
     c08:	0b089f30 	bleq	2288d0 <_Min_Stack_Size+0x2284d0>
     c0c:	0b0c0800 	bleq	302c14 <_Min_Stack_Size+0x302814>
     c10:	00050800 	andeq	r0, r5, r0, lsl #16
     c14:	1a3c0073 	bne	f00de8 <_Min_Stack_Size+0xf009e8>
     c18:	000b0c9f 	muleq	fp, pc, ip	; <UNPREDICTABLE>
     c1c:	000b1808 	andeq	r1, fp, r8, lsl #16
     c20:	53000108 	movwpl	r0, #264	; 0x108
     c24:	08000b20 	stmdaeq	r0, {r5, r8, r9, fp}
     c28:	08000b24 	stmdaeq	r0, {r2, r5, r8, r9, fp}
     c2c:	00740006 	rsbseq	r0, r4, r6
     c30:	9f1af008 	svcls	0x001af008
     c34:	08000b24 	stmdaeq	r0, {r2, r5, r8, r9, fp}
     c38:	08000b26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp}
     c3c:	2c540001 	mrrccs	0, 0, r0, r4, cr1
     c40:	3008000b 	andcc	r0, r8, fp
     c44:	0708000b 	streq	r0, [r8, -fp]
     c48:	0a007400 	beq	1dc50 <_Min_Stack_Size+0x1d850>
     c4c:	9f1a1c00 	svcls	0x001a1c00
     c50:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
     c54:	08000b32 	stmdaeq	r0, {r1, r4, r5, r8, r9, fp}
     c58:	3a540001 	bcc	1500c64 <_Min_Stack_Size+0x1500864>
     c5c:	4208000b 	andmi	r0, r8, #11
     c60:	0708000b 	streq	r0, [r8, -fp]
     c64:	0a007100 	beq	1d06c <_Min_Stack_Size+0x1cc6c>
     c68:	9f1ae000 	svcls	0x001ae000
     c6c:	08000b42 	stmdaeq	r0, {r1, r6, r8, r9, fp}
     c70:	08000b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp}
     c74:	4a510001 	bmi	1440c80 <_Min_Stack_Size+0x1440880>
     c78:	4c08000b 	stcmi	0, cr0, [r8], {11}
     c7c:	0108000b 	tsteq	r8, fp
     c80:	0b505300 	bleq	1415888 <_Min_Stack_Size+0x1415488>
     c84:	0b580800 	bleq	1602c8c <_Min_Stack_Size+0x160288c>
     c88:	00010800 	andeq	r0, r1, r0, lsl #16
     c8c:	00000053 	andeq	r0, r0, r3, asr r0
     c90:	00000000 	andeq	r0, r0, r0
     c94:	000b0400 	andeq	r0, fp, r0, lsl #8
     c98:	000b2608 	andeq	r2, fp, r8, lsl #12
     c9c:	30000208 	andcc	r0, r0, r8, lsl #4
     ca0:	000b269f 	muleq	fp, pc, r6	; <UNPREDICTABLE>
     ca4:	000b2c08 	andeq	r2, fp, r8, lsl #24
     ca8:	74000608 	strvc	r0, [r0], #-1544	; 0x608
     cac:	1aff0800 	bne	fffc2cb4 <_estack+0xdff92cb4>
     cb0:	000b329f 	muleq	fp, pc, r2	; <UNPREDICTABLE>
     cb4:	000b3608 	andeq	r3, fp, r8, lsl #12
     cb8:	74000608 	strvc	r0, [r0], #-1544	; 0x608
     cbc:	1aff0800 	bne	fffc2cc4 <_estack+0xdff92cc4>
     cc0:	000b449f 	muleq	fp, pc, r4	; <UNPREDICTABLE>
     cc4:	000b4a08 	andeq	r4, fp, r8, lsl #20
     cc8:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
     ccc:	1aff0800 	bne	fffc2cd4 <_estack+0xdff92cd4>
     cd0:	000b4a9f 	muleq	fp, pc, sl	; <UNPREDICTABLE>
     cd4:	000b9408 	andeq	r9, fp, r8, lsl #8
     cd8:	30000208 	andcc	r0, r0, r8, lsl #4
     cdc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	000b0400 	andeq	r0, fp, r0, lsl #8
     ce8:	000b1a08 	andeq	r1, fp, r8, lsl #20
     cec:	30000208 	andcc	r0, r0, r8, lsl #4
     cf0:	000b4a9f 	muleq	fp, pc, sl	; <UNPREDICTABLE>
     cf4:	000b6e08 	andeq	r6, fp, r8, lsl #28
     cf8:	30000208 	andcc	r0, r0, r8, lsl #4
     cfc:	000b6e9f 	muleq	fp, pc, lr	; <UNPREDICTABLE>
     d00:	000b7e08 	andeq	r7, fp, r8, lsl #28
     d04:	53000108 	movwpl	r0, #264	; 0x108
	...
     d10:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
     d14:	08000b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp}
     d18:	9f320002 	svcls	0x00320002
     d1c:	08000b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp}
     d20:	08000b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp}
     d24:	9f320002 	svcls	0x00320002
     d28:	08000b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp}
     d2c:	08000b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp}
     d30:	0072000d 	rsbseq	r0, r2, sp
     d34:	1a243d48 	bne	91025c <_Min_Stack_Size+0x90fe5c>
     d38:	01232540 	teqeq	r3, r0, asr #10
     d3c:	009f2431 	addseq	r2, pc, r1, lsr r4	; <UNPREDICTABLE>
     d40:	00000000 	andeq	r0, r0, r0
     d44:	04000000 	streq	r0, [r0], #-0
     d48:	1a08000b 	bne	200d7c <_Min_Stack_Size+0x20097c>
     d4c:	0208000b 	andeq	r0, r8, #11
     d50:	4a9f3000 	bmi	fe7ccd58 <_estack+0xde79cd58>
     d54:	5208000b 	andpl	r0, r8, #11
     d58:	0208000b 	andeq	r0, r8, #11
     d5c:	529f3000 	addspl	r3, pc, #0
     d60:	9408000b 	strls	r0, [r8], #-11
     d64:	0908000b 	stmdbeq	r8, {r0, r1, r3}
     d68:	40007400 	andmi	r7, r0, r0, lsl #8
     d6c:	461a2442 	ldrmi	r2, [sl], -r2, asr #8
     d70:	00009f25 	andeq	r9, r0, r5, lsr #30
     d74:	00000000 	andeq	r0, r0, r0
     d78:	0b040000 	bleq	100d80 <_Min_Stack_Size+0x100980>
     d7c:	0b1a0800 	bleq	682d84 <_Min_Stack_Size+0x682984>
     d80:	00020800 	andeq	r0, r2, r0, lsl #16
     d84:	0b4a9f32 	bleq	12a8a54 <_Min_Stack_Size+0x12a8654>
     d88:	0b620800 	bleq	1882d90 <_Min_Stack_Size+0x1882990>
     d8c:	00020800 	andeq	r0, r2, r0, lsl #16
     d90:	0b629f32 	bleq	18a8a60 <_Min_Stack_Size+0x18a8660>
     d94:	0b940800 	bleq	fe502d9c <_estack+0xde4d2d9c>
     d98:	00010800 	andeq	r0, r1, r0, lsl #16
     d9c:	00000051 	andeq	r0, r0, r1, asr r0
     da0:	00000000 	andeq	r0, r0, r0
     da4:	000b9400 	andeq	r9, fp, r0, lsl #8
     da8:	000bba08 	andeq	fp, fp, r8, lsl #20
     dac:	50000108 	andpl	r0, r0, r8, lsl #2
     db0:	08000bba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, fp}
     db4:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
     db8:	01f30004 	mvnseq	r0, r4
     dbc:	00009f50 	andeq	r9, r0, r0, asr pc
     dc0:	00000000 	andeq	r0, r0, r0
     dc4:	0b940000 	bleq	fe500dcc <_estack+0xde4d0dcc>
     dc8:	0ba20800 	bleq	fe882dd0 <_estack+0xde852dd0>
     dcc:	00020800 	andeq	r0, r2, r0, lsl #16
     dd0:	0ba29f30 	bleq	fe8a8a98 <_estack+0xde878a98>
     dd4:	0bb00800 	bleq	fec02ddc <_estack+0xdebd2ddc>
     dd8:	00010800 	andeq	r0, r1, r0, lsl #16
     ddc:	000bb051 	andeq	fp, fp, r1, asr r0
     de0:	000bb208 	andeq	fp, fp, r8, lsl #4
     de4:	53000108 	movwpl	r0, #264	; 0x108
	...
     df0:	08000be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp}
     df4:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
     df8:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
     dfc:	0008000b 	andeq	r0, r8, fp
     e00:	0308000c 	movweq	r0, #32780	; 0x800c
     e04:	9f017000 	svcls	0x00017000
	...
     e10:	08000be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp}
     e14:	08000bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp}
     e18:	9f300002 	svcls	0x00300002
     e1c:	08000bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp}
     e20:	08000c00 	stmdaeq	r0, {sl, fp}
     e24:	00520001 	subseq	r0, r2, r1
	...
     e30:	0808000c 	stmdaeq	r8, {r2, r3}
     e34:	0108000c 	tsteq	r8, ip
     e38:	0c085000 	stceq	0, cr5, [r8], {-0}
     e3c:	0c1c0800 	ldceq	8, cr0, [ip], {-0}
     e40:	00030800 	andeq	r0, r3, r0, lsl #16
     e44:	009f0170 	addseq	r0, pc, r0, ror r1	; <UNPREDICTABLE>
	...
     e50:	0608000c 	streq	r0, [r8], -ip
     e54:	0208000c 	andeq	r0, r8, #12
     e58:	069f3000 	ldreq	r3, [pc], r0
     e5c:	1c08000c 	stcne	0, cr0, [r8], {12}
     e60:	0108000c 	tsteq	r8, ip
     e64:	00005200 	andeq	r5, r0, r0, lsl #4
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     e70:	0c280800 	stceq	8, cr0, [r8], #-0
     e74:	00010800 	andeq	r0, r1, r0, lsl #16
     e78:	000c2850 	andeq	r2, ip, r0, asr r8
     e7c:	000c3408 	andeq	r3, ip, r8, lsl #8
     e80:	f3000408 	vshl.u8	d0, d8, d0
     e84:	009f5001 	addseq	r5, pc, r1
     e88:	00000000 	andeq	r0, r0, r0
     e8c:	1c000000 	stcne	0, cr0, [r0], {-0}
     e90:	2208000c 	andcs	r0, r8, #12
     e94:	0208000c 	andeq	r0, r8, #12
     e98:	229f3000 	addscs	r3, pc, #0
     e9c:	2808000c 	stmdacs	r8, {r2, r3}
     ea0:	0108000c 	tsteq	r8, ip
     ea4:	0c285200 	sfmeq	f5, 4, [r8], #-0
     ea8:	0c340800 	ldceq	8, cr0, [r4], #-0
     eac:	00010800 	andeq	r0, r1, r0, lsl #16
     eb0:	00000050 	andeq	r0, r0, r0, asr r0
     eb4:	00000000 	andeq	r0, r0, r0
     eb8:	000c3400 	andeq	r3, ip, r0, lsl #8
     ebc:	000c4008 	andeq	r4, ip, r8
     ec0:	50000108 	andpl	r0, r0, r8, lsl #2
     ec4:	08000c40 	stmdaeq	r0, {r6, sl, fp}
     ec8:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
     ecc:	01f30004 	mvnseq	r0, r4
     ed0:	00009f50 	andeq	r9, r0, r0, asr pc
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	0c340000 	ldceq	0, cr0, [r4], #-0
     edc:	0c3a0800 	ldceq	8, cr0, [sl], #-0
     ee0:	00020800 	andeq	r0, r2, r0, lsl #16
     ee4:	0c3a9f30 	ldceq	15, cr9, [sl], #-192	; 0xffffff40
     ee8:	0c400800 	mcrreq	8, 0, r0, r0, cr0
     eec:	00010800 	andeq	r0, r1, r0, lsl #16
     ef0:	000c4052 	andeq	r4, ip, r2, asr r0
     ef4:	000c4c08 	andeq	r4, ip, r8, lsl #24
     ef8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     f04:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
     f08:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}
     f0c:	58500001 	ldmdapl	r0, {r0}^
     f10:	6408000c 	strvs	r0, [r8], #-12
     f14:	0408000c 	streq	r0, [r8], #-12
     f18:	5001f300 	andpl	pc, r1, r0, lsl #6
     f1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f20:	00000000 	andeq	r0, r0, r0
     f24:	000c4c00 	andeq	r4, ip, r0, lsl #24
     f28:	000c5208 	andeq	r5, ip, r8, lsl #4
     f2c:	30000208 	andcc	r0, r0, r8, lsl #4
     f30:	000c529f 	muleq	ip, pc, r2	; <UNPREDICTABLE>
     f34:	000c5808 	andeq	r5, ip, r8, lsl #16
     f38:	52000108 	andpl	r0, r0, #8, 2
     f3c:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}
     f40:	08000c64 	stmdaeq	r0, {r2, r5, r6, sl, fp}
     f44:	00500001 	subseq	r0, r0, r1
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	70000000 	andvc	r0, r0, r0
     f50:	7a08000c 	bvc	200f88 <_Min_Stack_Size+0x200b88>
     f54:	0108000c 	tsteq	r8, ip
     f58:	0c7a5000 	ldcleq	0, cr5, [sl], #-0
     f5c:	0c7e0800 	ldcleq	8, cr0, [lr], #-0
     f60:	00040800 	andeq	r0, r4, r0, lsl #16
     f64:	9f5001f3 	svcls	0x005001f3
     f68:	08000c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp}
     f6c:	08000c80 	stmdaeq	r0, {r7, sl, fp}
     f70:	80500001 	subshi	r0, r0, r1
     f74:	8808000c 	stmdahi	r8, {r2, r3}
     f78:	0408000c 	streq	r0, [r8], #-12
     f7c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f84:	00000000 	andeq	r0, r0, r0
     f88:	000c8800 	andeq	r8, ip, r0, lsl #16
     f8c:	000c9208 	andeq	r9, ip, r8, lsl #4
     f90:	50000108 	andpl	r0, r0, r8, lsl #2
     f94:	08000c92 	stmdaeq	r0, {r1, r4, r7, sl, fp}
     f98:	08000c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp}
     f9c:	01f30004 	mvnseq	r0, r4
     fa0:	0c969f50 	ldceq	15, cr9, [r6], {80}	; 0x50
     fa4:	0c980800 	ldceq	8, cr0, [r8], {0}
     fa8:	00010800 	andeq	r0, r1, r0, lsl #16
     fac:	000c9850 	andeq	r9, ip, r0, asr r8
     fb0:	000ca008 	andeq	sl, ip, r8
     fb4:	f3000408 	vshl.u8	d0, d8, d0
     fb8:	009f5001 	addseq	r5, pc, r1
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	a0000000 	andge	r0, r0, r0
     fc4:	aa08000c 	bge	200ffc <_Min_Stack_Size+0x200bfc>
     fc8:	0108000c 	tsteq	r8, ip
     fcc:	0caa5000 	stceq	0, cr5, [sl]
     fd0:	0cae0800 	stceq	8, cr0, [lr]
     fd4:	00040800 	andeq	r0, r4, r0, lsl #16
     fd8:	9f5001f3 	svcls	0x005001f3
     fdc:	08000cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp}
     fe0:	08000cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp}
     fe4:	b0500001 	subslt	r0, r0, r1
     fe8:	b808000c 	stmdalt	r8, {r2, r3}
     fec:	0408000c 	streq	r0, [r8], #-12
     ff0:	5001f300 	andpl	pc, r1, r0, lsl #6
     ff4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	000cb800 	andeq	fp, ip, r0, lsl #16
    1000:	000cc208 	andeq	ip, ip, r8, lsl #4
    1004:	50000108 	andpl	r0, r0, r8, lsl #2
    1008:	08000cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp}
    100c:	08000cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp}
    1010:	01f30004 	mvnseq	r0, r4
    1014:	0cc69f50 	stcleq	15, cr9, [r6], {80}	; 0x50
    1018:	0cc80800 	stcleq	8, cr0, [r8], {0}
    101c:	00010800 	andeq	r0, r1, r0, lsl #16
    1020:	000cc850 	andeq	ip, ip, r0, asr r8
    1024:	000cd008 	andeq	sp, ip, r8
    1028:	f3000408 	vshl.u8	d0, d8, d0
    102c:	009f5001 	addseq	r5, pc, r1
    1030:	00000000 	andeq	r0, r0, r0
    1034:	d0000000 	andle	r0, r0, r0
    1038:	da08000c 	ble	201070 <_Min_Stack_Size+0x200c70>
    103c:	0108000c 	tsteq	r8, ip
    1040:	0cda5000 	ldcleq	0, cr5, [sl], {0}
    1044:	0cde0800 	ldcleq	8, cr0, [lr], {0}
    1048:	00040800 	andeq	r0, r4, r0, lsl #16
    104c:	9f5001f3 	svcls	0x005001f3
    1050:	08000cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp}
    1054:	08000ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp}
    1058:	e0500001 	subs	r0, r0, r1
    105c:	e808000c 	stmda	r8, {r2, r3}
    1060:	0408000c 	streq	r0, [r8], #-12
    1064:	5001f300 	andpl	pc, r1, r0, lsl #6
    1068:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    106c:	00000000 	andeq	r0, r0, r0
    1070:	000ce800 	andeq	lr, ip, r0, lsl #16
    1074:	000cf208 	andeq	pc, ip, r8, lsl #4
    1078:	50000108 	andpl	r0, r0, r8, lsl #2
    107c:	08000cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp}
    1080:	08000cf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, fp}
    1084:	01f30004 	mvnseq	r0, r4
    1088:	0cf69f50 	ldcleq	15, cr9, [r6], #320	; 0x140
    108c:	0cf80800 	ldcleq	8, cr0, [r8]
    1090:	00010800 	andeq	r0, r1, r0, lsl #16
    1094:	000cf850 	andeq	pc, ip, r0, asr r8	; <UNPREDICTABLE>
    1098:	000d0008 	andeq	r0, sp, r8
    109c:	f3000408 	vshl.u8	d0, d8, d0
    10a0:	009f5001 	addseq	r5, pc, r1
	...
    10ac:	0a08000d 	beq	2010e8 <_Min_Stack_Size+0x200ce8>
    10b0:	0108000d 	tsteq	r8, sp
    10b4:	0d0a5000 	stceq	0, cr5, [sl, #-0]
    10b8:	0d0e0800 	stceq	8, cr0, [lr, #-0]
    10bc:	00040800 	andeq	r0, r4, r0, lsl #16
    10c0:	9f5001f3 	svcls	0x005001f3
    10c4:	08000d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp}
    10c8:	08000d10 	stmdaeq	r0, {r4, r8, sl, fp}
    10cc:	10500001 	subsne	r0, r0, r1
    10d0:	1808000d 	stmdane	r8, {r0, r2, r3}
    10d4:	0408000d 	streq	r0, [r8], #-13
    10d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    10dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	000d1800 	andeq	r1, sp, r0, lsl #16
    10e8:	000d2208 	andeq	r2, sp, r8, lsl #4
    10ec:	50000108 	andpl	r0, r0, r8, lsl #2
    10f0:	08000d22 	stmdaeq	r0, {r1, r5, r8, sl, fp}
    10f4:	08000d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp}
    10f8:	01f30004 	mvnseq	r0, r4
    10fc:	0d269f50 	stceq	15, cr9, [r6, #-320]!	; 0xfffffec0
    1100:	0d280800 	stceq	8, cr0, [r8, #-0]
    1104:	00010800 	andeq	r0, r1, r0, lsl #16
    1108:	000d2850 	andeq	r2, sp, r0, asr r8
    110c:	000d3008 	andeq	r3, sp, r8
    1110:	f3000408 	vshl.u8	d0, d8, d0
    1114:	009f5001 	addseq	r5, pc, r1
    1118:	00000000 	andeq	r0, r0, r0
    111c:	30000000 	andcc	r0, r0, r0
    1120:	3a08000d 	bcc	20115c <_Min_Stack_Size+0x200d5c>
    1124:	0108000d 	tsteq	r8, sp
    1128:	0d3a5000 	ldceq	0, cr5, [sl, #-0]
    112c:	0d3e0800 	ldceq	8, cr0, [lr, #-0]
    1130:	00040800 	andeq	r0, r4, r0, lsl #16
    1134:	9f5001f3 	svcls	0x005001f3
    1138:	08000d3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, fp}
    113c:	08000d40 	stmdaeq	r0, {r6, r8, sl, fp}
    1140:	40500001 	subsmi	r0, r0, r1
    1144:	4808000d 	stmdami	r8, {r0, r2, r3}
    1148:	0408000d 	streq	r0, [r8], #-13
    114c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1150:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1154:	00000000 	andeq	r0, r0, r0
    1158:	000d4800 	andeq	r4, sp, r0, lsl #16
    115c:	000d5208 	andeq	r5, sp, r8, lsl #4
    1160:	50000108 	andpl	r0, r0, r8, lsl #2
    1164:	08000d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp}
    1168:	08000d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp}
    116c:	01f30004 	mvnseq	r0, r4
    1170:	0d569f50 	ldcleq	15, cr9, [r6, #-320]	; 0xfffffec0
    1174:	0d580800 	ldcleq	8, cr0, [r8, #-0]
    1178:	00010800 	andeq	r0, r1, r0, lsl #16
    117c:	000d5850 	andeq	r5, sp, r0, asr r8
    1180:	000d6008 	andeq	r6, sp, r8
    1184:	f3000408 	vshl.u8	d0, d8, d0
    1188:	009f5001 	addseq	r5, pc, r1
    118c:	00000000 	andeq	r0, r0, r0
    1190:	60000000 	andvs	r0, r0, r0
    1194:	6a08000d 	bvs	2011d0 <_Min_Stack_Size+0x200dd0>
    1198:	0108000d 	tsteq	r8, sp
    119c:	0d6a5000 	stcleq	0, cr5, [sl, #-0]
    11a0:	0d6e0800 	stcleq	8, cr0, [lr, #-0]
    11a4:	00040800 	andeq	r0, r4, r0, lsl #16
    11a8:	9f5001f3 	svcls	0x005001f3
    11ac:	08000d6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, fp}
    11b0:	08000d70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp}
    11b4:	70500001 	subsvc	r0, r0, r1
    11b8:	7808000d 	stmdavc	r8, {r0, r2, r3}
    11bc:	0408000d 	streq	r0, [r8], #-13
    11c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    11c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	000d7800 	andeq	r7, sp, r0, lsl #16
    11d0:	000d8208 	andeq	r8, sp, r8, lsl #4
    11d4:	50000108 	andpl	r0, r0, r8, lsl #2
    11d8:	08000d82 	stmdaeq	r0, {r1, r7, r8, sl, fp}
    11dc:	08000d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp}
    11e0:	01f30004 	mvnseq	r0, r4
    11e4:	0d869f50 	stceq	15, cr9, [r6, #320]	; 0x140
    11e8:	0d880800 	stceq	8, cr0, [r8]
    11ec:	00010800 	andeq	r0, r1, r0, lsl #16
    11f0:	000d8850 	andeq	r8, sp, r0, asr r8
    11f4:	000d9008 	andeq	r9, sp, r8
    11f8:	f3000408 	vshl.u8	d0, d8, d0
    11fc:	009f5001 	addseq	r5, pc, r1
    1200:	00000000 	andeq	r0, r0, r0
    1204:	90000000 	andls	r0, r0, r0
    1208:	9a08000d 	bls	201244 <_Min_Stack_Size+0x200e44>
    120c:	0108000d 	tsteq	r8, sp
    1210:	0d9a5000 	ldceq	0, cr5, [sl]
    1214:	0d9e0800 	ldceq	8, cr0, [lr]
    1218:	00040800 	andeq	r0, r4, r0, lsl #16
    121c:	9f5001f3 	svcls	0x005001f3
    1220:	08000d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp}
    1224:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
    1228:	a0500001 	subsge	r0, r0, r1
    122c:	a808000d 	stmdage	r8, {r0, r2, r3}
    1230:	0408000d 	streq	r0, [r8], #-13
    1234:	5001f300 	andpl	pc, r1, r0, lsl #6
    1238:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    123c:	00000000 	andeq	r0, r0, r0
    1240:	000da800 	andeq	sl, sp, r0, lsl #16
    1244:	000db208 	andeq	fp, sp, r8, lsl #4
    1248:	50000108 	andpl	r0, r0, r8, lsl #2
    124c:	08000db2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, fp}
    1250:	08000db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp}
    1254:	01f30004 	mvnseq	r0, r4
    1258:	0db69f50 	ldceq	15, cr9, [r6, #320]!	; 0x140
    125c:	0db80800 	ldceq	8, cr0, [r8]
    1260:	00010800 	andeq	r0, r1, r0, lsl #16
    1264:	000db850 	andeq	fp, sp, r0, asr r8
    1268:	000dc008 	andeq	ip, sp, r8
    126c:	f3000408 	vshl.u8	d0, d8, d0
    1270:	009f5001 	addseq	r5, pc, r1
    1274:	00000000 	andeq	r0, r0, r0
    1278:	c0000000 	andgt	r0, r0, r0
    127c:	ca08000d 	bgt	2012b8 <_Min_Stack_Size+0x200eb8>
    1280:	0108000d 	tsteq	r8, sp
    1284:	0dca5000 	stcleq	0, cr5, [sl]
    1288:	0dce0800 	stcleq	8, cr0, [lr]
    128c:	00040800 	andeq	r0, r4, r0, lsl #16
    1290:	9f5001f3 	svcls	0x005001f3
    1294:	08000dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp}
    1298:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
    129c:	d0500001 	subsle	r0, r0, r1
    12a0:	d808000d 	stmdale	r8, {r0, r2, r3}
    12a4:	0408000d 	streq	r0, [r8], #-13
    12a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    12ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12b0:	00000000 	andeq	r0, r0, r0
    12b4:	000dd800 	andeq	sp, sp, r0, lsl #16
    12b8:	000de208 	andeq	lr, sp, r8, lsl #4
    12bc:	50000108 	andpl	r0, r0, r8, lsl #2
    12c0:	08000de2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, fp}
    12c4:	08000de6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, fp}
    12c8:	01f30004 	mvnseq	r0, r4
    12cc:	0de69f50 	stcleq	15, cr9, [r6, #320]!	; 0x140
    12d0:	0de80800 	stcleq	8, cr0, [r8]
    12d4:	00010800 	andeq	r0, r1, r0, lsl #16
    12d8:	000de850 	andeq	lr, sp, r0, asr r8
    12dc:	000df008 	andeq	pc, sp, r8
    12e0:	f3000408 	vshl.u8	d0, d8, d0
    12e4:	009f5001 	addseq	r5, pc, r1
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    12f0:	0408000d 	streq	r0, [r8], #-13
    12f4:	0108000e 	tsteq	r8, lr
    12f8:	0e045000 	cdpeq	0, 0, cr5, cr4, cr0, {0}
    12fc:	0e0e0800 	cdpeq	8, 0, cr0, cr14, cr0, {0}
    1300:	00040800 	andeq	r0, r4, r0, lsl #16
    1304:	9f5001f3 	svcls	0x005001f3
    1308:	08000e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp}
    130c:	08000e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp}
    1310:	16500001 	ldrbne	r0, [r0], -r1
    1314:	2408000e 	strcs	r0, [r8], #-14
    1318:	0408000e 	streq	r0, [r8], #-14
    131c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1320:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1324:	00000000 	andeq	r0, r0, r0
    1328:	000df000 	andeq	pc, sp, r0
    132c:	000df208 	andeq	pc, sp, r8, lsl #4
    1330:	30000208 	andcc	r0, r0, r8, lsl #4
    1334:	000df29f 	muleq	sp, pc, r2	; <UNPREDICTABLE>
    1338:	000dfa08 	andeq	pc, sp, r8, lsl #20
    133c:	53000108 	movwpl	r0, #264	; 0x108
    1340:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
    1344:	08000e00 	stmdaeq	r0, {r9, sl, fp}
    1348:	00700005 	rsbseq	r0, r0, r5
    134c:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    1350:	0408000e 	streq	r0, [r8], #-14
    1354:	0808000e 	stmdaeq	r8, {r1, r2, r3}
    1358:	4f007000 	svcmi	0x00007000
    135c:	1aff081a 	bne	fffc33cc <_estack+0xdff933cc>
    1360:	000e0e9f 	muleq	lr, pc, lr	; <UNPREDICTABLE>
    1364:	000e1008 	andeq	r1, lr, r8
    1368:	53000108 	movwpl	r0, #264	; 0x108
    136c:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
    1370:	08000e12 	stmdaeq	r0, {r1, r4, r9, sl, fp}
    1374:	00700005 	rsbseq	r0, r0, r5
    1378:	129f2535 	addsne	r2, pc, #222298112	; 0xd400000
    137c:	1608000e 	strne	r0, [r8], -lr
    1380:	0808000e 	stmdaeq	r8, {r1, r2, r3}
    1384:	4f007000 	svcmi	0x00007000
    1388:	1aff081a 	bne	fffc33f8 <_estack+0xdff933f8>
    138c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1390:	00000000 	andeq	r0, r0, r0
    1394:	000df000 	andeq	pc, sp, r0
    1398:	000dfe08 	andeq	pc, sp, r8, lsl #28
    139c:	30000208 	andcc	r0, r0, r8, lsl #4
    13a0:	000dfe9f 	muleq	sp, pc, lr	; <UNPREDICTABLE>
    13a4:	000e0e08 	andeq	r0, lr, r8, lsl #28
    13a8:	53000108 	movwpl	r0, #264	; 0x108
    13ac:	08000e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp}
    13b0:	08000e12 	stmdaeq	r0, {r1, r4, r9, sl, fp}
    13b4:	9f300002 	svcls	0x00300002
    13b8:	08000e12 	stmdaeq	r0, {r1, r4, r9, sl, fp}
    13bc:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
    13c0:	00530001 	subseq	r0, r3, r1
    13c4:	00000000 	andeq	r0, r0, r0
    13c8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    13cc:	0008000d 	andeq	r0, r8, sp
    13d0:	0208000e 	andeq	r0, r8, #14
    13d4:	009f3000 	addseq	r3, pc, r0
    13d8:	0408000e 	streq	r0, [r8], #-14
    13dc:	0d08000e 	stceq	0, cr0, [r8, #-56]	; 0xffffffc8
    13e0:	70007300 	andvc	r7, r0, r0, lsl #6
    13e4:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    13e8:	31251aff 	strdcc	r1, [r5, -pc]!
    13ec:	0e0e9f1a 	mcreq	15, 0, r9, cr14, cr10, {0}
    13f0:	0e120800 	cdpeq	8, 1, cr0, cr2, cr0, {0}
    13f4:	00020800 	andeq	r0, r2, r0, lsl #16
    13f8:	0e129f30 	mrceq	15, 0, r9, cr2, cr0, {1}
    13fc:	0e160800 	cdpeq	8, 1, cr0, cr6, cr0, {0}
    1400:	000d0800 	andeq	r0, sp, r0, lsl #16
    1404:	00700073 	rsbseq	r0, r0, r3, ror r0
    1408:	ff081a4f 			; <UNDEFINED> instruction: 0xff081a4f
    140c:	1a31251a 	bne	c4a87c <_Min_Stack_Size+0xc4a47c>
    1410:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1414:	00000000 	andeq	r0, r0, r0
    1418:	000e3400 	andeq	r3, lr, r0, lsl #8
    141c:	000e4008 	andeq	r4, lr, r8
    1420:	50000108 	andpl	r0, r0, r8, lsl #2
    1424:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
    1428:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
    142c:	01f30004 	mvnseq	r0, r4
    1430:	00009f50 	andeq	r9, r0, r0, asr pc
    1434:	00000000 	andeq	r0, r0, r0
    1438:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
    143c:	0e380800 	cdpeq	8, 3, cr0, cr8, cr0, {0}
    1440:	00020800 	andeq	r0, r2, r0, lsl #16
    1444:	0e389f30 	mrceq	15, 1, r9, cr8, cr0, {1}
    1448:	0e400800 	cdpeq	8, 4, cr0, cr0, cr0, {0}
    144c:	000b0800 	andeq	r0, fp, r0, lsl #16
    1450:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    1454:	1a00731a 	bne	1e0c4 <_Min_Stack_Size+0x1dcc4>
    1458:	409f2e30 	addsmi	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    145c:	4808000e 	stmdami	r8, {r1, r2, r3}
    1460:	0c08000e 	stceq	0, cr0, [r8], {14}
    1464:	5001f300 	andpl	pc, r1, r0, lsl #6
    1468:	731aff08 	tstvc	sl, #8, 30
    146c:	2e301a00 	vaddcs.f32	s2, s0, s0
    1470:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1474:	00000000 	andeq	r0, r0, r0
    1478:	000e5400 	andeq	r5, lr, r0, lsl #8
    147c:	000e8c08 	andeq	r8, lr, r8, lsl #24
    1480:	50000108 	andpl	r0, r0, r8, lsl #2
    1484:	08000e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp}
    1488:	08000ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp}
    148c:	01f30004 	mvnseq	r0, r4
    1490:	0ea09f50 	mcreq	15, 5, r9, cr0, cr0, {2}
    1494:	0ea20800 	cdpeq	8, 10, cr0, cr2, cr0, {0}
    1498:	00010800 	andeq	r0, r1, r0, lsl #16
    149c:	000ea250 	andeq	sl, lr, r0, asr r2
    14a0:	000eb408 	andeq	fp, lr, r8, lsl #8
    14a4:	f3000408 	vshl.u8	d0, d8, d0
    14a8:	b49f5001 	ldrlt	r5, [pc], #1	; 14b0 <_Min_Stack_Size+0x10b0>
    14ac:	b808000e 	stmdalt	r8, {r1, r2, r3}
    14b0:	0108000e 	tsteq	r8, lr
    14b4:	0eb85000 	cdpeq	0, 11, cr5, cr8, cr0, {0}
    14b8:	0ecc0800 	cdpeq	8, 12, cr0, cr12, cr0, {0}
    14bc:	00040800 	andeq	r0, r4, r0, lsl #16
    14c0:	9f5001f3 	svcls	0x005001f3
    14c4:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
    14c8:	08000ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp}
    14cc:	d0500001 	subsle	r0, r0, r1
    14d0:	e408000e 	str	r0, [r8], #-14
    14d4:	0408000e 	streq	r0, [r8], #-14
    14d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    14dc:	000ee49f 	muleq	lr, pc, r4	; <UNPREDICTABLE>
    14e0:	000ee808 	andeq	lr, lr, r8, lsl #16
    14e4:	50000108 	andpl	r0, r0, r8, lsl #2
    14e8:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
    14ec:	08000efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp}
    14f0:	01f30004 	mvnseq	r0, r4
    14f4:	0efc9f50 	mrceq	15, 7, r9, cr12, cr0, {2}
    14f8:	0f000800 	svceq	0x00000800
    14fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1500:	000f0050 	andeq	r0, pc, r0, asr r0	; <UNPREDICTABLE>
    1504:	000f1408 	andeq	r1, pc, r8, lsl #8
    1508:	f3000408 	vshl.u8	d0, d8, d0
    150c:	149f5001 	ldrne	r5, [pc], #1	; 1514 <_Min_Stack_Size+0x1114>
    1510:	1608000f 	strne	r0, [r8], -pc
    1514:	0108000f 	tsteq	r8, pc
    1518:	0f165000 	svceq	0x00165000
    151c:	0f280800 	svceq	0x00280800
    1520:	00040800 	andeq	r0, r4, r0, lsl #16
    1524:	9f5001f3 	svcls	0x005001f3
    1528:	08000f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp}
    152c:	08000f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp}
    1530:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1534:	6008000f 	andvs	r0, r8, pc
    1538:	0408000f 	streq	r0, [r8], #-15
    153c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1540:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1544:	00000000 	andeq	r0, r0, r0
    1548:	000f6000 	andeq	r6, pc, r0
    154c:	000f7a08 	andeq	r7, pc, r8, lsl #20
    1550:	50000108 	andpl	r0, r0, r8, lsl #2
    1554:	08000f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp}
    1558:	0800101a 	stmdaeq	r0, {r1, r3, r4, ip}
    155c:	1a540001 	bne	1501568 <_Min_Stack_Size+0x1501168>
    1560:	24080010 	strcs	r0, [r8], #-16
    1564:	04080010 	streq	r0, [r8], #-16
    1568:	5001f300 	andpl	pc, r1, r0, lsl #6
    156c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1570:	00000000 	andeq	r0, r0, r0
    1574:	000f6000 	andeq	r6, pc, r0
    1578:	000f6608 	andeq	r6, pc, r8, lsl #12
    157c:	51000108 	tstpl	r0, r8, lsl #2
    1580:	08000f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp}
    1584:	08000fda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, fp}
    1588:	da550001 	ble	1541594 <_Min_Stack_Size+0x1541194>
    158c:	0008000f 	andeq	r0, r8, pc
    1590:	04080010 	streq	r0, [r8], #-16
    1594:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1598:	0010009f 	mulseq	r0, pc, r0	; <UNPREDICTABLE>
    159c:	00100408 	andseq	r0, r0, r8, lsl #8
    15a0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    15a4:	08001004 	stmdaeq	r0, {r2, ip}
    15a8:	08001024 	stmdaeq	r0, {r2, r5, ip}
    15ac:	01f30004 	mvnseq	r0, r4
    15b0:	00009f51 	andeq	r9, r0, r1, asr pc
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	0f600000 	svceq	0x00600000
    15bc:	0f700800 	svceq	0x00700800
    15c0:	00020800 	andeq	r0, r2, r0, lsl #16
    15c4:	0f709f30 	svceq	0x00709f30
    15c8:	0f760800 	svceq	0x00760800
    15cc:	00010800 	andeq	r0, r1, r0, lsl #16
    15d0:	000f7651 	andeq	r7, pc, r1, asr r6	; <UNPREDICTABLE>
    15d4:	000f7808 	andeq	r7, pc, r8, lsl #16
    15d8:	75000c08 	strvc	r0, [r0, #-3080]	; 0xc08
    15dc:	0a029406 	beq	a65fc <_Min_Stack_Size+0xa61fc>
    15e0:	711affff 			; <UNDEFINED> instruction: 0x711affff
    15e4:	789f2100 	ldmvc	pc, {r8, sp}	; <UNPREDICTABLE>
    15e8:	7e08000f 	cdpvc	0, 0, cr0, cr8, cr15, {0}
    15ec:	0108000f 	tsteq	r8, pc
    15f0:	0f825100 	svceq	0x00825100
    15f4:	0f880800 	svceq	0x00880800
    15f8:	00010800 	andeq	r0, r1, r0, lsl #16
    15fc:	000f8c51 	andeq	r8, pc, r1, asr ip	; <UNPREDICTABLE>
    1600:	000f9208 	andeq	r9, pc, r8, lsl #4
    1604:	75001608 	strvc	r1, [r0, #-1544]	; 0x608
    1608:	75029408 	strvc	r9, [r2, #-1032]	; 0x408
    160c:	21029404 	tstcs	r2, r4, lsl #8
    1610:	02940a75 	addseq	r0, r4, #479232	; 0x75000
    1614:	ffff0a21 			; <UNDEFINED> instruction: 0xffff0a21
    1618:	2100711a 	tstcs	r0, sl, lsl r1
    161c:	000f969f 	muleq	pc, pc, r6	; <UNPREDICTABLE>
    1620:	000f9a08 	andeq	r9, pc, r8, lsl #20
    1624:	53000108 	movwpl	r0, #264	; 0x108
    1628:	08000f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp}
    162c:	08000f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp}
    1630:	0c75000c 	ldcleq	0, cr0, [r5], #-48	; 0xffffffd0
    1634:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    1638:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    163c:	0fdc9f21 	svceq	0x00dc9f21
    1640:	0fe80800 	svceq	0x00e80800
    1644:	00050800 	andeq	r0, r5, r0, lsl #16
    1648:	24340073 	ldrtcs	r0, [r4], #-115	; 0x73
    164c:	000fe89f 	muleq	pc, pc, r8	; <UNPREDICTABLE>
    1650:	000ffa08 	andeq	pc, pc, r8, lsl #20
    1654:	53000108 	movwpl	r0, #264	; 0x108
    1658:	08001004 	stmdaeq	r0, {r2, ip}
    165c:	08001014 	stmdaeq	r0, {r2, r4, ip}
    1660:	00530001 	subseq	r0, r3, r1
    1664:	00000000 	andeq	r0, r0, r0
    1668:	60000000 	andvs	r0, r0, r0
    166c:	b608000f 	strlt	r0, [r8], -pc
    1670:	0208000f 	andeq	r0, r8, #15
    1674:	b69f3000 	ldrlt	r3, [pc], r0
    1678:	c408000f 	strgt	r0, [r8], #-15
    167c:	0108000f 	tsteq	r8, pc
    1680:	10005300 	andne	r5, r0, r0, lsl #6
    1684:	10020800 	andne	r0, r2, r0, lsl #16
    1688:	00020800 	andeq	r0, r2, r0, lsl #16
    168c:	10029f30 	andne	r9, r2, r0, lsr pc
    1690:	10040800 	andne	r0, r4, r0, lsl #16
    1694:	00010800 	andeq	r0, r1, r0, lsl #16
    1698:	00000053 	andeq	r0, r0, r3, asr r0
    169c:	00000000 	andeq	r0, r0, r0
    16a0:	000f6000 	andeq	r6, pc, r0
    16a4:	000fd208 	andeq	sp, pc, r8, lsl #4
    16a8:	30000208 	andcc	r0, r0, r8, lsl #4
    16ac:	000fd29f 	muleq	pc, pc, r2	; <UNPREDICTABLE>
    16b0:	000fe408 	andeq	lr, pc, r8, lsl #8
    16b4:	52000108 	andpl	r0, r0, #8, 2
    16b8:	08001000 	stmdaeq	r0, {ip}
    16bc:	08001004 	stmdaeq	r0, {r2, ip}
    16c0:	9f300002 	svcls	0x00300002
	...
    16cc:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
    16d0:	08000fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp}
    16d4:	9f300002 	svcls	0x00300002
    16d8:	08000fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp}
    16dc:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
    16e0:	00520001 	subseq	r0, r2, r1
    16e4:	04080010 	streq	r0, [r8], #-16
    16e8:	02080010 	andeq	r0, r8, #16
    16ec:	049f3000 	ldreq	r3, [pc], #0	; 16f4 <_Min_Stack_Size+0x12f4>
    16f0:	06080010 			; <UNDEFINED> instruction: 0x06080010
    16f4:	01080010 	tsteq	r8, r0, lsl r0
    16f8:	00005200 	andeq	r5, r0, r0, lsl #4
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	103c0000 	eorsne	r0, ip, r0
    1704:	10480800 	subne	r0, r8, r0, lsl #16
    1708:	00010800 	andeq	r0, r1, r0, lsl #16
    170c:	00104851 	andseq	r4, r0, r1, asr r8
    1710:	00105e08 	andseq	r5, r0, r8, lsl #28
    1714:	f3000408 	vshl.u8	d0, d8, d0
    1718:	009f5101 	addseq	r5, pc, r1, lsl #2
    171c:	00000000 	andeq	r0, r0, r0
    1720:	3c000000 	stccc	0, cr0, [r0], {-0}
    1724:	50080010 	andpl	r0, r8, r0, lsl r0
    1728:	02080010 	andeq	r0, r8, #16
    172c:	509f3000 	addspl	r3, pc, r0
    1730:	56080010 			; <UNDEFINED> instruction: 0x56080010
    1734:	01080010 	tsteq	r8, r0, lsl r0
    1738:	10565300 	subsne	r5, r6, r0, lsl #6
    173c:	10580800 	subsne	r0, r8, r0, lsl #16
    1740:	00250800 	eoreq	r0, r5, r0, lsl #16
    1744:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    1748:	f3029402 	vshl.u8	d9, d2, d2
    174c:	02945101 	addseq	r5, r4, #1073741824	; 0x40000000
    1750:	5101f321 	tstpl	r1, r1, lsr #6
    1754:	02940423 	addseq	r0, r4, #587202560	; 0x23000000
    1758:	5101f321 	tstpl	r1, r1, lsr #6
    175c:	02940623 	addseq	r0, r4, #36700160	; 0x2300000
    1760:	ffff0a21 			; <UNDEFINED> instruction: 0xffff0a21
    1764:	2100731a 	tstcs	r0, sl, lsl r3
    1768:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    176c:	00000000 	andeq	r0, r0, r0
    1770:	00108800 	andseq	r8, r0, r0, lsl #16
    1774:	00109608 	andseq	r9, r0, r8, lsl #12
    1778:	51000108 	tstpl	r0, r8, lsl #2
    177c:	08001096 	stmdaeq	r0, {r1, r2, r4, r7, ip}
    1780:	0800109a 	stmdaeq	r0, {r1, r3, r4, r7, ip}
    1784:	01f30004 	mvnseq	r0, r4
    1788:	00009f51 	andeq	r9, r0, r1, asr pc
    178c:	00000000 	andeq	r0, r0, r0
    1790:	10d40000 	sbcsne	r0, r4, r0
    1794:	10d80800 	sbcsne	r0, r8, r0, lsl #16
    1798:	00010800 	andeq	r0, r1, r0, lsl #16
    179c:	0010d851 	andseq	sp, r0, r1, asr r8
    17a0:	0010dc08 	andseq	sp, r0, r8, lsl #24
    17a4:	f3000408 	vshl.u8	d0, d8, d0
    17a8:	009f5101 	addseq	r5, pc, r1, lsl #2
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	dc000000 	stcle	0, cr0, [r0], {-0}
    17b4:	de080010 	mcrle	0, 0, r0, cr8, cr0, {0}
    17b8:	01080010 	tsteq	r8, r0, lsl r0
    17bc:	10de5000 	sbcsne	r5, lr, r0
    17c0:	10e40800 	rscne	r0, r4, r0, lsl #16
    17c4:	00040800 	andeq	r0, r4, r0, lsl #16
    17c8:	9f5001f3 	svcls	0x005001f3
	...
    17d4:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
    17d8:	080010f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip}
    17dc:	f6510001 			; <UNDEFINED> instruction: 0xf6510001
    17e0:	fa080010 	blx	201828 <_Min_Stack_Size+0x201428>
    17e4:	04080010 	streq	r0, [r8], #-16
    17e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    17ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	00111800 	andseq	r1, r1, r0, lsl #16
    17f8:	00112a08 	andseq	r2, r1, r8, lsl #20
    17fc:	51000108 	tstpl	r0, r8, lsl #2
    1800:	0800112a 	stmdaeq	r0, {r1, r3, r5, r8, ip}
    1804:	0800112e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip}
    1808:	01f30004 	mvnseq	r0, r4
    180c:	00009f51 	andeq	r9, r0, r1, asr pc
    1810:	00000000 	andeq	r0, r0, r0
    1814:	11300000 	teqne	r0, r0
    1818:	11420800 	cmpne	r2, r0, lsl #16
    181c:	00010800 	andeq	r0, r1, r0, lsl #16
    1820:	00114251 	andseq	r4, r1, r1, asr r2
    1824:	00114608 	andseq	r4, r1, r8, lsl #12
    1828:	f3000408 	vshl.u8	d0, d8, d0
    182c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1830:	00000000 	andeq	r0, r0, r0
    1834:	8c000000 	stchi	0, cr0, [r0], {-0}
    1838:	9a080011 	bls	201884 <_Min_Stack_Size+0x201484>
    183c:	01080011 	tsteq	r8, r1, lsl r0
    1840:	119a5100 	orrsne	r5, sl, r0, lsl #2
    1844:	119e0800 	orrsne	r0, lr, r0, lsl #16
    1848:	00040800 	andeq	r0, r4, r0, lsl #16
    184c:	9f5101f3 	svcls	0x005101f3
	...
    1858:	080011d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip}
    185c:	080011ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, ip}
    1860:	ea510001 	b	144186c <_Min_Stack_Size+0x144146c>
    1864:	ee080011 	mcr	0, 0, r0, cr8, cr1, {0}
    1868:	04080011 	streq	r0, [r8], #-17
    186c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1870:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1874:	00000000 	andeq	r0, r0, r0
    1878:	00120c00 	andseq	r0, r2, r0, lsl #24
    187c:	00121608 	andseq	r1, r2, r8, lsl #12
    1880:	51000108 	tstpl	r0, r8, lsl #2
    1884:	08001216 	stmdaeq	r0, {r1, r2, r4, r9, ip}
    1888:	0800121a 	stmdaeq	r0, {r1, r3, r4, r9, ip}
    188c:	01f30004 	mvnseq	r0, r4
    1890:	121a9f51 	andsne	r9, sl, #324	; 0x144
    1894:	121c0800 	andsne	r0, ip, #0, 16
    1898:	00010800 	andeq	r0, r1, r0, lsl #16
    189c:	00121c51 	andseq	r1, r2, r1, asr ip
    18a0:	00122008 	andseq	r2, r2, r8
    18a4:	f3000408 	vshl.u8	d0, d8, d0
    18a8:	009f5101 	addseq	r5, pc, r1, lsl #2
    18ac:	00000000 	andeq	r0, r0, r0
    18b0:	20000000 	andcs	r0, r0, r0
    18b4:	3a080012 	bcc	201904 <_Min_Stack_Size+0x201504>
    18b8:	01080012 	tsteq	r8, r2, lsl r0
    18bc:	123a5000 	eorsne	r5, sl, #0
    18c0:	12560800 	subsne	r0, r6, #0, 16
    18c4:	00040800 	andeq	r0, r4, r0, lsl #16
    18c8:	9f5001f3 	svcls	0x005001f3
    18cc:	08001256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip}
    18d0:	08001258 	stmdaeq	r0, {r3, r4, r6, r9, ip}
    18d4:	58500001 	ldmdapl	r0, {r0}^
    18d8:	5a080012 	bpl	201928 <_Min_Stack_Size+0x201528>
    18dc:	03080012 	movweq	r0, #32786	; 0x8012
    18e0:	9f747000 	svcls	0x00747000
	...
    18ec:	08001220 	stmdaeq	r0, {r5, r9, ip}
    18f0:	0800122a 	stmdaeq	r0, {r1, r3, r5, r9, ip}
    18f4:	2a510001 	bcs	1441900 <_Min_Stack_Size+0x1441500>
    18f8:	5a080012 	bpl	201948 <_Min_Stack_Size+0x201548>
    18fc:	04080012 	streq	r0, [r8], #-18
    1900:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1904:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1908:	00000000 	andeq	r0, r0, r0
    190c:	00122000 	andseq	r2, r2, r0
    1910:	00122c08 	andseq	r2, r2, r8, lsl #24
    1914:	30000208 	andcc	r0, r0, r8, lsl #4
    1918:	00122c9f 	mulseq	r2, pc, ip	; <UNPREDICTABLE>
    191c:	00125a08 	andseq	r5, r2, r8, lsl #20
    1920:	51000108 	tstpl	r0, r8, lsl #2
	...
    192c:	08001220 	stmdaeq	r0, {r5, r9, ip}
    1930:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
    1934:	9f300002 	svcls	0x00300002
	...
    1940:	08001220 	stmdaeq	r0, {r5, r9, ip}
    1944:	08001232 	stmdaeq	r0, {r1, r4, r5, r9, ip}
    1948:	9f300002 	svcls	0x00300002
    194c:	08001232 	stmdaeq	r0, {r1, r4, r5, r9, ip}
    1950:	08001244 	stmdaeq	r0, {r2, r6, r9, ip}
    1954:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
    1958:	4e080012 	mcrmi	0, 0, r0, cr8, cr2, {0}
    195c:	01080012 	tsteq	r8, r2, lsl r0
    1960:	12565300 	subsne	r5, r6, #0, 6
    1964:	125a0800 	subsne	r0, sl, #0, 16
    1968:	00010800 	andeq	r0, r1, r0, lsl #16
    196c:	00000053 	andeq	r0, r0, r3, asr r0
    1970:	00000000 	andeq	r0, r0, r0
    1974:	00125c00 	andseq	r5, r2, r0, lsl #24
    1978:	00126608 	andseq	r6, r2, r8, lsl #12
    197c:	50000108 	andpl	r0, r0, r8, lsl #2
    1980:	08001266 	stmdaeq	r0, {r1, r2, r5, r6, r9, ip}
    1984:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
    1988:	01f30004 	mvnseq	r0, r4
    198c:	00009f50 	andeq	r9, r0, r0, asr pc
    1990:	00000000 	andeq	r0, r0, r0
    1994:	125c0000 	subsne	r0, ip, #0
    1998:	125e0800 	subsne	r0, lr, #0, 16
    199c:	00020800 	andeq	r0, r2, r0, lsl #16
    19a0:	125e9f30 	subsne	r9, lr, #48, 30	; 0xc0
    19a4:	12680800 	rsbne	r0, r8, #0, 16
    19a8:	000a0800 	andeq	r0, sl, r0, lsl #16
    19ac:	00730071 	rsbseq	r0, r3, r1, ror r0
    19b0:	3024401a 	eorcc	r4, r4, sl, lsl r0
    19b4:	00009f2e 	andeq	r9, r0, lr, lsr #30
    19b8:	00000000 	andeq	r0, r0, r0
    19bc:	12680000 	rsbne	r0, r8, #0
    19c0:	126a0800 	rsbne	r0, sl, #0, 16
    19c4:	00010800 	andeq	r0, r1, r0, lsl #16
    19c8:	00126a51 	andseq	r6, r2, r1, asr sl
    19cc:	00127008 	andseq	r7, r2, r8
    19d0:	f3000408 	vshl.u8	d0, d8, d0
    19d4:	009f5101 	addseq	r5, pc, r1, lsl #2
    19d8:	00000000 	andeq	r0, r0, r0
    19dc:	70000000 	andvc	r0, r0, r0
    19e0:	a6080012 			; <UNDEFINED> instruction: 0xa6080012
    19e4:	01080012 	tsteq	r8, r2, lsl r0
    19e8:	12a65000 	adcne	r5, r6, #0
    19ec:	12ac0800 	adcne	r0, ip, #0, 16
    19f0:	00040800 	andeq	r0, r4, r0, lsl #16
    19f4:	9f5001f3 	svcls	0x005001f3
    19f8:	080012ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip}
    19fc:	080012ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, ip}
    1a00:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    1a04:	b4080012 	strlt	r0, [r8], #-18
    1a08:	04080012 	streq	r0, [r8], #-18
    1a0c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1a10:	0012b49f 	mulseq	r2, pc, r4	; <UNPREDICTABLE>
    1a14:	0012bc08 	andseq	fp, r2, r8, lsl #24
    1a18:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    1a24:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
    1a28:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
    1a2c:	98510001 	ldmdals	r1, {r0}^
    1a30:	ac080012 	stcge	0, cr0, [r8], {18}
    1a34:	04080012 	streq	r0, [r8], #-18
    1a38:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1a3c:	0012ac9f 	mulseq	r2, pc, ip	; <UNPREDICTABLE>
    1a40:	0012bc08 	andseq	fp, r2, r8, lsl #24
    1a44:	51000108 	tstpl	r0, r8, lsl #2
	...
    1a50:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
    1a54:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
    1a58:	9f300002 	svcls	0x00300002
    1a5c:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
    1a60:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
    1a64:	7131000b 	teqvc	r1, fp
    1a68:	0a253800 	beq	94fa70 <_Min_Stack_Size+0x94f670>
    1a6c:	241affff 	ldrcs	pc, [sl], #-4095	; 0xfff
    1a70:	0012949f 	mulseq	r2, pc, r4	; <UNPREDICTABLE>
    1a74:	00129808 	andseq	r9, r2, r8, lsl #16
    1a78:	31001208 	tstcc	r0, r8, lsl #4
    1a7c:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    1a80:	1affff0a 	bne	16b0 <_Min_Stack_Size+0x12b0>
    1a84:	0a007224 	beq	1e31c <_Min_Stack_Size+0x1df1c>
    1a88:	1a1affff 	bne	6c1a8c <_Min_Stack_Size+0x6c168c>
    1a8c:	0012ac9f 	mulseq	r2, pc, ip	; <UNPREDICTABLE>
    1a90:	0012b408 	andseq	fp, r2, r8, lsl #8
    1a94:	31001208 	tstcc	r0, r8, lsl #4
    1a98:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    1a9c:	1affff0a 	bne	16cc <_Min_Stack_Size+0x12cc>
    1aa0:	0a007224 	beq	1e338 <_Min_Stack_Size+0x1df38>
    1aa4:	1a1affff 	bne	6c1aa8 <_Min_Stack_Size+0x6c16a8>
    1aa8:	0012b49f 	mulseq	r2, pc, r4	; <UNPREDICTABLE>
    1aac:	0012bc08 	andseq	fp, r2, r8, lsl #24
    1ab0:	30000208 	andcc	r0, r0, r8, lsl #4
    1ab4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ab8:	00000000 	andeq	r0, r0, r0
    1abc:	00127000 	andseq	r7, r2, r0
    1ac0:	00127608 	andseq	r7, r2, r8, lsl #12
    1ac4:	30000208 	andcc	r0, r0, r8, lsl #4
    1ac8:	0012769f 	mulseq	r2, pc, r6	; <UNPREDICTABLE>
    1acc:	00128208 	andseq	r8, r2, r8, lsl #4
    1ad0:	71000908 	tstvc	r0, r8, lsl #18
    1ad4:	0a1a4f00 	beq	6956dc <_Min_Stack_Size+0x6952dc>
    1ad8:	9f1affff 	svcls	0x001affff
    1adc:	08001282 	stmdaeq	r0, {r1, r7, r9, ip}
    1ae0:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
    1ae4:	90520001 	subsls	r0, r2, r1
    1ae8:	9a080012 	bls	201b38 <_Min_Stack_Size+0x201738>
    1aec:	01080012 	tsteq	r8, r2, lsl r0
    1af0:	12ac5300 	adcne	r5, ip, #0, 6
    1af4:	12b40800 	adcsne	r0, r4, #0, 16
    1af8:	00010800 	andeq	r0, r1, r0, lsl #16
    1afc:	0012b453 	andseq	fp, r2, r3, asr r4
    1b00:	0012ba08 	andseq	fp, r2, r8, lsl #20
    1b04:	52000108 	andpl	r0, r0, #8, 2
    1b08:	080012ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, ip}
    1b0c:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
    1b10:	00530001 	subseq	r0, r3, r1
    1b14:	00000000 	andeq	r0, r0, r0
    1b18:	70000000 	andvc	r0, r0, r0
    1b1c:	76080012 			; <UNDEFINED> instruction: 0x76080012
    1b20:	02080012 	andeq	r0, r8, #18
    1b24:	769f3000 	ldrvc	r3, [pc], r0
    1b28:	8a080012 	bhi	201b78 <_Min_Stack_Size+0x201778>
    1b2c:	01080012 	tsteq	r8, r2, lsl r0
    1b30:	128a5300 	addne	r5, sl, #0, 6
    1b34:	12980800 	addsne	r0, r8, #0, 16
    1b38:	00080800 	andeq	r0, r8, r0, lsl #16
    1b3c:	fc090071 	stc2	0, cr0, [r9], {113}	; 0x71
    1b40:	9f253124 	svcls	0x00253124
    1b44:	080012ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip}
    1b48:	080012b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip}
    1b4c:	00710008 	rsbseq	r0, r1, r8
    1b50:	3124fc09 	msrcc	CPSR_s, r9, lsl #24
    1b54:	12b49f25 	adcsne	r9, r4, #37, 30	; 0x94
    1b58:	12b60800 	adcsne	r0, r6, #0, 16
    1b5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b60:	0012b653 	andseq	fp, r2, r3, asr r6
    1b64:	0012bc08 	andseq	fp, r2, r8, lsl #24
    1b68:	71000808 	tstvc	r0, r8, lsl #16
    1b6c:	24fc0900 	ldrbtcs	r0, [ip], #2304	; 0x900
    1b70:	009f2531 	addseq	r2, pc, r1, lsr r5	; <UNPREDICTABLE>
    1b74:	00000000 	andeq	r0, r0, r0
    1b78:	70000000 	andvc	r0, r0, r0
    1b7c:	a6080012 			; <UNDEFINED> instruction: 0xa6080012
    1b80:	02080012 	andeq	r0, r8, #18
    1b84:	a69f3000 	ldrge	r3, [pc], r0
    1b88:	ac080012 	stcge	0, cr0, [r8], {18}
    1b8c:	01080012 	tsteq	r8, r2, lsl r0
    1b90:	12ac5000 	adcne	r5, ip, #0
    1b94:	12ae0800 	adcne	r0, lr, #0, 16
    1b98:	00020800 	andeq	r0, r2, r0, lsl #16
    1b9c:	12ae9f30 	adcne	r9, lr, #48, 30	; 0xc0
    1ba0:	12b40800 	adcsne	r0, r4, #0, 16
    1ba4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ba8:	0012b450 	andseq	fp, r2, r0, asr r4
    1bac:	0012bc08 	andseq	fp, r2, r8, lsl #24
    1bb0:	30000208 	andcc	r0, r0, r8, lsl #4
    1bb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bb8:	00000000 	andeq	r0, r0, r0
    1bbc:	0012bc00 	andseq	fp, r2, r0, lsl #24
    1bc0:	0012be08 	andseq	fp, r2, r8, lsl #28
    1bc4:	51000108 	tstpl	r0, r8, lsl #2
    1bc8:	080012be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip}
    1bcc:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
    1bd0:	01f30004 	mvnseq	r0, r4
    1bd4:	00009f51 	andeq	r9, r0, r1, asr pc
    1bd8:	00000000 	andeq	r0, r0, r0
    1bdc:	12bc0000 	adcsne	r0, ip, #0
    1be0:	12be0800 	adcsne	r0, lr, #0, 16
    1be4:	00050800 	andeq	r0, r5, r0, lsl #16
    1be8:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    1bec:	0012be9f 	mulseq	r2, pc, lr	; <UNPREDICTABLE>
    1bf0:	0012cc08 	andseq	ip, r2, r8, lsl #24
    1bf4:	f3000608 	vmax.u8	d0, d0, d8
    1bf8:	25385101 	ldrcs	r5, [r8, #-257]!	; 0x101
    1bfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c00:	00000000 	andeq	r0, r0, r0
    1c04:	00130000 	andseq	r0, r3, r0
    1c08:	00132808 	andseq	r2, r3, r8, lsl #16
    1c0c:	50000108 	andpl	r0, r0, r8, lsl #2
    1c10:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
    1c14:	0800132e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, ip}
    1c18:	01f30004 	mvnseq	r0, r4
    1c1c:	00009f50 	andeq	r9, r0, r0, asr pc
    1c20:	00000000 	andeq	r0, r0, r0
    1c24:	13000000 	movwne	r0, #0
    1c28:	13100800 	tstne	r0, #0, 16
    1c2c:	00010800 	andeq	r0, r1, r0, lsl #16
    1c30:	00131051 	andseq	r1, r3, r1, asr r0
    1c34:	00132e08 	andseq	r2, r3, r8, lsl #28
    1c38:	f3000408 	vshl.u8	d0, d8, d0
    1c3c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    1c48:	14080013 	strne	r0, [r8], #-19
    1c4c:	02080013 	andeq	r0, r8, #19
    1c50:	149f3000 	ldrne	r3, [pc], #0	; 1c58 <_Min_Stack_Size+0x1858>
    1c54:	1a080013 	bne	201ca8 <_Min_Stack_Size+0x2018a8>
    1c58:	05080013 	streq	r0, [r8, #-19]
    1c5c:	00713f00 	rsbseq	r3, r1, r0, lsl #30
    1c60:	131a9f24 	tstne	sl, #36, 30	; 0x90
    1c64:	131e0800 	tstne	lr, #0, 16
    1c68:	00010800 	andeq	r0, r1, r0, lsl #16
    1c6c:	00131e52 	andseq	r1, r3, r2, asr lr
    1c70:	00132e08 	andseq	r2, r3, r8, lsl #28
    1c74:	3f000508 	svccc	0x00000508
    1c78:	9f240071 	svcls	0x00240071
	...
    1c84:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
    1c88:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
    1c8c:	9f300002 	svcls	0x00300002
    1c90:	0800134c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip}
    1c94:	08001350 	stmdaeq	r0, {r4, r6, r8, r9, ip}
    1c98:	00700009 	rsbseq	r0, r0, r9
    1c9c:	1a01000a 	bne	41ccc <_Min_Stack_Size+0x418cc>
    1ca0:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    1ca4:	00000000 	andeq	r0, r0, r0
    1ca8:	Address 0x00001ca8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000044 	andeq	r0, r0, r4, asr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
  14:	00000016 	andeq	r0, r0, r6, lsl r0
  18:	080001e0 	stmdaeq	r0, {r5, r6, r7, r8}
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	08000224 	stmdaeq	r0, {r2, r5, r9}
  24:	0000003c 	andeq	r0, r0, ip, lsr r0
  28:	08000260 	stmdaeq	r0, {r5, r6, r9}
  2c:	0000002c 	andeq	r0, r0, ip, lsr #32
  30:	0800028c 	stmdaeq	r0, {r2, r3, r7, r9}
  34:	00000080 	andeq	r0, r0, r0, lsl #1
  38:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
  3c:	00000084 	andeq	r0, r0, r4, lsl #1
	...
  48:	0000005c 	andeq	r0, r0, ip, asr r0
  4c:	08fe0002 	ldmeq	lr!, {r1}^
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
  5c:	00000002 	andeq	r0, r0, r2
  60:	08000394 	stmdaeq	r0, {r2, r4, r7, r8, r9}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
  6c:	00000002 	andeq	r0, r0, r2
  70:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
  74:	00000002 	andeq	r0, r0, r2
  78:	080003a0 	stmdaeq	r0, {r5, r7, r8, r9}
  7c:	00000002 	andeq	r0, r0, r2
  80:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  84:	00000002 	andeq	r0, r0, r2
  88:	080003a8 	stmdaeq	r0, {r3, r5, r7, r8, r9}
  8c:	00000002 	andeq	r0, r0, r2
  90:	080003ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9}
  94:	00000002 	andeq	r0, r0, r2
  98:	080003b0 	stmdaeq	r0, {r4, r5, r7, r8, r9}
  9c:	00000002 	andeq	r0, r0, r2
	...
  a8:	00000024 	andeq	r0, r0, r4, lsr #32
  ac:	0a310002 	beq	c400bc <_Min_Stack_Size+0xc3fcbc>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	080003b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9}
  bc:	00000110 	andeq	r0, r0, r0, lsl r1
  c0:	080004c4 	stmdaeq	r0, {r2, r6, r7, sl}
  c4:	00000070 	andeq	r0, r0, r0, ror r0
	...
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	100f0002 	andne	r0, pc, r2
  d8:	00040000 	andeq	r0, r4, r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	080001ac 	stmdaeq	r0, {r2, r3, r5, r7, r8}
  e4:	00000008 	andeq	r0, r0, r8
	...
  f0:	00000024 	andeq	r0, r0, r4, lsr #32
  f4:	10720002 	rsbsne	r0, r2, r2
  f8:	00040000 	andeq	r0, r4, r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	08000534 	stmdaeq	r0, {r2, r4, r5, r8, sl}
 104:	0000004c 	andeq	r0, r0, ip, asr #32
 108:	08000580 	stmdaeq	r0, {r7, r8, sl}
 10c:	00000004 	andeq	r0, r0, r4
	...
 118:	0000003c 	andeq	r0, r0, ip, lsr r0
 11c:	10e50002 	rscne	r0, r5, r2
 120:	00040000 	andeq	r0, r4, r0
 124:	00000000 	andeq	r0, r0, r0
 128:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
 12c:	00000014 	andeq	r0, r0, r4, lsl r0
 130:	08000598 	stmdaeq	r0, {r3, r4, r7, r8, sl}
 134:	00000078 	andeq	r0, r0, r8, ror r0
 138:	08000610 	stmdaeq	r0, {r4, r9, sl}
 13c:	00000014 	andeq	r0, r0, r4, lsl r0
 140:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 14c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 158:	00000084 	andeq	r0, r0, r4, lsl #1
 15c:	162c0002 	strtne	r0, [ip], -r2
 160:	00040000 	andeq	r0, r4, r0
 164:	00000000 	andeq	r0, r0, r0
 168:	08000654 	stmdaeq	r0, {r2, r4, r6, r9, sl}
 16c:	0000015c 	andeq	r0, r0, ip, asr r1
 170:	080007b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl}
 174:	000000bc 	strheq	r0, [r0], -ip
 178:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
 17c:	00000012 	andeq	r0, r0, r2, lsl r0
 180:	08000880 	stmdaeq	r0, {r7, fp}
 184:	00000024 	andeq	r0, r0, r4, lsr #32
 188:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
 18c:	0000000c 	andeq	r0, r0, ip
 190:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 194:	00000006 	andeq	r0, r0, r6
 198:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
 19c:	0000000c 	andeq	r0, r0, ip
 1a0:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 1a4:	00000006 	andeq	r0, r0, r6
 1a8:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 1b4:	00000004 	andeq	r0, r0, r4
 1b8:	080008d4 	stmdaeq	r0, {r2, r4, r6, r7, fp}
 1bc:	0000000a 	andeq	r0, r0, sl
 1c0:	080008e0 	stmdaeq	r0, {r5, r6, r7, fp}
 1c4:	00000004 	andeq	r0, r0, r4
 1c8:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 1cc:	00000008 	andeq	r0, r0, r8
 1d0:	080008ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp}
 1d4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 1e0:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 1e4:	1e710002 	cdpne	0, 7, cr0, cr1, cr2, {0}
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1f4:	00000050 	andeq	r0, r0, r0, asr r0
 1f8:	08000964 	stmdaeq	r0, {r2, r5, r6, r8, fp}
 1fc:	00000010 	andeq	r0, r0, r0, lsl r0
 200:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 204:	00000038 	andeq	r0, r0, r8, lsr r0
 208:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
 214:	0000000c 	andeq	r0, r0, ip
 218:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 21c:	00000020 	andeq	r0, r0, r0, lsr #32
 220:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 224:	0000000c 	andeq	r0, r0, ip
 228:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 22c:	00000024 	andeq	r0, r0, r4, lsr #32
 230:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
 234:	0000000c 	andeq	r0, r0, ip
 238:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 244:	0000000c 	andeq	r0, r0, ip
 248:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
 254:	0000000c 	andeq	r0, r0, ip
 258:	08000a70 	stmdaeq	r0, {r4, r5, r6, r9, fp}
 25c:	0000000c 	andeq	r0, r0, ip
 260:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 264:	00000014 	andeq	r0, r0, r4, lsl r0
 268:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 26c:	00000014 	andeq	r0, r0, r4, lsl r0
 270:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 274:	00000014 	andeq	r0, r0, r4, lsl r0
 278:	08000ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp}
 27c:	00000010 	andeq	r0, r0, r0, lsl r0
 280:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 284:	00000014 	andeq	r0, r0, r4, lsl r0
 288:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 28c:	00000014 	andeq	r0, r0, r4, lsl r0
 290:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 294:	00000014 	andeq	r0, r0, r4, lsl r0
 298:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
 29c:	00000090 	muleq	r0, r0, r0
 2a0:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
 2a4:	00000030 	andeq	r0, r0, r0, lsr r0
 2a8:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
 2ac:	0000000c 	andeq	r0, r0, ip
 2b0:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	08000be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp}
 2c4:	00000018 	andeq	r0, r0, r8, lsl r0
 2c8:	08000c00 	stmdaeq	r0, {sl, fp}
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
 2d4:	00000018 	andeq	r0, r0, r8, lsl r0
 2d8:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	08000c64 	stmdaeq	r0, {r2, r5, r6, sl, fp}
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	08000c70 	stmdaeq	r0, {r4, r5, r6, sl, fp}
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	08000c88 	stmdaeq	r0, {r3, r7, sl, fp}
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 304:	00000018 	andeq	r0, r0, r8, lsl r0
 308:	08000cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp}
 30c:	00000018 	andeq	r0, r0, r8, lsl r0
 310:	08000cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp}
 314:	00000018 	andeq	r0, r0, r8, lsl r0
 318:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 31c:	00000018 	andeq	r0, r0, r8, lsl r0
 320:	08000d00 	stmdaeq	r0, {r8, sl, fp}
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 32c:	00000018 	andeq	r0, r0, r8, lsl r0
 330:	08000d30 	stmdaeq	r0, {r4, r5, r8, sl, fp}
 334:	00000018 	andeq	r0, r0, r8, lsl r0
 338:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 33c:	00000018 	andeq	r0, r0, r8, lsl r0
 340:	08000d60 	stmdaeq	r0, {r5, r6, r8, sl, fp}
 344:	00000018 	andeq	r0, r0, r8, lsl r0
 348:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
 34c:	00000018 	andeq	r0, r0, r8, lsl r0
 350:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 364:	00000018 	andeq	r0, r0, r8, lsl r0
 368:	08000dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp}
 36c:	00000018 	andeq	r0, r0, r8, lsl r0
 370:	08000df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp}
 374:	00000034 	andeq	r0, r0, r4, lsr r0
 378:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 37c:	00000010 	andeq	r0, r0, r0, lsl r0
 380:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 384:	00000014 	andeq	r0, r0, r4, lsl r0
 388:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
 38c:	0000000c 	andeq	r0, r0, ip
	...
 398:	000000fc 	strdeq	r0, [r0], -ip
 39c:	2d430002 	stclcs	0, cr0, [r3, #-8]
 3a0:	00040000 	andeq	r0, r4, r0
 3a4:	00000000 	andeq	r0, r0, r0
 3a8:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 3ac:	0000010c 	andeq	r0, r0, ip, lsl #2
 3b0:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
 3b4:	000000c4 	andeq	r0, r0, r4, asr #1
 3b8:	08001024 	stmdaeq	r0, {r2, r5, ip}
 3bc:	00000016 	andeq	r0, r0, r6, lsl r0
 3c0:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
 3c4:	00000022 	andeq	r0, r0, r2, lsr #32
 3c8:	08001060 	stmdaeq	r0, {r5, r6, ip}
 3cc:	0000000c 	andeq	r0, r0, ip
 3d0:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	08001088 	stmdaeq	r0, {r3, r7, ip}
 3dc:	00000012 	andeq	r0, r0, r2, lsl r0
 3e0:	0800109c 	stmdaeq	r0, {r2, r3, r4, r7, ip}
 3e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3e8:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 3ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 3f0:	080010d4 	stmdaeq	r0, {r2, r4, r6, r7, ip}
 3f4:	00000008 	andeq	r0, r0, r8
 3f8:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 3fc:	00000008 	andeq	r0, r0, r8
 400:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 404:	00000016 	andeq	r0, r0, r6, lsl r0
 408:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
 40c:	0000001a 	andeq	r0, r0, sl, lsl r0
 410:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
 414:	00000016 	andeq	r0, r0, r6, lsl r0
 418:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 41c:	00000016 	andeq	r0, r0, r6, lsl r0
 420:	08001148 	stmdaeq	r0, {r3, r6, r8, ip}
 424:	0000001a 	andeq	r0, r0, sl, lsl r0
 428:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
 42c:	0000000c 	andeq	r0, r0, ip
 430:	08001170 	stmdaeq	r0, {r4, r5, r6, r8, ip}
 434:	0000001a 	andeq	r0, r0, sl, lsl r0
 438:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 43c:	00000012 	andeq	r0, r0, r2, lsl r0
 440:	080011a0 	stmdaeq	r0, {r5, r7, r8, ip}
 444:	0000001a 	andeq	r0, r0, sl, lsl r0
 448:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
 44c:	0000001a 	andeq	r0, r0, sl, lsl r0
 450:	080011d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip}
 454:	00000016 	andeq	r0, r0, r6, lsl r0
 458:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
 45c:	0000001a 	andeq	r0, r0, sl, lsl r0
 460:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	08001220 	stmdaeq	r0, {r5, r9, ip}
 46c:	0000003a 	andeq	r0, r0, sl, lsr r0
 470:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
 474:	0000000c 	andeq	r0, r0, ip
 478:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
 47c:	00000008 	andeq	r0, r0, r8
 480:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 484:	0000004c 	andeq	r0, r0, ip, asr #32
 488:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 48c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 498:	0000004c 	andeq	r0, r0, ip, asr #32
 49c:	38f20002 	ldmcc	r2!, {r1}^
 4a0:	00040000 	andeq	r0, r4, r0
 4a4:	00000000 	andeq	r0, r0, r0
 4a8:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
 4ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 4b0:	080012e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip}
 4b4:	0000000c 	andeq	r0, r0, ip
 4b8:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
 4bc:	0000000c 	andeq	r0, r0, ip
 4c0:	08001300 	stmdaeq	r0, {r8, r9, ip}
 4c4:	0000002e 	andeq	r0, r0, lr, lsr #32
 4c8:	08001330 	stmdaeq	r0, {r4, r5, r8, r9, ip}
 4cc:	0000000c 	andeq	r0, r0, ip
 4d0:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
 4d4:	0000000c 	andeq	r0, r0, ip
 4d8:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
 4dc:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	08000334 	stmdaeq	r0, {r2, r4, r5, r8, r9}
   4:	08000362 	stmdaeq	r0, {r1, r5, r6, r8, r9}
   8:	08000364 	stmdaeq	r0, {r2, r5, r6, r8, r9}
   c:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
	...
  18:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
  1c:	080001de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8}
  20:	080001e0 	stmdaeq	r0, {r5, r6, r7, r8}
  24:	08000224 	stmdaeq	r0, {r2, r5, r9}
  28:	08000224 	stmdaeq	r0, {r2, r5, r9}
  2c:	08000260 	stmdaeq	r0, {r5, r6, r9}
  30:	08000260 	stmdaeq	r0, {r5, r6, r9}
  34:	0800028c 	stmdaeq	r0, {r2, r3, r7, r9}
  38:	0800028c 	stmdaeq	r0, {r2, r3, r7, r9}
  3c:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
  40:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
  44:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
	...
  50:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
  54:	08000392 	stmdaeq	r0, {r1, r4, r7, r8, r9}
  58:	08000394 	stmdaeq	r0, {r2, r4, r7, r8, r9}
  5c:	08000396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9}
  60:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
  64:	0800039a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9}
  68:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
  6c:	0800039e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9}
  70:	080003a0 	stmdaeq	r0, {r5, r7, r8, r9}
  74:	080003a2 	stmdaeq	r0, {r1, r5, r7, r8, r9}
  78:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  7c:	080003a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9}
  80:	080003a8 	stmdaeq	r0, {r3, r5, r7, r8, r9}
  84:	080003aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9}
  88:	080003ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9}
  8c:	080003ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9}
  90:	080003b0 	stmdaeq	r0, {r4, r5, r7, r8, r9}
  94:	080003b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9}
	...
  a0:	080003de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9}
  a4:	08000498 	stmdaeq	r0, {r3, r4, r7, sl}
  a8:	080004a4 	stmdaeq	r0, {r2, r5, r7, sl}
  ac:	080004c4 	stmdaeq	r0, {r2, r6, r7, sl}
	...
  b8:	080003b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9}
  bc:	080004c4 	stmdaeq	r0, {r2, r6, r7, sl}
  c0:	080004c4 	stmdaeq	r0, {r2, r6, r7, sl}
  c4:	08000534 	stmdaeq	r0, {r2, r4, r5, r8, sl}
	...
  d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08000534 	stmdaeq	r0, {r2, r4, r5, r8, sl}
  dc:	08000580 	stmdaeq	r0, {r7, r8, sl}
  e0:	08000580 	stmdaeq	r0, {r7, r8, sl}
  e4:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
	...
  f0:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
  f4:	08000598 	stmdaeq	r0, {r3, r4, r7, r8, sl}
  f8:	08000598 	stmdaeq	r0, {r3, r4, r7, r8, sl}
  fc:	08000610 	stmdaeq	r0, {r4, r9, sl}
 100:	08000610 	stmdaeq	r0, {r4, r9, sl}
 104:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 108:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 10c:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 110:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 114:	08000654 	stmdaeq	r0, {r2, r4, r6, r9, sl}
	...
 120:	08000654 	stmdaeq	r0, {r2, r4, r6, r9, sl}
 124:	080007b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl}
 128:	080007b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl}
 12c:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
 130:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
 134:	0800087e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp}
 138:	08000880 	stmdaeq	r0, {r7, fp}
 13c:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
 140:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
 144:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 148:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 14c:	080008b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp}
 150:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
 154:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 158:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 15c:	080008ca 	stmdaeq	r0, {r1, r3, r6, r7, fp}
 160:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 164:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 168:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 16c:	080008d4 	stmdaeq	r0, {r2, r4, r6, r7, fp}
 170:	080008d4 	stmdaeq	r0, {r2, r4, r6, r7, fp}
 174:	080008de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp}
 178:	080008e0 	stmdaeq	r0, {r5, r6, r7, fp}
 17c:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 180:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 184:	080008ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp}
 188:	080008ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp}
 18c:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
	...
 198:	08000978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp}
 19c:	0800097a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp}
 1a0:	0800097c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp}
 1a4:	08000982 	stmdaeq	r0, {r1, r7, r8, fp}
	...
 1b0:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 1b4:	08000964 	stmdaeq	r0, {r2, r5, r6, r8, fp}
 1b8:	08000964 	stmdaeq	r0, {r2, r5, r6, r8, fp}
 1bc:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 1c0:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 1c4:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 1c8:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 1cc:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
 1d0:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
 1d4:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 1d8:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 1dc:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 1e0:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 1e4:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 1e8:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 1ec:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
 1f0:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
 1f4:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 1f8:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 1fc:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 200:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 204:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 208:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 20c:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
 210:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
 214:	08000a70 	stmdaeq	r0, {r4, r5, r6, r9, fp}
 218:	08000a70 	stmdaeq	r0, {r4, r5, r6, r9, fp}
 21c:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 220:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 224:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 228:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 22c:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 230:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 234:	08000ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp}
 238:	08000ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp}
 23c:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 240:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 244:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 248:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 24c:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 250:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 254:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
 258:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
 25c:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
 260:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
 264:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
 268:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
 26c:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
 270:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
 274:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
 278:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
 27c:	08000be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp}
 280:	08000be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp}
 284:	08000c00 	stmdaeq	r0, {sl, fp}
 288:	08000c00 	stmdaeq	r0, {sl, fp}
 28c:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
 290:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
 294:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
 298:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
 29c:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
 2a0:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
 2a4:	08000c64 	stmdaeq	r0, {r2, r5, r6, sl, fp}
 2a8:	08000c64 	stmdaeq	r0, {r2, r5, r6, sl, fp}
 2ac:	08000c70 	stmdaeq	r0, {r4, r5, r6, sl, fp}
 2b0:	08000c70 	stmdaeq	r0, {r4, r5, r6, sl, fp}
 2b4:	08000c88 	stmdaeq	r0, {r3, r7, sl, fp}
 2b8:	08000c88 	stmdaeq	r0, {r3, r7, sl, fp}
 2bc:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 2c0:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 2c4:	08000cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp}
 2c8:	08000cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp}
 2cc:	08000cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp}
 2d0:	08000cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp}
 2d4:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 2d8:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 2dc:	08000d00 	stmdaeq	r0, {r8, sl, fp}
 2e0:	08000d00 	stmdaeq	r0, {r8, sl, fp}
 2e4:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 2e8:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 2ec:	08000d30 	stmdaeq	r0, {r4, r5, r8, sl, fp}
 2f0:	08000d30 	stmdaeq	r0, {r4, r5, r8, sl, fp}
 2f4:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 2f8:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 2fc:	08000d60 	stmdaeq	r0, {r5, r6, r8, sl, fp}
 300:	08000d60 	stmdaeq	r0, {r5, r6, r8, sl, fp}
 304:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
 308:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
 30c:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 310:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 314:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
 318:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
 31c:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 320:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 324:	08000dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp}
 328:	08000dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp}
 32c:	08000df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp}
 330:	08000df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp}
 334:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 338:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 33c:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 340:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 344:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
 348:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
 34c:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
	...
 358:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 35c:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
 360:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
 364:	08001024 	stmdaeq	r0, {r2, r5, ip}
 368:	08001024 	stmdaeq	r0, {r2, r5, ip}
 36c:	0800103a 	stmdaeq	r0, {r1, r3, r4, r5, ip}
 370:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
 374:	0800105e 	stmdaeq	r0, {r1, r2, r3, r4, r6, ip}
 378:	08001060 	stmdaeq	r0, {r5, r6, ip}
 37c:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
 380:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
 384:	08001086 	stmdaeq	r0, {r1, r2, r7, ip}
 388:	08001088 	stmdaeq	r0, {r3, r7, ip}
 38c:	0800109a 	stmdaeq	r0, {r1, r3, r4, r7, ip}
 390:	0800109c 	stmdaeq	r0, {r2, r3, r4, r7, ip}
 394:	080010b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, ip}
 398:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 39c:	080010d2 	stmdaeq	r0, {r1, r4, r6, r7, ip}
 3a0:	080010d4 	stmdaeq	r0, {r2, r4, r6, r7, ip}
 3a4:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 3a8:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 3ac:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 3b0:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 3b4:	080010fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, ip}
 3b8:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
 3bc:	08001116 	stmdaeq	r0, {r1, r2, r4, r8, ip}
 3c0:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
 3c4:	0800112e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip}
 3c8:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 3cc:	08001146 	stmdaeq	r0, {r1, r2, r6, r8, ip}
 3d0:	08001148 	stmdaeq	r0, {r3, r6, r8, ip}
 3d4:	08001162 	stmdaeq	r0, {r1, r5, r6, r8, ip}
 3d8:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
 3dc:	08001170 	stmdaeq	r0, {r4, r5, r6, r8, ip}
 3e0:	08001170 	stmdaeq	r0, {r4, r5, r6, r8, ip}
 3e4:	0800118a 	stmdaeq	r0, {r1, r3, r7, r8, ip}
 3e8:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 3ec:	0800119e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, ip}
 3f0:	080011a0 	stmdaeq	r0, {r5, r7, r8, ip}
 3f4:	080011ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, ip}
 3f8:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
 3fc:	080011d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, ip}
 400:	080011d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip}
 404:	080011ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, ip}
 408:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
 40c:	0800120a 	stmdaeq	r0, {r1, r3, r9, ip}
 410:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 414:	08001220 	stmdaeq	r0, {r5, r9, ip}
 418:	08001220 	stmdaeq	r0, {r5, r9, ip}
 41c:	0800125a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip}
 420:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
 424:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
 428:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
 42c:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 430:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 434:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 438:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 43c:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
	...
 448:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
 44c:	080012e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, ip}
 450:	080012e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip}
 454:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
 458:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
 45c:	08001300 	stmdaeq	r0, {r8, r9, ip}
 460:	08001300 	stmdaeq	r0, {r8, r9, ip}
 464:	0800132e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, ip}
 468:	08001330 	stmdaeq	r0, {r4, r5, r8, r9, ip}
 46c:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
 470:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
 474:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
 478:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
 47c:	08001358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip}
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
       4:	01f50002 	mvnseq	r0, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	61636f6c 	cmnvs	r3, ip, ror #30
      24:	73632f6c 	cmnvc	r3, #108, 30	; 0x1b0
      28:	63672f6c 	cmnvs	r7, #108, 30	; 0x1b0
      2c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
      30:	6f6e2d6d 	svcvs	0x006e2d6d
      34:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
      38:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
      3c:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
      40:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
      44:	612f3271 	teqvs	pc, r1, ror r2	; <UNPREDICTABLE>
      48:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
      4c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
      50:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      54:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      58:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
      5c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
      60:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
      64:	73752f00 	cmnvc	r5, #0, 30
      68:	6f6c2f72 	svcvs	0x006c2f72
      6c:	2f6c6163 	svccs	0x006c6163
      70:	2f6c7363 	svccs	0x006c7363
      74:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
      78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
      80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      84:	5f342d69 	svcpl	0x00342d69
      88:	30322d38 	eorscc	r2, r2, r8, lsr sp
      8c:	32713431 	rsbscc	r3, r1, #822083584	; 0x31000000
      90:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      94:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      98:	61652d65 	cmnvs	r5, r5, ror #26
      9c:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      a0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
      a4:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
      a8:	54532f2e 	ldrbpl	r2, [r3], #-3886	; 0xf2e
      ac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      b0:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
      b4:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
      b8:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
      bc:	465f7972 			; <UNDEFINED> instruction: 0x465f7972
      c0:	31565f57 	cmpcc	r6, r7, asr pc
      c4:	312e302e 	teqcc	lr, lr, lsr #32
      c8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
      cc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
      d0:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
      d4:	5349534d 	movtpl	r5, #37709	; 0x934d
      d8:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
      dc:	2f656369 	svccs	0x00656369
      e0:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
      e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      e8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      ec:	636e492f 	cmnvs	lr, #770048	; 0xbc000
      f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
      f4:	2f2e2e00 	svccs	0x002e2e00
      f8:	334d5453 	movtcc	r5, #54355	; 0xd453
      fc:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     100:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     104:	6f637369 	svcvs	0x00637369
     108:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     10c:	5f57465f 	svcpl	0x0057465f
     110:	302e3156 	eorcc	r3, lr, r6, asr r1
     114:	4c2f312e 	stfmis	f3, [pc], #-184	; 64 <_Min_Heap_Size+0x64>
     118:	61726269 	cmnvs	r2, r9, ror #4
     11c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     120:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     124:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     128:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     12c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     130:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     134:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     138:	2f726576 	svccs	0x00726576
     13c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     140:	532f2e2e 	teqpl	pc, #736	; 0x2e0
     144:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     148:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     14c:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     150:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     154:	5f797265 	svcpl	0x00797265
     158:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
     15c:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
     160:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
     164:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     168:	2f736569 	svccs	0x00736569
     16c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     170:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     174:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     178:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
     17c:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
     180:	00000063 	andeq	r0, r0, r3, rrx
     184:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     188:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     18c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     190:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     194:	00010068 	andeq	r0, r1, r8, rrx
     198:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     19c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     1a0:	00020068 	andeq	r0, r2, r8, rrx
     1a4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1a8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     1ac:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     1b0:	00000300 	andeq	r0, r0, r0, lsl #6
     1b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     1b8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     1bc:	70675f78 	rsbvc	r5, r7, r8, ror pc
     1c0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     1c4:	00000400 	andeq	r0, r0, r0, lsl #8
     1c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     1cc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     1d0:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
     1d4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     1d8:	00040068 	andeq	r0, r4, r8, rrx
     1dc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     1e0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     1e4:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     1e8:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     1ec:	00000400 	andeq	r0, r0, r0, lsl #8
     1f0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     1f4:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     1f8:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     1fc:	00000000 	andeq	r0, r0, r0
     200:	01c80205 	biceq	r0, r8, r5, lsl #4
     204:	29030800 	stmdbcs	r3, {fp}
     208:	2f4c2301 	svccs	0x004c2301
     20c:	0002022d 	andeq	r0, r2, sp, lsr #4
     210:	05000101 	streq	r0, [r0, #-257]	; 0x101
     214:	0001e002 	andeq	lr, r1, r2
     218:	01340308 	teqeq	r4, r8, lsl #6
     21c:	03200903 	teqeq	r0, #49152	; 0xc000
     220:	1f262077 	svcne	0x00262077
     224:	2f302924 	svccs	0x00302924
     228:	252a312c 	strcs	r3, [sl, #-300]!	; 0x12c
     22c:	02595931 	subseq	r5, r9, #802816	; 0xc4000
     230:	01010004 	tsteq	r1, r4
     234:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     238:	03080002 	movweq	r0, #32770	; 0x8002
     23c:	030100c7 	movweq	r0, #4295	; 0x10c7
     240:	6e032012 	mcrvs	0, 0, r2, cr3, cr2, {0}
     244:	200d0320 	andcs	r0, sp, r0, lsr #6
     248:	7a032124 	bvc	c86e0 <_Min_Stack_Size+0xc82e0>
     24c:	2f2f2f2e 	svccs	0x002f2f2e
     250:	26292f2f 	strtcs	r2, [r9], -pc, lsr #30
     254:	04024b2f 	streq	r4, [r2], #-2863	; 0xb2f
     258:	00010100 	andeq	r0, r1, r0, lsl #2
     25c:	02600205 	rsbeq	r0, r0, #1342177280	; 0x50000000
     260:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
     264:	00210100 	eoreq	r0, r1, r0, lsl #2
     268:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     26c:	07025667 	streq	r5, [r2, -r7, ror #12]
     270:	00010100 	andeq	r0, r1, r0, lsl #2
     274:	028c0205 	addeq	r0, ip, #1342177280	; 0x50000000
     278:	e7030800 	str	r0, [r3, -r0, lsl #16]
     27c:	6d6a0100 	stfvse	f0, [sl, #-0]
     280:	67906e03 	ldrvs	r6, [r0, r3, lsl #28]
     284:	48676748 	stmdami	r7!, {r3, r6, r8, r9, sl, sp, lr}^
     288:	024a1803 	subeq	r1, sl, #196608	; 0x30000
     28c:	0101000d 	tsteq	r1, sp
     290:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     294:	03080003 	movweq	r0, #32771	; 0x8003
     298:	210100fb 	strdcs	r0, [r1, -fp]
     29c:	3d312f2f 	ldccc	15, cr2, [r1, #-188]!	; 0xffffff44
     2a0:	02004c3d 	andeq	r4, r0, #15616	; 0x3d00
     2a4:	673f0104 	ldrvs	r0, [pc, -r4, lsl #2]!
     2a8:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     2ac:	4b674f01 	blmi	19d3eb8 <_Min_Stack_Size+0x19d3ab8>
     2b0:	01040200 	mrseq	r0, R12_usr
     2b4:	67207a03 	strvs	r7, [r0, -r3, lsl #20]!
     2b8:	01001002 	tsteq	r0, r2
     2bc:	0001ad01 	andeq	sl, r1, r1, lsl #26
     2c0:	19000200 	stmdbne	r0, {r9}
     2c4:	02000001 	andeq	r0, r0, #1
     2c8:	0d0efb01 	vstreq	d15, [lr, #-4]
     2cc:	01010100 	mrseq	r0, (UNDEF: 17)
     2d0:	00000001 	andeq	r0, r0, r1
     2d4:	01000001 	tsteq	r0, r1
     2d8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     2dc:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     2e0:	632f6c61 	teqvs	pc, #24832	; 0x6100
     2e4:	672f6c73 			; <UNDEFINED> instruction: 0x672f6c73
     2e8:	612d6363 	teqvs	sp, r3, ror #6
     2ec:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     2f0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     2f4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     2f8:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     2fc:	3130322d 	teqcc	r0, sp, lsr #4
     300:	2f327134 	svccs	0x00327134
     304:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     308:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     30c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     310:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     314:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     318:	616d2f65 	cmnvs	sp, r5, ror #30
     31c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     320:	752f0065 	strvc	r0, [pc, #-101]!	; 2c3 <_Min_Heap_Size+0x2c3>
     324:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 160 <_Min_Heap_Size+0x160>
     328:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     32c:	6c73632f 	ldclvs	3, cr6, [r3], #-188	; 0xffffff44
     330:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     334:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     338:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     33c:	61652d65 	cmnvs	r5, r5, ror #26
     340:	342d6962 	strtcc	r6, [sp], #-2402	; 0x962
     344:	322d385f 	eorcc	r3, sp, #6225920	; 0x5f0000
     348:	71343130 	teqvc	r4, r0, lsr r1
     34c:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
     350:	6f6e2d6d 	svcvs	0x006e2d6d
     354:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     358:	2f696261 	svccs	0x00696261
     35c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     360:	00656475 	rsbeq	r6, r5, r5, ror r4
     364:	532f2e2e 	teqpl	pc, #736	; 0x2e0
     368:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     36c:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     370:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     374:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     378:	5f797265 	svcpl	0x00797265
     37c:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
     380:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
     384:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
     388:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     38c:	2f736569 	svccs	0x00736569
     390:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     394:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     398:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     39c:	73000065 	movwvc	r0, #101	; 0x65
     3a0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     3a4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     3a8:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
     3ac:	00000063 	andeq	r0, r0, r3, rrx
     3b0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     3b4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     3b8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3bc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     3c0:	00010068 	andeq	r0, r1, r8, rrx
     3c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     3c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     3cc:	00020068 	andeq	r0, r2, r8, rrx
     3d0:	726f6300 	rsbvc	r6, pc, #0, 6
     3d4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     3d8:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     3dc:	00000003 	andeq	r0, r0, r3
     3e0:	90020500 	andls	r0, r2, r0, lsl #10
     3e4:	03080003 	movweq	r0, #32771	; 0x8003
     3e8:	01020136 	tsteq	r2, r6, lsr r1
     3ec:	00010100 	andeq	r0, r1, r0, lsl #2
     3f0:	03940205 	orrseq	r0, r4, #1342177280	; 0x50000000
     3f4:	3f030800 	svccc	0x00030800
     3f8:	00010201 	andeq	r0, r1, r1, lsl #4
     3fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     400:	00039802 	andeq	r9, r3, r2, lsl #16
     404:	00cc0308 	sbceq	r0, ip, r8, lsl #6
     408:	00010201 	andeq	r0, r1, r1, lsl #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	00039c02 	andeq	r9, r3, r2, lsl #24
     414:	00d90308 	sbcseq	r0, r9, r8, lsl #6
     418:	00010201 	andeq	r0, r1, r1, lsl #4
     41c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     420:	0003a002 	andeq	sl, r3, r2
     424:	00e60308 	rsceq	r0, r6, r8, lsl #6
     428:	00010201 	andeq	r0, r1, r1, lsl #4
     42c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     430:	0003a402 	andeq	sl, r3, r2, lsl #8
     434:	00f30308 	rscseq	r0, r3, r8, lsl #6
     438:	00010201 	andeq	r0, r1, r1, lsl #4
     43c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     440:	0003a802 	andeq	sl, r3, r2, lsl #16
     444:	00fc0308 	rscseq	r0, ip, r8, lsl #6
     448:	00010201 	andeq	r0, r1, r1, lsl #4
     44c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     450:	0003ac02 	andeq	sl, r3, r2, lsl #24
     454:	01850308 	orreq	r0, r5, r8, lsl #6
     458:	00010201 	andeq	r0, r1, r1, lsl #4
     45c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     460:	0003b002 	andeq	fp, r3, r2
     464:	018e0308 	orreq	r0, lr, r8, lsl #6
     468:	00010201 	andeq	r0, r1, r1, lsl #4
     46c:	01fe0101 	mvnseq	r0, r1, lsl #2
     470:	00020000 	andeq	r0, r2, r0
     474:	0000017a 	andeq	r0, r0, sl, ror r1
     478:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     47c:	0101000d 	tsteq	r1, sp
     480:	00000101 	andeq	r0, r0, r1, lsl #2
     484:	00000100 	andeq	r0, r0, r0, lsl #2
     488:	73752f01 	cmnvc	r5, #1, 30
     48c:	6f6c2f72 	svcvs	0x006c2f72
     490:	2f6c6163 	svccs	0x006c6163
     494:	2f6c7363 	svccs	0x006c7363
     498:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     49c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     4a0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     4a4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     4a8:	5f342d69 	svcpl	0x00342d69
     4ac:	30322d38 	eorscc	r2, r2, r8, lsr sp
     4b0:	32713431 	rsbscc	r3, r1, #822083584	; 0x31000000
     4b4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     4b8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     4bc:	61652d65 	cmnvs	r5, r5, ror #26
     4c0:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     4c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     4c8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 340 <_Min_Heap_Size+0x340>
     4cc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     4d0:	2f00656e 	svccs	0x0000656e
     4d4:	2f727375 	svccs	0x00727375
     4d8:	61636f6c 	cmnvs	r3, ip, ror #30
     4dc:	73632f6c 	cmnvc	r3, #108, 30	; 0x1b0
     4e0:	63672f6c 	cmnvs	r7, #108, 30	; 0x1b0
     4e4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     4e8:	6f6e2d6d 	svcvs	0x006e2d6d
     4ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     4f0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
     4f4:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
     4f8:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     4fc:	612f3271 	teqvs	pc, r1, ror r2	; <UNPREDICTABLE>
     500:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     504:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     508:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     50c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     510:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     514:	2f2e2e00 	svccs	0x002e2e00
     518:	334d5453 	movtcc	r5, #54355	; 0xd453
     51c:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     520:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     524:	6f637369 	svcvs	0x00637369
     528:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     52c:	5f57465f 	svcpl	0x0057465f
     530:	302e3156 	eorcc	r3, lr, r6, asr r1
     534:	4c2f312e 	stfmis	f3, [pc], #-184	; 484 <_Min_Stack_Size+0x84>
     538:	61726269 	cmnvs	r2, r9, ror #4
     53c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     540:	534d432f 	movtpl	r4, #54063	; 0xd32f
     544:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     548:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     54c:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     550:	54532f2e 	ldrbpl	r2, [r3], #-3886	; 0xf2e
     554:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     558:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
     55c:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
     560:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
     564:	465f7972 			; <UNDEFINED> instruction: 0x465f7972
     568:	31565f57 	cmpcc	r6, r7, asr pc
     56c:	312e302e 	teqcc	lr, lr, lsr #32
     570:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     574:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     578:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     57c:	5349534d 	movtpl	r5, #37709	; 0x934d
     580:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     584:	2f656369 	svccs	0x00656369
     588:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     58c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     590:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     594:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     598:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     59c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     5a0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     5a4:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     5a8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     5ac:	632e7878 	teqvs	lr, #120, 16	; 0x780000
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     5b8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     5bc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     5c0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     5c4:	00000100 	andeq	r0, r0, r0, lsl #2
     5c8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     5cc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     5d0:	00000200 	andeq	r0, r0, r0, lsl #4
     5d4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     5d8:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     5dc:	0300682e 	movweq	r6, #2094	; 0x82e
     5e0:	74730000 	ldrbtvc	r0, [r3], #-0
     5e4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5e8:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     5ec:	00040068 	andeq	r0, r4, r8, rrx
     5f0:	05000000 	streq	r0, [r0, #-0]
     5f4:	0003b402 	andeq	fp, r3, r2, lsl #8
     5f8:	01bb0308 			; <UNDEFINED> instruction: 0x01bb0308
     5fc:	09031901 	stmdbeq	r3, {r0, r8, fp, ip}
     600:	20770320 	rsbscs	r0, r7, r0, lsr #6
     604:	233f1d23 	teqcs	pc, #2240	; 0x8c0
     608:	6d032369 	stcvs	3, cr2, [r3, #-420]	; 0xfffffe5c
     60c:	20130320 	andscs	r0, r3, r0, lsr #6
     610:	00f3033f 	rscseq	r0, r3, pc, lsr r3
     614:	2e0c0320 	cdpcs	3, 0, cr0, cr12, cr0, {1}
     618:	4b483052 	blmi	120c768 <_Min_Stack_Size+0x120c368>
     61c:	324c3e3d 	subcc	r3, ip, #976	; 0x3d0
     620:	3c0e0323 	stccc	3, cr0, [lr], {35}	; 0x23
     624:	4d4b1f21 	stclmi	15, cr1, [fp, #-132]	; 0xffffff7c
     628:	4d4d4d31 	stclmi	13, cr4, [sp, #-196]	; 0xffffff3c
     62c:	4b4d5941 	blmi	1356b38 <_Min_Stack_Size+0x1356738>
     630:	3f1d2341 	svccc	0x001d2341
     634:	c6034d4b 	strgt	r4, [r3], -fp, asr #26
     638:	034c587e 	movteq	r5, #51326	; 0xc87e
     63c:	022e0187 	eoreq	r0, lr, #-1073741791	; 0xc0000021
     640:	01010010 	tsteq	r1, r0, lsl r0
     644:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
     648:	03080004 	movweq	r0, #32772	; 0x8004
     64c:	16010288 	strne	r0, [r1], -r8, lsl #5
     650:	5824034c 	stmdapl	r4!, {r2, r3, r6, r8, r9}
     654:	033e1e3e 	teqeq	lr, #992	; 0x3e0
     658:	25213c67 	strcs	r3, [r1, #-3175]!	; 0xc67
     65c:	0333231d 	teqeq	r3, #1946157056	; 0x74000000
     660:	0a032076 	beq	c8840 <_Min_Stack_Size+0xc8440>
     664:	2f67692e 	svccs	0x0067692e
     668:	02206a03 	eoreq	r6, r0, #12288	; 0x3000
     66c:	0101000d 	tsteq	r1, sp
     670:	00000031 	andeq	r0, r0, r1, lsr r0
     674:	001c0002 	andseq	r0, ip, r2
     678:	01020000 	mrseq	r0, (UNDEF: 2)
     67c:	000d0efb 	strdeq	r0, [sp], -fp
     680:	01010101 	tsteq	r1, r1, lsl #2
     684:	01000000 	mrseq	r0, (UNDEF: 0)
     688:	00010000 	andeq	r0, r1, r0
     68c:	2e626966 	cdpcs	9, 6, cr6, cr2, cr6, {3}
     690:	00000073 	andeq	r0, r0, r3, ror r0
     694:	05000000 	streq	r0, [r0, #-0]
     698:	0001ac02 	andeq	sl, r1, r2, lsl #24
     69c:	30211908 	eorcc	r1, r1, r8, lsl #18
     6a0:	01000102 	tsteq	r0, r2, lsl #2
     6a4:	00007101 	andeq	r7, r0, r1, lsl #2
     6a8:	30000200 	andcc	r0, r0, r0, lsl #4
     6ac:	02000000 	andeq	r0, r0, #0
     6b0:	0d0efb01 	vstreq	d15, [lr, #-4]
     6b4:	01010100 	mrseq	r0, (UNDEF: 17)
     6b8:	00000001 	andeq	r0, r0, r1
     6bc:	01000001 	tsteq	r0, r1
     6c0:	61747300 	cmnvs	r4, r0, lsl #6
     6c4:	70757472 	rsbsvc	r7, r5, r2, ror r4
     6c8:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     6cc:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     6d0:	345f3932 	ldrbcc	r3, [pc], #-2354	; 6d8 <_Min_Stack_Size+0x2d8>
     6d4:	78783933 	ldmdavc	r8!, {r0, r1, r4, r5, r8, fp, ip, sp}^
     6d8:	0000532e 	andeq	r5, r0, lr, lsr #6
     6dc:	00000000 	andeq	r0, r0, r0
     6e0:	05340205 	ldreq	r0, [r4, #-517]!	; 0x205
     6e4:	ca030800 	bgt	c26ec <_Min_Stack_Size+0xc22ec>
     6e8:	31210100 	teqcc	r1, r0, lsl #2
     6ec:	23212121 	teqcs	r1, #1073741832	; 0x40000008
     6f0:	21212121 	teqcs	r1, r1, lsr #2
     6f4:	2131212f 	teqcs	r1, pc, lsr #2
     6f8:	31212131 	teqcc	r1, r1, lsr r1
     6fc:	65032f30 	strvs	r2, [r3, #-3888]	; 0xf30
     700:	322f3420 	eorcc	r3, pc, #32, 8	; 0x20000000
     704:	00020236 	andeq	r0, r2, r6, lsr r2
     708:	05000101 	streq	r0, [r0, #-257]	; 0x101
     70c:	00058002 	andeq	r8, r5, r2
     710:	00f60308 	rscseq	r0, r6, r8, lsl #6
     714:	00020201 	andeq	r0, r2, r1, lsl #4
     718:	02940101 	addseq	r0, r4, #1073741824	; 0x40000000
     71c:	00020000 	andeq	r0, r2, r0
     720:	0000020e 	andeq	r0, r0, lr, lsl #4
     724:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     728:	0101000d 	tsteq	r1, sp
     72c:	00000101 	andeq	r0, r0, r1, lsl #2
     730:	00000100 	andeq	r0, r0, r0, lsl #2
     734:	2f2e2e01 	svccs	0x002e2e01
     738:	334d5453 	movtcc	r5, #54355	; 0xd453
     73c:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     740:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     744:	6f637369 	svcvs	0x00637369
     748:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     74c:	5f57465f 	svcpl	0x0057465f
     750:	302e3156 	eorcc	r3, lr, r6, asr r1
     754:	4c2f312e 	stfmis	f3, [pc], #-184	; 6a4 <_Min_Stack_Size+0x2a4>
     758:	61726269 	cmnvs	r2, r9, ror #4
     75c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     760:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     764:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     768:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     76c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     770:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     774:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     778:	2f726576 	svccs	0x00726576
     77c:	00637273 	rsbeq	r7, r3, r3, ror r2
     780:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     784:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     788:	632f6c61 	teqvs	pc, #24832	; 0x6100
     78c:	672f6c73 			; <UNDEFINED> instruction: 0x672f6c73
     790:	612d6363 	teqvs	sp, r3, ror #6
     794:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     798:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     79c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     7a0:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     7a4:	3130322d 	teqcc	r0, sp, lsr #4
     7a8:	2f327134 	svccs	0x00327134
     7ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     7b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     7b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     7b8:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     7bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     7c0:	616d2f65 	cmnvs	sp, r5, ror #30
     7c4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     7c8:	752f0065 	strvc	r0, [pc, #-101]!	; 76b <_Min_Stack_Size+0x36b>
     7cc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 608 <_Min_Stack_Size+0x208>
     7d0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     7d4:	6c73632f 	ldclvs	3, cr6, [r3], #-188	; 0xffffff44
     7d8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     7dc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     7e0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     7e4:	61652d65 	cmnvs	r5, r5, ror #26
     7e8:	342d6962 	strtcc	r6, [sp], #-2402	; 0x962
     7ec:	322d385f 	eorcc	r3, sp, #6225920	; 0x5f0000
     7f0:	71343130 	teqvc	r4, r0, lsr r1
     7f4:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
     7f8:	6f6e2d6d 	svcvs	0x006e2d6d
     7fc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     800:	2f696261 	svccs	0x00696261
     804:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     808:	00656475 	rsbeq	r6, r5, r5, ror r4
     80c:	532f2e2e 	teqpl	pc, #736	; 0x2e0
     810:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     814:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     818:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     81c:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     820:	5f797265 	svcpl	0x00797265
     824:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
     828:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
     82c:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
     830:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     834:	2f736569 	svccs	0x00736569
     838:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     83c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     840:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     844:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     848:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     84c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     850:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
     854:	63736944 	cmnvs	r3, #68, 18	; 0x110000
     858:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     85c:	57465f79 	smlsldxpl	r5, r6, r9, pc	; <UNPREDICTABLE>
     860:	2e31565f 	mrccs	6, 1, r5, cr1, cr15, {2}
     864:	2f312e30 	svccs	0x00312e30
     868:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     86c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     870:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     874:	2f534953 	svccs	0x00534953
     878:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     87c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     880:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     884:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     888:	2f787834 	svccs	0x00787834
     88c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     890:	00656475 	rsbeq	r6, r5, r5, ror r4
     894:	532f2e2e 	teqpl	pc, #736	; 0x2e0
     898:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     89c:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     8a0:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     8a4:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     8a8:	5f797265 	svcpl	0x00797265
     8ac:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
     8b0:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
     8b4:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
     8b8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     8bc:	2f736569 	svccs	0x00736569
     8c0:	334d5453 	movtcc	r5, #54355	; 0xd453
     8c4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     8c8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
     8cc:	72655064 	rsbvc	r5, r5, #100	; 0x64
     8d0:	5f687069 	svcpl	0x00687069
     8d4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     8d8:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     8dc:	0000636e 	andeq	r6, r0, lr, ror #6
     8e0:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
     8e4:	0100632e 	tsteq	r0, lr, lsr #6
     8e8:	645f0000 	ldrbvs	r0, [pc], #-0	; 8f0 <_Min_Stack_Size+0x4f0>
     8ec:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     8f0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8f8 <_Min_Stack_Size+0x4f8>
     8f4:	73657079 	cmnvc	r5, #121	; 0x79
     8f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8fc:	74730000 	ldrbtvc	r0, [r3], #-0
     900:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     904:	0300682e 	movweq	r6, #2094	; 0x82e
     908:	6f630000 	svcvs	0x00630000
     90c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     910:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     914:	00000400 	andeq	r0, r0, r0, lsl #8
     918:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     91c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     920:	00682e78 	rsbeq	r2, r8, r8, ror lr
     924:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
     928:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     92c:	00060068 	andeq	r0, r6, r8, rrx
     930:	05000000 	streq	r0, [r0, #-0]
     934:	00058402 	andeq	r8, r5, r2, lsl #8
     938:	00f60308 	rscseq	r0, r6, r8, lsl #6
     93c:	0a021701 	beq	86548 <_Min_Stack_Size+0x86148>
     940:	00010100 	andeq	r0, r1, r0, lsl #2
     944:	05980205 	ldreq	r0, [r8, #517]	; 0x205
     948:	88030800 	stmdahi	r3, {fp}
     94c:	031a0101 	tsteq	sl, #1073741824	; 0x40000000
     950:	03282078 	teqeq	r8, #120	; 0x78
     954:	574b2015 	smlaldpl	r2, fp, r5, r0
     958:	2e6b0331 	mcrcs	3, 3, r0, cr11, cr1, {1}
     95c:	24251c24 	strtcs	r1, [r5], #-3108	; 0xc24
     960:	3d2e7703 	stccc	7, cr7, [lr, #-12]!
     964:	303a222f 	eorscc	r2, sl, pc, lsr #4
     968:	30483221 	subcc	r3, r8, r1, lsr #4
     96c:	213b2131 	teqcs	fp, r1, lsr r1
     970:	2e09032d 	cdpcs	3, 0, cr0, cr9, cr13, {1}
     974:	01000702 	tsteq	r0, r2, lsl #14
     978:	02050001 	andeq	r0, r5, #1
     97c:	08000610 	stmdaeq	r0, {r4, r9, sl}
     980:	0101b403 	tsteq	r1, r3, lsl #8
     984:	000a0217 	andeq	r0, sl, r7, lsl r2
     988:	05000101 	streq	r0, [r0, #-257]	; 0x101
     98c:	00062402 	andeq	r2, r6, r2, lsl #8
     990:	01c70308 	biceq	r0, r7, r8, lsl #6
     994:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
     998:	00050246 	andeq	r0, r5, r6, asr #4
     99c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     9a0:	00063c02 	andeq	r3, r6, r2, lsl #24
     9a4:	01df0308 	bicseq	r0, pc, r8, lsl #6
     9a8:	222c1701 	eorcs	r1, ip, #262144	; 0x40000
     9ac:	00060240 	andeq	r0, r6, r0, asr #4
     9b0:	03e40101 	mvneq	r0, #1073741824	; 0x40000000
     9b4:	00020000 	andeq	r0, r2, r0
     9b8:	00000235 	andeq	r0, r0, r5, lsr r2
     9bc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     9c0:	0101000d 	tsteq	r1, sp
     9c4:	00000101 	andeq	r0, r0, r1, lsl #2
     9c8:	00000100 	andeq	r0, r0, r0, lsl #2
     9cc:	2f2e2e01 	svccs	0x002e2e01
     9d0:	334d5453 	movtcc	r5, #54355	; 0xd453
     9d4:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     9d8:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     9dc:	6f637369 	svcvs	0x00637369
     9e0:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     9e4:	5f57465f 	svcpl	0x0057465f
     9e8:	302e3156 	eorcc	r3, lr, r6, asr r1
     9ec:	4c2f312e 	stfmis	f3, [pc], #-184	; 93c <_Min_Stack_Size+0x53c>
     9f0:	61726269 	cmnvs	r2, r9, ror #4
     9f4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     9f8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     9fc:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     a00:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     a04:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     a08:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     a0c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     a10:	2f726576 	svccs	0x00726576
     a14:	00637273 	rsbeq	r7, r3, r3, ror r2
     a18:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     a1c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     a20:	632f6c61 	teqvs	pc, #24832	; 0x6100
     a24:	672f6c73 			; <UNDEFINED> instruction: 0x672f6c73
     a28:	612d6363 	teqvs	sp, r3, ror #6
     a2c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     a30:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     a34:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     a38:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     a3c:	3130322d 	teqcc	r0, sp, lsr #4
     a40:	2f327134 	svccs	0x00327134
     a44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     a48:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     a4c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     a50:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     a54:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     a58:	616d2f65 	cmnvs	sp, r5, ror #30
     a5c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     a60:	752f0065 	strvc	r0, [pc, #-101]!	; a03 <_Min_Stack_Size+0x603>
     a64:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8a0 <_Min_Stack_Size+0x4a0>
     a68:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     a6c:	6c73632f 	ldclvs	3, cr6, [r3], #-188	; 0xffffff44
     a70:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     a74:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     a78:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     a7c:	61652d65 	cmnvs	r5, r5, ror #26
     a80:	342d6962 	strtcc	r6, [sp], #-2402	; 0x962
     a84:	322d385f 	eorcc	r3, sp, #6225920	; 0x5f0000
     a88:	71343130 	teqvc	r4, r0, lsr r1
     a8c:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
     a90:	6f6e2d6d 	svcvs	0x006e2d6d
     a94:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     a98:	2f696261 	svccs	0x00696261
     a9c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     aa0:	00656475 	rsbeq	r6, r5, r5, ror r4
     aa4:	532f2e2e 	teqpl	pc, #736	; 0x2e0
     aa8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     aac:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     ab0:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     ab4:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     ab8:	5f797265 	svcpl	0x00797265
     abc:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
     ac0:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
     ac4:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
     ac8:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     acc:	2f736569 	svccs	0x00736569
     ad0:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     ad4:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
     ad8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     adc:	2f54532f 	svccs	0x0054532f
     ae0:	334d5453 	movtcc	r5, #54355	; 0xd453
     ae4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     ae8:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
     aec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     af0:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     af4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     af8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     afc:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
     b00:	63736944 	cmnvs	r3, #68, 18	; 0x110000
     b04:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     b08:	57465f79 	smlsldxpl	r5, r6, r9, pc	; <UNPREDICTABLE>
     b0c:	2e31565f 	mrccs	6, 1, r5, cr1, cr15, {2}
     b10:	2f312e30 	svccs	0x00312e30
     b14:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     b18:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     b1c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     b20:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     b24:	5f787834 	svcpl	0x00787834
     b28:	50647453 	rsbpl	r7, r4, r3, asr r4
     b2c:	70697265 	rsbvc	r7, r9, r5, ror #4
     b30:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     b34:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     b38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     b3c:	2f2e2e00 	svccs	0x002e2e00
     b40:	334d5453 	movtcc	r5, #54355	; 0xd453
     b44:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     b48:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     b4c:	6f637369 	svcvs	0x00637369
     b50:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     b54:	5f57465f 	svcpl	0x0057465f
     b58:	302e3156 	eorcc	r3, lr, r6, asr r1
     b5c:	4c2f312e 	stfmis	f3, [pc], #-184	; aac <_Min_Stack_Size+0x6ac>
     b60:	61726269 	cmnvs	r2, r9, ror #4
     b64:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     b68:	534d432f 	movtpl	r4, #54063	; 0xd32f
     b6c:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     b70:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     b74:	00006564 	andeq	r6, r0, r4, ror #10
     b78:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     b7c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     b80:	70675f78 	rsbvc	r5, r7, r8, ror pc
     b84:	632e6f69 	teqvs	lr, #420	; 0x1a4
     b88:	00000100 	andeq	r0, r0, r0, lsl #2
     b8c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     b90:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     b94:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     b98:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     b9c:	00000200 	andeq	r0, r0, r0, lsl #4
     ba0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     ba4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ba8:	00000300 	andeq	r0, r0, r0, lsl #6
     bac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bb0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     bb4:	00682e78 	rsbeq	r2, r8, r8, ror lr
     bb8:	73000004 	movwvc	r0, #4
     bbc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     bc0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     bc4:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     bc8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     bcc:	63000005 	movwvs	r0, #5
     bd0:	5f65726f 	svcpl	0x0065726f
     bd4:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     bd8:	00060068 	andeq	r0, r6, r8, rrx
     bdc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     be0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     be4:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     be8:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     bec:	00000500 	andeq	r0, r0, r0, lsl #10
     bf0:	02050000 	andeq	r0, r5, #0
     bf4:	08000654 	stmdaeq	r0, {r2, r4, r6, r9, sl}
     bf8:	0100ff03 	tsteq	r0, r3, lsl #30
     bfc:	41414124 	cmpmi	r1, r4, lsr #2
     c00:	41414141 	cmpmi	r1, r1, asr #2
     c04:	4c434142 	stfmie	f4, [r3], {66}	; 0x42
     c08:	032b3f59 	teqeq	fp, #356	; 0x164
     c0c:	034b2e4a 	movteq	r2, #48714	; 0xbe4a
     c10:	48032e38 	stmdami	r3, {r3, r4, r5, r9, sl, fp, sp}
     c14:	034b322e 	movteq	r3, #45614	; 0xb22e
     c18:	4d032e33 	stcmi	14, cr2, [r3, #-204]	; 0xffffff34
     c1c:	034b322e 	movteq	r3, #45614	; 0xb22e
     c20:	52032e2e 	andpl	r2, r3, #736	; 0x2e0
     c24:	034b322e 	movteq	r3, #45614	; 0xb22e
     c28:	57032e29 	strpl	r2, [r3, -r9, lsr #28]
     c2c:	034b322e 	movteq	r3, #45614	; 0xb22e
     c30:	5c032e24 	stcpl	14, cr2, [r3], {36}	; 0x24
     c34:	034b322e 	movteq	r3, #45614	; 0xb22e
     c38:	61032e1f 	tstvs	r3, pc, lsl lr
     c3c:	034b322e 	movteq	r3, #45614	; 0xb22e
     c40:	66032e1a 			; <UNDEFINED> instruction: 0x66032e1a
     c44:	034b322e 	movteq	r3, #45614	; 0xb22e
     c48:	6b032e15 	blvs	cc4a4 <_Min_Stack_Size+0xcc0a4>
     c4c:	0359332e 	cmpeq	r9, #-1207959552	; 0xb8000000
     c50:	71033c0f 	tstvc	r3, pc, lsl #24
     c54:	0359322e 	cmpeq	r9, #-536870910	; 0xe0000002
     c58:	76033c0a 	strvc	r3, [r3], -sl, lsl #24
     c5c:	0019022e 	andseq	r0, r9, lr, lsr #4
     c60:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c64:	0007b002 	andeq	fp, r7, r2
     c68:	01ca0308 	biceq	r0, sl, r8, lsl #6
     c6c:	3c0b0301 	stccc	3, cr0, [fp], {1}
     c70:	78032630 	stmdavc	r3, {r4, r5, r9, sl, sp}
     c74:	30305a3c 	eorscc	r5, r0, ip, lsr sl
     c78:	752d2f30 	strvc	r2, [sp, #-3888]!	; 0xf30
     c7c:	2c302c4c 	ldccs	12, cr2, [r0], #-304	; 0xfffffed0
     c80:	20120330 	andscs	r0, r2, r0, lsr r3
     c84:	032f2d21 	teqeq	pc, #2112	; 0x840
     c88:	1e033c62 	cdpne	12, 0, cr3, cr3, cr2, {3}
     c8c:	20620320 	rsbcs	r0, r2, r0, lsr #6
     c90:	03201e03 	teqeq	r0, #3, 28	; 0x30
     c94:	21033c62 	tstcs	r3, r2, ror #24
     c98:	3c700320 	ldclcc	3, cr0, [r0], #-128	; 0xffffff80
     c9c:	7803352f 	stmdavc	r3, {r0, r1, r2, r3, r5, r8, sl, ip, sp}
     ca0:	59884b2e 	stmibpl	r8, {r1, r2, r3, r5, r8, r9, fp, lr}
     ca4:	01000902 	tsteq	r0, r2, lsl #18
     ca8:	02050001 	andeq	r0, r5, #1
     cac:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
     cb0:	0101fe03 	tsteq	r1, r3, lsl #28
     cb4:	213d1f15 	teqcs	sp, r5, lsl pc
     cb8:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
     cbc:	00010100 	andeq	r0, r1, r0, lsl #2
     cc0:	08800205 	stmeq	r0, {r0, r2, r9}
     cc4:	95030800 	strls	r0, [r3, #-2048]	; 0x800
     cc8:	42210102 	eormi	r0, r1, #-2147483648	; 0x80000000
     ccc:	3022303e 	eorcc	r3, r2, lr, lsr r0
     cd0:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
     cd4:	00010100 	andeq	r0, r1, r0, lsl #2
     cd8:	08a40205 	stmiaeq	r4!, {r0, r2, r9}
     cdc:	c3030800 	movwgt	r0, #14336	; 0x3800
     ce0:	03190102 	tsteq	r9, #-2147483648	; 0x80000000
     ce4:	04022e09 	streq	r2, [r2], #-3593	; 0xe09
     ce8:	00010100 	andeq	r0, r1, r0, lsl #2
     cec:	08b00205 	ldmeq	r0!, {r0, r2, r9}
     cf0:	dd030800 	stcle	8, cr0, [r3, #-0]
     cf4:	21160102 	tstcs	r6, r2, lsl #2
     cf8:	01000202 	tsteq	r0, r2, lsl #4
     cfc:	02050001 	andeq	r0, r5, #1
     d00:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
     d04:	0102ee03 	tsteq	r2, r3, lsl #28
     d08:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     d0c:	01000402 	tsteq	r0, r2, lsl #8
     d10:	02050001 	andeq	r0, r5, #1
     d14:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
     d18:	01038803 	tsteq	r3, r3, lsl #16
     d1c:	02022116 	andeq	r2, r2, #-2147483643	; 0x80000005
     d20:	00010100 	andeq	r0, r1, r0, lsl #2
     d24:	08cc0205 	stmiaeq	ip, {r0, r2, r9}^
     d28:	9c030800 	stcls	8, cr0, [r3], {-0}
     d2c:	02170103 	andseq	r0, r7, #-1073741824	; 0xc0000000
     d30:	01010002 	tsteq	r1, r2
     d34:	d0020500 	andle	r0, r2, r0, lsl #10
     d38:	03080008 	movweq	r0, #32776	; 0x8008
     d3c:	170103b1 			; <UNDEFINED> instruction: 0x170103b1
     d40:	01000202 	tsteq	r0, r2, lsl #4
     d44:	02050001 	andeq	r0, r5, #1
     d48:	080008d4 	stmdaeq	r0, {r2, r4, r6, r7, fp}
     d4c:	0103c703 	tsteq	r3, r3, lsl #14
     d50:	022a2618 	eoreq	r2, sl, #24, 12	; 0x1800000
     d54:	01010002 	tsteq	r1, r2
     d58:	e0020500 	and	r0, r2, r0, lsl #10
     d5c:	03080008 	movweq	r0, #32776	; 0x8008
     d60:	160103e0 	strne	r0, [r1], -r0, ror #7
     d64:	01000202 	tsteq	r0, r2, lsl #4
     d68:	02050001 	andeq	r0, r5, #1
     d6c:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
     d70:	0103f003 	tsteq	r3, r3
     d74:	00040216 	andeq	r0, r4, r6, lsl r2
     d78:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d7c:	0008ec02 	andeq	lr, r8, r2, lsl #24
     d80:	04c30308 	strbeq	r0, [r3], #776	; 0x308
     d84:	3c090301 	stccc	3, cr0, [r9], {1}
     d88:	032e7703 	teqeq	lr, #786432	; 0xc0000
     d8c:	67212009 	strvs	r2, [r1, -r9]!
     d90:	21222a22 	teqcs	r2, r2, lsr #20
     d94:	00010221 	andeq	r0, r1, r1, lsr #4
     d98:	06860101 	streq	r0, [r6], r1, lsl #2
     d9c:	00020000 	andeq	r0, r2, r0
     da0:	00000220 	andeq	r0, r0, r0, lsr #4
     da4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     da8:	0101000d 	tsteq	r1, sp
     dac:	00000101 	andeq	r0, r0, r1, lsl #2
     db0:	00000100 	andeq	r0, r0, r0, lsl #2
     db4:	2f2e2e01 	svccs	0x002e2e01
     db8:	334d5453 	movtcc	r5, #54355	; 0xd453
     dbc:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     dc0:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     dc4:	6f637369 	svcvs	0x00637369
     dc8:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     dcc:	5f57465f 	svcpl	0x0057465f
     dd0:	302e3156 	eorcc	r3, lr, r6, asr r1
     dd4:	4c2f312e 	stfmis	f3, [pc], #-184	; d24 <_Min_Stack_Size+0x924>
     dd8:	61726269 	cmnvs	r2, r9, ror #4
     ddc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     de0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     de4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     de8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     dec:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     df0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     df4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     df8:	2f726576 	svccs	0x00726576
     dfc:	00637273 	rsbeq	r7, r3, r3, ror r2
     e00:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     e04:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
     e08:	632f6c61 	teqvs	pc, #24832	; 0x6100
     e0c:	672f6c73 			; <UNDEFINED> instruction: 0x672f6c73
     e10:	612d6363 	teqvs	sp, r3, ror #6
     e14:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     e18:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     e1c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     e20:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     e24:	3130322d 	teqcc	r0, sp, lsr #4
     e28:	2f327134 	svccs	0x00327134
     e2c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     e30:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     e34:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     e38:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     e3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     e40:	616d2f65 	cmnvs	sp, r5, ror #30
     e44:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     e48:	752f0065 	strvc	r0, [pc, #-101]!	; deb <_Min_Stack_Size+0x9eb>
     e4c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; c88 <_Min_Stack_Size+0x888>
     e50:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     e54:	6c73632f 	ldclvs	3, cr6, [r3], #-188	; 0xffffff44
     e58:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     e5c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     e60:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     e64:	61652d65 	cmnvs	r5, r5, ror #26
     e68:	342d6962 	strtcc	r6, [sp], #-2402	; 0x962
     e6c:	322d385f 	eorcc	r3, sp, #6225920	; 0x5f0000
     e70:	71343130 	teqvc	r4, r0, lsr r1
     e74:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
     e78:	6f6e2d6d 	svcvs	0x006e2d6d
     e7c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     e80:	2f696261 	svccs	0x00696261
     e84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e88:	00656475 	rsbeq	r6, r5, r5, ror r4
     e8c:	532f2e2e 	teqpl	pc, #736	; 0x2e0
     e90:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     e94:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     e98:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     e9c:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     ea0:	5f797265 	svcpl	0x00797265
     ea4:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
     ea8:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
     eac:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
     eb0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     eb4:	2f736569 	svccs	0x00736569
     eb8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     ebc:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
     ec0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     ec4:	2f54532f 	svccs	0x0054532f
     ec8:	334d5453 	movtcc	r5, #54355	; 0xd453
     ecc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     ed0:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
     ed4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     ed8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     edc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     ee0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     ee4:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
     ee8:	63736944 	cmnvs	r3, #68, 18	; 0x110000
     eec:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     ef0:	57465f79 	smlsldxpl	r5, r6, r9, pc	; <UNPREDICTABLE>
     ef4:	2e31565f 	mrccs	6, 1, r5, cr1, cr15, {2}
     ef8:	2f312e30 	svccs	0x00312e30
     efc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     f00:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     f04:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     f08:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     f0c:	5f787834 	svcpl	0x00787834
     f10:	50647453 	rsbpl	r7, r4, r3, asr r4
     f14:	70697265 	rsbvc	r7, r9, r5, ror #4
     f18:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     f1c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     f20:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     f24:	2f2e2e00 	svccs	0x002e2e00
     f28:	334d5453 	movtcc	r5, #54355	; 0xd453
     f2c:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     f30:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     f34:	6f637369 	svcvs	0x00637369
     f38:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     f3c:	5f57465f 	svcpl	0x0057465f
     f40:	302e3156 	eorcc	r3, lr, r6, asr r1
     f44:	4c2f312e 	stfmis	f3, [pc], #-184	; e94 <_Min_Stack_Size+0xa94>
     f48:	61726269 	cmnvs	r2, r9, ror #4
     f4c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     f50:	534d432f 	movtpl	r4, #54063	; 0xd32f
     f54:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     f58:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     f5c:	00006564 	andeq	r6, r0, r4, ror #10
     f60:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f64:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     f68:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     f6c:	00632e63 	rsbeq	r2, r3, r3, ror #28
     f70:	5f000001 	svcpl	0x00000001
     f74:	61666564 	cmnvs	r6, r4, ror #10
     f78:	5f746c75 	svcpl	0x00746c75
     f7c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     f80:	00682e73 	rsbeq	r2, r8, r3, ror lr
     f84:	73000002 	movwvc	r0, #2
     f88:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     f8c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     f90:	73000003 	movwvc	r0, #3
     f94:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     f98:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     f9c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     fa0:	74730000 	ldrbtvc	r0, [r3], #-0
     fa4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     fa8:	5f787834 	svcpl	0x00787834
     fac:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     fb0:	00050068 	andeq	r0, r5, r8, rrx
     fb4:	726f6300 	rsbvc	r6, pc, #0, 6
     fb8:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     fbc:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     fc0:	00000006 	andeq	r0, r0, r6
     fc4:	14020500 	strne	r0, [r2], #-1280	; 0x500
     fc8:	03080009 	movweq	r0, #32777	; 0x8009
     fcc:	140101d5 	strne	r0, [r1], #-469	; 0x1d5
     fd0:	03200f03 	teqeq	r0, #3, 30
     fd4:	1d232071 	stcne	0, cr2, [r3, #-452]!	; 0xfffffe3c
     fd8:	2323222c 	teqcs	r3, #44, 4	; 0xc0000002
     fdc:	7a032323 	bvc	c9c70 <_Min_Stack_Size+0xc9870>
     fe0:	31235b20 	teqcc	r3, r0, lsr #22
     fe4:	231b5231 	tstcs	fp, #268435459	; 0x10000003
     fe8:	000a0230 	andeq	r0, sl, r0, lsr r2
     fec:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ff0:	00096402 	andeq	r6, r9, r2, lsl #8
     ff4:	02880308 	addeq	r0, r8, #8, 6	; 0x20000000
     ff8:	023f1701 	eorseq	r1, pc, #262144	; 0x40000
     ffc:	01010005 	tsteq	r1, r5
    1000:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    1004:	03080009 	movweq	r0, #32777	; 0x8009
    1008:	210102a0 	smlatbcs	r1, r0, r2, r0
    100c:	200e9703 	andcs	r9, lr, r3, lsl #14
    1010:	2071e903 	rsbscs	lr, r1, r3, lsl #18
    1014:	01040200 	mrseq	r0, R12_usr
    1018:	200e9703 	andcs	r9, lr, r3, lsl #14
    101c:	01040200 	mrseq	r0, R12_usr
    1020:	03200d03 	teqeq	r0, #3, 26	; 0xc0
    1024:	3d2e71e3 	stfccs	f7, [lr, #-908]!	; 0xfffffc74
    1028:	4a0e8f03 	bmi	3a4c3c <_Min_Stack_Size+0x3a483c>
    102c:	2e71fb03 	vaddcs.f64	d31, d1, d3
    1030:	2e74032f 	cdpcs	3, 7, cr0, cr4, cr15, {1}
    1034:	0005023d 	andeq	r0, r5, sp, lsr r2
    1038:	05000101 	streq	r0, [r0, #-257]	; 0x101
    103c:	0009ac02 	andeq	sl, r9, r2, lsl #24
    1040:	02bf0308 	adcseq	r0, pc, #8, 6	; 0x20000000
    1044:	31311701 	teqcc	r1, r1, lsl #14
    1048:	00040231 	andeq	r0, r4, r1, lsr r2
    104c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1050:	0009c002 	andeq	ip, r9, r2
    1054:	02e30308 	rsceq	r0, r3, #8, 6	; 0x20000000
    1058:	06021601 	streq	r1, [r2], -r1, lsl #12
    105c:	00010100 	andeq	r0, r1, r0, lsl #2
    1060:	09cc0205 	stmibeq	ip, {r0, r2, r9}^
    1064:	fc030800 	stc2	8, cr0, [r3], {-0}
    1068:	34180102 	ldrcc	r0, [r8], #-258	; 0x102
    106c:	23207a03 	teqcs	r0, #12288	; 0x3000
    1070:	21464423 	cmpcs	r6, r3, lsr #8
    1074:	01000302 	tsteq	r0, r2, lsl #6
    1078:	02050001 	andeq	r0, r5, #1
    107c:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
    1080:	0103a403 	tsteq	r3, r3, lsl #8
    1084:	00060216 	andeq	r0, r6, r6, lsl r2
    1088:	05000101 	streq	r0, [r0, #-257]	; 0x101
    108c:	0009f802 	andeq	pc, r9, r2, lsl #16
    1090:	03cf0308 	biceq	r0, pc, #8, 6	; 0x20000000
    1094:	ae282001 	cdpge	0, 2, cr2, cr8, cr1, {0}
    1098:	01000502 	tsteq	r0, r2, lsl #10
    109c:	02050001 	andeq	r0, r5, #1
    10a0:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
    10a4:	0103e603 	tsteq	r3, r3, lsl #12
    10a8:	00060215 	andeq	r0, r6, r5, lsl r2
    10ac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    10b0:	000a2802 	andeq	r2, sl, r2, lsl #16
    10b4:	04a80308 	strteq	r0, [r8], #776	; 0x308
    10b8:	0c021801 	stceq	8, cr1, [r2], {1}
    10bc:	00010100 	andeq	r0, r1, r0, lsl #2
    10c0:	0a400205 	beq	10018dc <_Min_Stack_Size+0x10014dc>
    10c4:	b9030800 	stmdblt	r3, {fp}
    10c8:	02150104 	andseq	r0, r5, #4, 2
    10cc:	01010006 	tsteq	r1, r6
    10d0:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    10d4:	0308000a 	movweq	r0, #32778	; 0x800a
    10d8:	170104d6 			; <UNDEFINED> instruction: 0x170104d6
    10dc:	01000c02 	tsteq	r0, r2, lsl #24
    10e0:	02050001 	andeq	r0, r5, #1
    10e4:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
    10e8:	0104e803 	tsteq	r4, r3, lsl #16
    10ec:	00060215 	andeq	r0, r6, r5, lsl r2
    10f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    10f4:	000a7002 	andeq	r7, sl, r2
    10f8:	04fa0308 	ldrbteq	r0, [sl], #776	; 0x308
    10fc:	06021501 	streq	r1, [r2], -r1, lsl #10
    1100:	00010100 	andeq	r0, r1, r0, lsl #2
    1104:	0a7c0205 	beq	1f01920 <_Min_Stack_Size+0x1f01520>
    1108:	93030800 	movwls	r0, #14336	; 0x3800
    110c:	31190105 	tstcc	r9, r5, lsl #2
    1110:	04023131 	streq	r3, [r2], #-305	; 0x131
    1114:	00010100 	andeq	r0, r1, r0, lsl #2
    1118:	0a900205 	beq	fe401934 <_estack+0xde3d1934>
    111c:	b9030800 	stmdblt	r3, {fp}
    1120:	31190105 	tstcc	r9, r5, lsl #2
    1124:	04023131 	streq	r3, [r2], #-305	; 0x131
    1128:	00010100 	andeq	r0, r1, r0, lsl #2
    112c:	0aa40205 	beq	fe901948 <_estack+0xde8d1948>
    1130:	df030800 	svcle	0x00030800
    1134:	31180106 	tstcc	r8, r6, lsl #2
    1138:	05022331 	streq	r2, [r2, #-817]	; 0x331
    113c:	00010100 	andeq	r0, r1, r0, lsl #2
    1140:	0ab80205 	beq	fee0195c <_estack+0xdedd195c>
    1144:	fb030800 	blx	c314e <_Min_Stack_Size+0xc2d4e>
    1148:	2f130106 	svccs	0x00130106
    114c:	01000602 	tsteq	r0, r2, lsl #12
    1150:	02050001 	andeq	r0, r5, #1
    1154:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
    1158:	01079403 	tsteq	r7, r3, lsl #8
    115c:	23313118 	teqcs	r1, #24, 2
    1160:	01000502 	tsteq	r0, r2, lsl #10
    1164:	02050001 	andeq	r0, r5, #1
    1168:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
    116c:	0107b403 	tsteq	r7, r3, lsl #8
    1170:	23313118 	teqcs	r1, #24, 2
    1174:	01000502 	tsteq	r0, r2, lsl #10
    1178:	02050001 	andeq	r0, r5, #1
    117c:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
    1180:	0107d303 	tsteq	r7, r3, lsl #6
    1184:	31313118 	teqcc	r1, r8, lsl r1
    1188:	01000402 	tsteq	r0, r2, lsl #8
    118c:	02050001 	andeq	r0, r5, #1
    1190:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
    1194:	01088703 	tsteq	r8, r3, lsl #14
    1198:	7a034c16 	bvc	d41f8 <_Min_Stack_Size+0xd3df8>
    119c:	1f032620 	svcne	0x00032620
    11a0:	1e22343c 	mcrne	4, 1, r3, cr2, cr12, {1}
    11a4:	31222f21 	teqcc	r2, r1, lsr #30
    11a8:	3f222f21 	svccc	0x00222f21
    11ac:	222f2a25 	eorcs	r2, pc, #151552	; 0x25000
    11b0:	204e032f 	subcs	r0, lr, pc, lsr #6
    11b4:	2521262f 	strcs	r2, [r1, #-1583]!	; 0x62f
    11b8:	0333231d 	teqeq	r3, #1946157056	; 0x74000000
    11bc:	0a032076 	beq	c939c <_Min_Stack_Size+0xc8f9c>
    11c0:	3d67692e 	stclcc	9, cr6, [r7, #-184]!	; 0xffffff48
    11c4:	01000a02 	tsteq	r0, r2, lsl #20
    11c8:	02050001 	andeq	r0, r5, #1
    11cc:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
    11d0:	01098403 	tsteq	r9, r3, lsl #8
    11d4:	2b345a18 	blcs	d17a3c <_Min_Stack_Size+0xd1763c>
    11d8:	02243f31 	eoreq	r3, r4, #49, 30	; 0xc4
    11dc:	01010009 	tsteq	r1, r9
    11e0:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    11e4:	0308000b 	movweq	r0, #32779	; 0x800b
    11e8:	160109a4 	strne	r0, [r1], -r4, lsr #19
    11ec:	01000602 	tsteq	r0, r2, lsl #12
    11f0:	02050001 	andeq	r0, r5, #1
    11f4:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
    11f8:	0109b503 	tsteq	r9, r3, lsl #10
    11fc:	00060215 	andeq	r0, r6, r5, lsl r2
    1200:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1204:	000bdc02 	andeq	sp, fp, r2, lsl #24
    1208:	09c60308 	stmibeq	r6, {r3, r8, r9}^
    120c:	06021601 	streq	r1, [r2], -r1, lsl #12
    1210:	00010100 	andeq	r0, r1, r0, lsl #2
    1214:	0be80205 	bleq	ffa01a30 <_estack+0xdf9d1a30>
    1218:	db030800 	blle	c3220 <_Min_Stack_Size+0xc2e20>
    121c:	42180109 	andsmi	r0, r8, #1073741826	; 0x40000002
    1220:	0223311d 	eoreq	r3, r3, #1073741831	; 0x40000007
    1224:	01010005 	tsteq	r1, r5
    1228:	00020500 	andeq	r0, r2, r0, lsl #10
    122c:	0308000c 	movweq	r0, #32780	; 0x800c
    1230:	180109fb 	stmdane	r1, {r0, r1, r3, r4, r5, r6, r7, r8, fp}
    1234:	31311d42 	teqcc	r1, r2, asr #26
    1238:	01000602 	tsteq	r0, r2, lsl #12
    123c:	02050001 	andeq	r0, r5, #1
    1240:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
    1244:	010a9f03 	tsteq	sl, r3, lsl #30
    1248:	23313f18 	teqcs	r1, #24, 30	; 0x60
    124c:	01000602 	tsteq	r0, r2, lsl #12
    1250:	02050001 	andeq	r0, r5, #1
    1254:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
    1258:	010ac303 	tsteq	sl, r3, lsl #6
    125c:	23313f18 	teqcs	r1, #24, 30	; 0x60
    1260:	01000602 	tsteq	r0, r2, lsl #12
    1264:	02050001 	andeq	r0, r5, #1
    1268:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
    126c:	010ae403 	tsteq	sl, r3, lsl #8
    1270:	23313f18 	teqcs	r1, #24, 30	; 0x60
    1274:	01000602 	tsteq	r0, r2, lsl #12
    1278:	02050001 	andeq	r0, r5, #1
    127c:	08000c64 	stmdaeq	r0, {r2, r5, r6, sl, fp}
    1280:	010b8903 	tsteq	fp, r3, lsl #18
    1284:	00060216 	andeq	r0, r6, r6, lsl r2
    1288:	05000101 	streq	r0, [r0, #-257]	; 0x101
    128c:	000c7002 	andeq	r7, ip, r2
    1290:	0bb40308 	bleq	fed01eb8 <_estack+0xdecd1eb8>
    1294:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    1298:	00050246 	andeq	r0, r5, r6, asr #4
    129c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12a0:	000c8802 	andeq	r8, ip, r2, lsl #16
    12a4:	0bd40308 	bleq	ff501ecc <_estack+0xdf4d1ecc>
    12a8:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    12ac:	00050246 	andeq	r0, r5, r6, asr #4
    12b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12b4:	000ca002 	andeq	sl, ip, r2
    12b8:	0bf00308 	bleq	ffc01ee0 <_estack+0xdfbd1ee0>
    12bc:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    12c0:	00050246 	andeq	r0, r5, r6, asr #4
    12c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12c8:	000cb802 	andeq	fp, ip, r2, lsl #16
    12cc:	0ca40308 	stceq	3, cr0, [r4], #32
    12d0:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    12d4:	00050246 	andeq	r0, r5, r6, asr #4
    12d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12dc:	000cd002 	andeq	sp, ip, r2
    12e0:	0cd10308 	ldcleq	3, cr0, [r1], {8}
    12e4:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    12e8:	00050246 	andeq	r0, r5, r6, asr #4
    12ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12f0:	000ce802 	andeq	lr, ip, r2, lsl #16
    12f4:	0cfb0308 	ldcleq	3, cr0, [fp], #32
    12f8:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    12fc:	00050246 	andeq	r0, r5, r6, asr #4
    1300:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1304:	000d0002 	andeq	r0, sp, r2
    1308:	0d980308 	ldceq	3, cr0, [r8, #32]
    130c:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    1310:	00050246 	andeq	r0, r5, r6, asr #4
    1314:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1318:	000d1802 	andeq	r1, sp, r2, lsl #16
    131c:	0db10308 	ldceq	3, cr0, [r1, #32]!
    1320:	262c1901 	strtcs	r1, [ip], -r1, lsl #18
    1324:	00050246 	andeq	r0, r5, r6, asr #4
    1328:	05000101 	streq	r0, [r0, #-257]	; 0x101
    132c:	000d3002 	andeq	r3, sp, r2
    1330:	0de20308 	stcleq	3, cr0, [r2, #32]!
    1334:	262c1801 	strtcs	r1, [ip], -r1, lsl #16
    1338:	00050246 	andeq	r0, r5, r6, asr #4
    133c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1340:	000d4802 	andeq	r4, sp, r2, lsl #16
    1344:	0e8b0308 	cdpeq	3, 8, cr0, cr11, cr8, {0}
    1348:	262c1801 	strtcs	r1, [ip], -r1, lsl #16
    134c:	00050246 	andeq	r0, r5, r6, asr #4
    1350:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1354:	000d6002 	andeq	r6, sp, r2
    1358:	0ebc0308 	cdpeq	3, 11, cr0, cr12, cr8, {0}
    135c:	262c1801 	strtcs	r1, [ip], -r1, lsl #16
    1360:	00050246 	andeq	r0, r5, r6, asr #4
    1364:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1368:	000d7802 	andeq	r7, sp, r2, lsl #16
    136c:	0edc0308 	cdpeq	3, 13, cr0, cr12, cr8, {0}
    1370:	262c1801 	strtcs	r1, [ip], -r1, lsl #16
    1374:	00050246 	andeq	r0, r5, r6, asr #4
    1378:	05000101 	streq	r0, [r0, #-257]	; 0x101
    137c:	000d9002 	andeq	r9, sp, r2
    1380:	0ef80308 	cdpeq	3, 15, cr0, cr8, cr8, {0}
    1384:	262c1801 	strtcs	r1, [ip], -r1, lsl #16
    1388:	00050246 	andeq	r0, r5, r6, asr #4
    138c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1390:	000da802 	andeq	sl, sp, r2, lsl #16
    1394:	0fac0308 	svceq	0x00ac0308
    1398:	262c1801 	strtcs	r1, [ip], -r1, lsl #16
    139c:	00050246 	andeq	r0, r5, r6, asr #4
    13a0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13a4:	000dc002 	andeq	ip, sp, r2
    13a8:	0fd90308 	svceq	0x00d90308
    13ac:	262c1801 	strtcs	r1, [ip], -r1, lsl #16
    13b0:	00050246 	andeq	r0, r5, r6, asr #4
    13b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13b8:	000dd802 	andeq	sp, sp, r2, lsl #16
    13bc:	10870308 	addne	r0, r7, r8, lsl #6
    13c0:	282b1901 	stmdacs	fp!, {r0, r8, fp, ip}
    13c4:	00050245 	andeq	r0, r5, r5, asr #4
    13c8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13cc:	000df002 	andeq	pc, sp, r2
    13d0:	10ac0308 	adcne	r0, ip, r8, lsl #6
    13d4:	01090301 	tsteq	r9, r1, lsl #6
    13d8:	40223221 	eormi	r3, r2, r1, lsr #4
    13dc:	4a0a0325 	bmi	282078 <_Min_Stack_Size+0x281c78>
    13e0:	033c6903 	teqeq	ip, #49152	; 0xc000
    13e4:	0a032e0d 	beq	ccc20 <_Min_Stack_Size+0xcc820>
    13e8:	0005024a 	andeq	r0, r5, sl, asr #4
    13ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13f0:	000e2402 	andeq	r2, lr, r2, lsl #8
    13f4:	10d90308 	sbcsne	r0, r9, r8, lsl #6
    13f8:	08021401 	stmdaeq	r2, {r0, sl, ip}
    13fc:	00010100 	andeq	r0, r1, r0, lsl #2
    1400:	0e340205 	cdpeq	2, 3, cr0, cr4, cr5, {0}
    1404:	ed030800 	stc	8, cr0, [r3, #-0]
    1408:	03190110 	tsteq	r9, #16, 2
    140c:	07023c0a 	streq	r3, [r2, -sl, lsl #24]
    1410:	00010100 	andeq	r0, r1, r0, lsl #2
    1414:	0e480205 	cdpeq	2, 4, cr0, cr8, cr5, {0}
    1418:	8f030800 	svchi	0x00030800
    141c:	02180111 	andseq	r0, r8, #1073741828	; 0x40000004
    1420:	01010006 	tsteq	r1, r6
    1424:	0000055b 	andeq	r0, r0, fp, asr r5
    1428:	02370002 	eorseq	r0, r7, #2
    142c:	01020000 	mrseq	r0, (UNDEF: 2)
    1430:	000d0efb 	strdeq	r0, [sp], -fp
    1434:	01010101 	tsteq	r1, r1, lsl #2
    1438:	01000000 	mrseq	r0, (UNDEF: 0)
    143c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1440:	54532f2e 	ldrbpl	r2, [r3], #-3886	; 0xf2e
    1444:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1448:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    144c:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    1450:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    1454:	465f7972 			; <UNDEFINED> instruction: 0x465f7972
    1458:	31565f57 	cmpcc	r6, r7, asr pc
    145c:	312e302e 	teqcc	lr, lr, lsr #32
    1460:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1464:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1468:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    146c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1470:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1474:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1478:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    147c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1484 <_Min_Stack_Size+0x1084>
    1480:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1484:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1488:	752f0063 	strvc	r0, [pc, #-99]!	; 142d <_Min_Stack_Size+0x102d>
    148c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 12c8 <_Min_Stack_Size+0xec8>
    1490:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1494:	6c73632f 	ldclvs	3, cr6, [r3], #-188	; 0xffffff44
    1498:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    149c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    14a0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    14a4:	61652d65 	cmnvs	r5, r5, ror #26
    14a8:	342d6962 	strtcc	r6, [sp], #-2402	; 0x962
    14ac:	322d385f 	eorcc	r3, sp, #6225920	; 0x5f0000
    14b0:	71343130 	teqvc	r4, r0, lsr r1
    14b4:	72612f32 	rsbvc	r2, r1, #50, 30	; 0xc8
    14b8:	6f6e2d6d 	svcvs	0x006e2d6d
    14bc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    14c0:	2f696261 	svccs	0x00696261
    14c4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    14c8:	2f656475 	svccs	0x00656475
    14cc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    14d0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    14d4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    14d8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    14dc:	632f6c61 	teqvs	pc, #24832	; 0x6100
    14e0:	672f6c73 			; <UNDEFINED> instruction: 0x672f6c73
    14e4:	612d6363 	teqvs	sp, r3, ror #6
    14e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    14ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    14f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    14f4:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    14f8:	3130322d 	teqcc	r0, sp, lsr #4
    14fc:	2f327134 	svccs	0x00327134
    1500:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1504:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1508:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    150c:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
    1510:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1514:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    1518:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    151c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1520:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    1524:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    1528:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    152c:	57465f79 	smlsldxpl	r5, r6, r9, pc	; <UNPREDICTABLE>
    1530:	2e31565f 	mrccs	6, 1, r5, cr1, cr15, {2}
    1534:	2f312e30 	svccs	0x00312e30
    1538:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    153c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    1540:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    1544:	2f534953 	svccs	0x00534953
    1548:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    154c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    1550:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    1554:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1558:	2f787834 	svccs	0x00787834
    155c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1560:	00656475 	rsbeq	r6, r5, r5, ror r4
    1564:	532f2e2e 	teqpl	pc, #736	; 0x2e0
    1568:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    156c:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
    1570:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
    1574:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    1578:	5f797265 	svcpl	0x00797265
    157c:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
    1580:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
    1584:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
    1588:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    158c:	2f736569 	svccs	0x00736569
    1590:	334d5453 	movtcc	r5, #54355	; 0xd453
    1594:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1598:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    159c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    15a0:	5f687069 	svcpl	0x00687069
    15a4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    15a8:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    15ac:	2e00636e 	cdpcs	3, 0, cr6, cr0, cr14, {3}
    15b0:	54532f2e 	ldrbpl	r2, [r3], #-3886	; 0xf2e
    15b4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    15b8:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    15bc:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    15c0:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    15c4:	465f7972 			; <UNDEFINED> instruction: 0x465f7972
    15c8:	31565f57 	cmpcc	r6, r7, asr pc
    15cc:	312e302e 	teqcc	lr, lr, lsr #32
    15d0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    15d4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    15d8:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    15dc:	5349534d 	movtpl	r5, #37709	; 0x934d
    15e0:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    15e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    15e8:	74730000 	ldrbtvc	r0, [r3], #-0
    15ec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    15f0:	5f787834 	svcpl	0x00787834
    15f4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    15f8:	00632e74 	rsbeq	r2, r3, r4, ror lr
    15fc:	5f000001 	svcpl	0x00000001
    1600:	61666564 	cmnvs	r6, r4, ror #10
    1604:	5f746c75 	svcpl	0x00746c75
    1608:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    160c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1610:	73000002 	movwvc	r0, #2
    1614:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1618:	00682e74 	rsbeq	r2, r8, r4, ror lr
    161c:	73000003 	movwvc	r0, #3
    1620:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1624:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1628:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    162c:	74730000 	ldrbtvc	r0, [r3], #-0
    1630:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1634:	5f787834 	svcpl	0x00787834
    1638:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    163c:	00050068 	andeq	r0, r5, r8, rrx
    1640:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1644:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1648:	755f7878 	ldrbvc	r7, [pc, #-2168]	; dd8 <_Min_Stack_Size+0x9d8>
    164c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1650:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1654:	6f630000 	svcvs	0x00630000
    1658:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    165c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1660:	00000600 	andeq	r0, r0, r0, lsl #12
    1664:	02050000 	andeq	r0, r5, #0
    1668:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
    166c:	0101bb03 	tsteq	r1, r3, lsl #22
    1670:	41414124 	cmpmi	r1, r4, lsr #2
    1674:	43414141 	movtmi	r4, #4417	; 0x1141
    1678:	2b3f594c 	blcs	fd7bb0 <_Min_Stack_Size+0xfd77b0>
    167c:	4b2e5a03 	blmi	b97e90 <_Min_Stack_Size+0xb97a90>
    1680:	032e2803 	teqeq	lr, #196608	; 0x30000
    1684:	59322e58 	ldmdbpl	r2!, {r3, r4, r6, r9, sl, fp, sp}
    1688:	033c2303 	teqeq	ip, #201326592	; 0xc000000
    168c:	59322e5d 	ldmdbpl	r2!, {r0, r2, r3, r4, r6, r9, sl, fp, sp}
    1690:	033c1e03 	teqeq	ip, #3, 28	; 0x30
    1694:	59322e62 	ldmdbpl	r2!, {r1, r5, r6, r9, sl, fp, sp}
    1698:	033c1903 	teqeq	ip, #49152	; 0xc000
    169c:	59322e67 	ldmdbpl	r2!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}
    16a0:	033c1403 	teqeq	ip, #50331648	; 0x3000000
    16a4:	4b322e6c 	blmi	c8d05c <_Min_Stack_Size+0xc8cc5c>
    16a8:	032e0f03 	teqeq	lr, #3, 30
    16ac:	59322e71 	ldmdbpl	r2!, {r0, r4, r5, r6, r9, sl, fp, sp}
    16b0:	033c0a03 	teqeq	ip, #12288	; 0x3000
    16b4:	12022e76 	andne	r2, r2, #1888	; 0x760
    16b8:	00010100 	andeq	r0, r1, r0, lsl #2
    16bc:	0f600205 	svceq	0x00600205
    16c0:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    16c4:	16030101 	strne	r0, [r3], -r1, lsl #2
    16c8:	0f03272e 	svceq	0x0003272e
    16cc:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    16d0:	03205c03 	teqeq	r0, #768	; 0x300
    16d4:	1903206a 	stmdbne	r3, {r1, r3, r5, r6, sp}
    16d8:	0c033520 	cfstr32eq	mvfx3, [r3], {32}
    16dc:	20740320 	rsbscs	r0, r4, r0, lsr #6
    16e0:	20090323 	andcs	r0, r9, r3, lsr #6
    16e4:	03207703 	teqeq	r0, #786432	; 0xc0000
    16e8:	7a032009 	bvc	c9714 <_Min_Stack_Size+0xc9314>
    16ec:	31245020 	teqcc	r4, r0, lsr #32
    16f0:	43033531 	movwmi	r3, #13617	; 0x3531
    16f4:	203d0320 	eorscs	r0, sp, r0, lsr #6
    16f8:	02003e24 	andeq	r3, r0, #36, 28	; 0x240
    16fc:	3c060104 	stfccs	f0, [r6], {4}
    1700:	23245006 	teqcs	r4, #6
    1704:	03200d03 	teqeq	r0, #3, 26	; 0xc0
    1708:	4f312070 	svcmi	0x00312070
    170c:	7a03265a 	bvc	cb07c <_Min_Stack_Size+0xcac7c>
    1710:	1d233f20 	stcne	15, cr3, [r3, #-128]!	; 0xffffff80
    1714:	2f78264d 	svccs	0x0078264d
    1718:	032e5d03 	teqeq	lr, #3, 26	; 0xc0
    171c:	2f7c2e1a 	svccs	0x007c2e1a
    1720:	01000702 	tsteq	r0, r2, lsl #14
    1724:	02050001 	andeq	r0, r5, #1
    1728:	08001024 	stmdaeq	r0, {r2, r5, ip}
    172c:	0102e703 	tsteq	r2, r3, lsl #14
    1730:	1c321f15 	ldcne	15, cr1, [r2], #-84	; 0xffffffac
    1734:	21211d24 	teqcs	r1, r4, lsr #26
    1738:	00020222 	andeq	r0, r2, r2, lsr #4
    173c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1740:	00103c02 	andseq	r3, r0, r2, lsl #24
    1744:	02fb0308 	rscseq	r0, fp, #8, 6	; 0x20000000
    1748:	20130301 	andscs	r0, r3, r1, lsl #6
    174c:	033c7703 	teqeq	ip, #786432	; 0xc0000
    1750:	77032009 	strvc	r2, [r3, -r9]
    1754:	2009034a 	andcs	r0, r9, sl, asr #6
    1758:	03207903 	teqeq	r0, #49152	; 0xc000
    175c:	022f2e09 	eoreq	r2, pc, #9, 28	; 0x90
    1760:	01010002 	tsteq	r1, r2
    1764:	60020500 	andvs	r0, r2, r0, lsl #10
    1768:	03080010 	movweq	r0, #32784	; 0x8010
    176c:	1401039a 	strne	r0, [r1], #-922	; 0x39a
    1770:	0221212f 	eoreq	r2, r1, #-1073741813	; 0xc000000b
    1774:	01010002 	tsteq	r1, r2
    1778:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    177c:	03080010 	movweq	r0, #32784	; 0x8010
    1780:	1a0103ab 	bne	42634 <_Min_Stack_Size+0x42234>
    1784:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    1788:	01010005 	tsteq	r1, r5
    178c:	88020500 	stmdahi	r2, {r8, sl}
    1790:	03080010 	movweq	r0, #32784	; 0x8010
    1794:	170103c5 	strne	r0, [r1, -r5, asr #7]
    1798:	0005024c 	andeq	r0, r5, ip, asr #4
    179c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    17a0:	00109c02 	andseq	r9, r0, r2, lsl #24
    17a4:	03da0308 	bicseq	r0, sl, #8, 6	; 0x20000000
    17a8:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    17ac:	00070245 	andeq	r0, r7, r5, asr #4
    17b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    17b4:	0010b802 	andseq	fp, r0, r2, lsl #16
    17b8:	03f40308 	mvnseq	r0, #8, 6	; 0x20000000
    17bc:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    17c0:	00050261 	andeq	r0, r5, r1, ror #4
    17c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    17c8:	0010d402 	andseq	sp, r0, r2, lsl #8
    17cc:	04ad0308 	strteq	r0, [sp], #776	; 0x308
    17d0:	04021801 	streq	r1, [r2], #-2049	; 0x801
    17d4:	00010100 	andeq	r0, r1, r0, lsl #2
    17d8:	10dc0205 	sbcsne	r0, ip, r5, lsl #4
    17dc:	bd030800 	stclt	8, cr0, [r3, #-0]
    17e0:	21170104 	tstcs	r7, r4, lsl #2
    17e4:	01000302 	tsteq	r0, r2, lsl #6
    17e8:	02050001 	andeq	r0, r5, #1
    17ec:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
    17f0:	0104f103 	tsteq	r4, r3, lsl #2
    17f4:	05026818 	streq	r6, [r2, #-2072]	; 0x818
    17f8:	00010100 	andeq	r0, r1, r0, lsl #2
    17fc:	10fc0205 	rscsne	r0, ip, r5, lsl #4
    1800:	85030800 	strhi	r0, [r3, #-2048]	; 0x800
    1804:	1d1a0105 	ldfnes	f0, [sl, #-20]	; 0xffffffec
    1808:	05026128 	streq	r6, [r2, #-296]	; 0x128
    180c:	00010100 	andeq	r0, r1, r0, lsl #2
    1810:	11180205 	tstne	r8, r5, lsl #4
    1814:	a0030800 	andge	r0, r3, r0, lsl #16
    1818:	67170105 	ldrvs	r0, [r7, -r5, lsl #2]
    181c:	01000502 	tsteq	r0, r2, lsl #10
    1820:	02050001 	andeq	r0, r5, #1
    1824:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
    1828:	0105e503 	tsteq	r5, r3, lsl #10
    182c:	05026717 	streq	r6, [r2, #-1815]	; 0x717
    1830:	00010100 	andeq	r0, r1, r0, lsl #2
    1834:	11480205 	cmpne	r8, r5, lsl #4
    1838:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    183c:	1d1a0105 	ldfnes	f0, [sl, #-20]	; 0xffffffec
    1840:	05026128 	streq	r6, [r2, #-296]	; 0x128
    1844:	00010100 	andeq	r0, r1, r0, lsl #2
    1848:	11640205 	cmnne	r4, r5, lsl #4
    184c:	8f030800 	svchi	0x00030800
    1850:	02170106 	andseq	r0, r7, #-2147483647	; 0x80000001
    1854:	01010006 	tsteq	r1, r6
    1858:	70020500 	andvc	r0, r2, r0, lsl #10
    185c:	03080011 	movweq	r0, #32785	; 0x8011
    1860:	1a0106c4 	bne	43378 <_Min_Stack_Size+0x42f78>
    1864:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    1868:	01010005 	tsteq	r1, r5
    186c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    1870:	03080011 	movweq	r0, #32785	; 0x8011
    1874:	17010798 			; <UNDEFINED> instruction: 0x17010798
    1878:	0006023e 	andeq	r0, r6, lr, lsr r2
    187c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1880:	0011a002 	andseq	sl, r1, r2
    1884:	07ab0308 	streq	r0, [fp, r8, lsl #6]!
    1888:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    188c:	00050261 	andeq	r0, r5, r1, ror #4
    1890:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1894:	0011bc02 	andseq	fp, r1, r2, lsl #24
    1898:	07c40308 	strbeq	r0, [r4, r8, lsl #6]
    189c:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    18a0:	00050261 	andeq	r0, r5, r1, ror #4
    18a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18a8:	0011d802 	andseq	sp, r1, r2, lsl #16
    18ac:	088b0308 	stmeq	fp, {r3, r8, r9}
    18b0:	02671701 	rsbeq	r1, r7, #262144	; 0x40000
    18b4:	01010005 	tsteq	r1, r5
    18b8:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    18bc:	03080011 	movweq	r0, #32785	; 0x8011
    18c0:	1a01089d 	bne	43b3c <_Min_Stack_Size+0x4373c>
    18c4:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    18c8:	01010005 	tsteq	r1, r5
    18cc:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    18d0:	03080012 	movweq	r0, #32786	; 0x8012
    18d4:	030108cb 	movweq	r0, #6347	; 0x18cb
    18d8:	032a010a 	teqeq	sl, #-2147483646	; 0x80000002
    18dc:	7a03200a 	bvc	c990c <_Min_Stack_Size+0xc950c>
    18e0:	0003024a 	andeq	r0, r3, sl, asr #4
    18e4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18e8:	00122002 	andseq	r2, r2, r2
    18ec:	09cf0308 	stmibeq	pc, {r3, r8, r9}^	; <UNPREDICTABLE>
    18f0:	01150301 	tsteq	r5, r1, lsl #6
    18f4:	032e6b03 	teqeq	lr, #3072	; 0xc00
    18f8:	22322011 	eorscs	r2, r2, #17
    18fc:	2224301e 	eorcs	r3, r4, #30
    1900:	261e2432 			; <UNDEFINED> instruction: 0x261e2432
    1904:	3c7a033e 	ldclcc	3, cr0, [sl], #-248	; 0xffffff08
    1908:	3c6e0334 	stclcc	3, cr0, [lr], #-208	; 0xffffff30
    190c:	01000202 	tsteq	r0, r2, lsl #4
    1910:	02050001 	andeq	r0, r5, #1
    1914:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
    1918:	010a8f03 	tsteq	sl, r3, lsl #30
    191c:	03010c03 	movweq	r0, #7171	; 0x1c03
    1920:	04022e09 	streq	r2, [r2], #-3593	; 0xe09
    1924:	00010100 	andeq	r0, r1, r0, lsl #2
    1928:	12680205 	rsbne	r0, r8, #1342177280	; 0x50000000
    192c:	c0030800 	andgt	r0, r3, r0, lsl #16
    1930:	0b03010a 	bleq	c1d60 <_Min_Stack_Size+0xc1960>
    1934:	00040201 	andeq	r0, r4, r1, lsl #4
    1938:	05000101 	streq	r0, [r0, #-257]	; 0x101
    193c:	00127002 	andseq	r7, r2, r2
    1940:	0ae20308 	beq	ff882568 <_estack+0xdf852568>
    1944:	200e0301 	andcs	r0, lr, r1, lsl #6
    1948:	301e3e31 	andscc	r3, lr, r1, lsr lr
    194c:	41322224 	teqmi	r2, r4, lsr #4
    1950:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1954:	02001e01 	andeq	r1, r0, #1, 28
    1958:	004c0104 	subeq	r0, ip, r4, lsl #2
    195c:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    1960:	01040200 	mrseq	r0, R12_usr
    1964:	03243844 	teqeq	r4, #68, 16	; 0x440000
    1968:	04023c68 	streq	r3, [r2], #-3176	; 0xc68
    196c:	00010100 	andeq	r0, r1, r0, lsl #2
    1970:	12bc0205 	adcsne	r0, ip, #1342177280	; 0x50000000
    1974:	ac030800 	stcge	8, cr0, [r3], {-0}
    1978:	0d03010b 	stfeqs	f0, [r3, #-44]	; 0xffffffd4
    197c:	04024b01 	streq	r4, [r2], #-2817	; 0xb01
    1980:	b1010100 	mrslt	r0, (UNDEF: 17)
    1984:	02000002 	andeq	r0, r0, #2
    1988:	00022300 	andeq	r2, r2, r0, lsl #6
    198c:	fb010200 	blx	42196 <_Min_Stack_Size+0x41d96>
    1990:	01000d0e 	tsteq	r0, lr, lsl #26
    1994:	00010101 	andeq	r0, r1, r1, lsl #2
    1998:	00010000 	andeq	r0, r1, r0
    199c:	2e2e0100 	sufcse	f0, f6, f0
    19a0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    19a4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    19a8:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    19ac:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    19b0:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    19b4:	57465f79 	smlsldxpl	r5, r6, r9, pc	; <UNPREDICTABLE>
    19b8:	2e31565f 	mrccs	6, 1, r5, cr1, cr15, {2}
    19bc:	2f312e30 	svccs	0x00312e30
    19c0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    19c4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    19c8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    19cc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    19d0:	5f787834 	svcpl	0x00787834
    19d4:	50647453 	rsbpl	r7, r4, r3, asr r4
    19d8:	70697265 	rsbvc	r7, r9, r5, ror #4
    19dc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    19e0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    19e4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    19e8:	73752f00 	cmnvc	r5, #0, 30
    19ec:	6f6c2f72 	svcvs	0x006c2f72
    19f0:	2f6c6163 	svccs	0x006c6163
    19f4:	2f6c7363 	svccs	0x006c7363
    19f8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    19fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1a00:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1a04:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1a08:	5f342d69 	svcpl	0x00342d69
    1a0c:	30322d38 	eorscc	r2, r2, r8, lsr sp
    1a10:	32713431 	rsbscc	r3, r1, #822083584	; 0x31000000
    1a14:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1a18:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1a1c:	61652d65 	cmnvs	r5, r5, ror #26
    1a20:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    1a24:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1a28:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 18a0 <_Min_Stack_Size+0x14a0>
    1a2c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1a30:	2f00656e 	svccs	0x0000656e
    1a34:	2f727375 	svccs	0x00727375
    1a38:	61636f6c 	cmnvs	r3, ip, ror #30
    1a3c:	73632f6c 	cmnvc	r3, #108, 30	; 0x1b0
    1a40:	63672f6c 	cmnvs	r7, #108, 30	; 0x1b0
    1a44:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1a48:	6f6e2d6d 	svcvs	0x006e2d6d
    1a4c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1a50:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    1a54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
    1a58:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1a5c:	612f3271 	teqvs	pc, r1, ror r2	; <UNPREDICTABLE>
    1a60:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1a64:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1a68:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1a6c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1a70:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1a74:	2f2e2e00 	svccs	0x002e2e00
    1a78:	334d5453 	movtcc	r5, #54355	; 0xd453
    1a7c:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    1a80:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
    1a84:	6f637369 	svcvs	0x00637369
    1a88:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1a8c:	5f57465f 	svcpl	0x0057465f
    1a90:	302e3156 	eorcc	r3, lr, r6, asr r1
    1a94:	4c2f312e 	stfmis	f3, [pc], #-184	; 19e4 <_Min_Stack_Size+0x15e4>
    1a98:	61726269 	cmnvs	r2, r9, ror #4
    1a9c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1aa0:	534d432f 	movtpl	r4, #54063	; 0xd32f
    1aa4:	442f5349 	strtmi	r5, [pc], #-841	; 1aac <_Min_Stack_Size+0x16ac>
    1aa8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1aac:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    1ab0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1ab4:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1ab8:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1abc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1ac0:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    1ac4:	54532f2e 	ldrbpl	r2, [r3], #-3886	; 0xf2e
    1ac8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1acc:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    1ad0:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    1ad4:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    1ad8:	465f7972 			; <UNDEFINED> instruction: 0x465f7972
    1adc:	31565f57 	cmpcc	r6, r7, asr pc
    1ae0:	312e302e 	teqcc	lr, lr, lsr #32
    1ae4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1ae8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1aec:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1af0:	5349534d 	movtpl	r5, #37709	; 0x934d
    1af4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1af8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1afc:	2f2e2e00 	svccs	0x002e2e00
    1b00:	334d5453 	movtcc	r5, #54355	; 0xd453
    1b04:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    1b08:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
    1b0c:	6f637369 	svcvs	0x00637369
    1b10:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1b14:	5f57465f 	svcpl	0x0057465f
    1b18:	302e3156 	eorcc	r3, lr, r6, asr r1
    1b1c:	4c2f312e 	stfmis	f3, [pc], #-184	; 1a6c <_Min_Stack_Size+0x166c>
    1b20:	61726269 	cmnvs	r2, r9, ror #4
    1b24:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    1b28:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1b2c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    1b30:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1b34:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1b38:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b3c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1b40:	2f726576 	svccs	0x00726576
    1b44:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1b48:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1b4c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1b50:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    1b54:	66637379 			; <UNDEFINED> instruction: 0x66637379
    1b58:	00632e67 	rsbeq	r2, r3, r7, ror #28
    1b5c:	5f000001 	svcpl	0x00000001
    1b60:	61666564 	cmnvs	r6, r4, ror #10
    1b64:	5f746c75 	svcpl	0x00746c75
    1b68:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1b6c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1b70:	73000002 	movwvc	r0, #2
    1b74:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1b78:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1b7c:	73000003 	movwvc	r0, #3
    1b80:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1b84:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1b88:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    1b8c:	6f630000 	svcvs	0x00630000
    1b90:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1b94:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1b98:	00000500 	andeq	r0, r0, r0, lsl #10
    1b9c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1ba0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1ba4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    1ba8:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1bac:	00000006 	andeq	r0, r0, r6
    1bb0:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    1bb4:	03080012 	movweq	r0, #32786	; 0x8012
    1bb8:	210100e4 	smlattcs	r1, r4, r0, r0
    1bbc:	022d3d59 	eoreq	r3, sp, #5696	; 0x1640
    1bc0:	01010002 	tsteq	r1, r2
    1bc4:	e8020500 	stmda	r2, {r8, sl}
    1bc8:	03080012 	movweq	r0, #32786	; 0x8012
    1bcc:	160100f6 			; <UNDEFINED> instruction: 0x160100f6
    1bd0:	01000602 	tsteq	r0, r2, lsl #12
    1bd4:	02050001 	andeq	r0, r5, #1
    1bd8:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
    1bdc:	01018b03 	tsteq	r1, r3, lsl #22
    1be0:	00060216 	andeq	r0, r6, r6, lsl r2
    1be4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1be8:	00130002 	andseq	r0, r3, r2
    1bec:	01a20308 			; <UNDEFINED> instruction: 0x01a20308
    1bf0:	79036d01 	stmdbvc	r3, {r0, r8, sl, fp, sp, lr}
    1bf4:	1f21272e 	svcne	0x0021272e
    1bf8:	2d213d2f 	stccs	13, cr3, [r1, #-188]!	; 0xffffff44
    1bfc:	0001023d 	andeq	r0, r1, sp, lsr r2
    1c00:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1c04:	00133002 	andseq	r3, r3, r2
    1c08:	01b70308 			; <UNDEFINED> instruction: 0x01b70308
    1c0c:	06021501 	streq	r1, [r2], -r1, lsl #10
    1c10:	00010100 	andeq	r0, r1, r0, lsl #2
    1c14:	133c0205 	teqne	ip, #1342177280	; 0x50000000
    1c18:	c8030800 	stmdagt	r3, {fp}
    1c1c:	02160101 	andseq	r0, r6, #1073741824	; 0x40000000
    1c20:	01010006 	tsteq	r1, r6
    1c24:	48020500 	stmdami	r2, {r8, sl}
    1c28:	03080013 	movweq	r0, #32787	; 0x8013
    1c2c:	150101d5 	strne	r0, [r1, #-469]	; 0x1d5
    1c30:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    1c34:	01010006 	tsteq	r1, r6

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
       8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
       c:	41535500 	cmpmi	r3, r0, lsl #10
      10:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
      14:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
      18:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
      1c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
      20:	6f682f00 	svcvs	0x00682f00
      24:	632f656d 	teqvs	pc, #457179136	; 0x1b400000
      28:	772d6968 	strvc	r6, [sp, -r8, ror #18]!
      2c:	572f6961 	strpl	r6, [pc, -r1, ror #18]!
      30:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
      34:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
      38:	636e2f73 	cmnvs	lr, #460	; 0x1cc
      3c:	6c2f756b 	cfstr32vs	mvfx7, [pc], #-428	; fffffe98 <_estack+0xdffcfe98>
      40:	38336261 	ldmdacc	r3!, {r0, r5, r6, r9, sp, lr}
      44:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
      48:	34463233 	strbcc	r3, [r6], #-563	; 0x233
      4c:	752d3932 	strvc	r3, [sp, #-2354]!	; 0x932
      50:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
      54:	50470031 	subpl	r0, r7, r1, lsr r0
      58:	6f4d4f49 	svcvs	0x004d4f49
      5c:	545f6564 	ldrbpl	r6, [pc], #-1380	; 64 <_Min_Heap_Size+0x64>
      60:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
      64:	55006665 	strpl	r6, [r0, #-1637]	; 0x665
      68:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
      6c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
      70:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
      74:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
      78:	47006570 	smlsdxmi	r0, r0, r5, r6
      7c:	5f4f4950 	svcpl	0x004f4950
      80:	7079544f 	rsbsvc	r5, r9, pc, asr #8
      84:	444f5f65 	strbmi	r5, [pc], #-3941	; 8c <_Min_Heap_Size+0x8c>
      88:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
      8c:	5f5f006e 	svcpl	0x005f006e
      90:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
      94:	745f3233 	ldrbvc	r3, [pc], #-563	; 9c <_Min_Heap_Size+0x9c>
      98:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff1a0 <_estack+0xdffcf1a0>
      9c:	31746e69 	cmncc	r4, r9, ror #28
      a0:	00745f36 	rsbseq	r5, r4, r6, lsr pc
      a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      a8:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
      ac:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
      b0:	53550066 	cmppl	r5, #102	; 0x66
      b4:	5f545241 	svcpl	0x00545241
      b8:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
      bc:	73746942 	cmnvc	r4, #1081344	; 0x108000
      c0:	6f687300 	svcvs	0x00687300
      c4:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
      c8:	4700746e 	strmi	r7, [r0, -lr, ror #8]
      cc:	5f4f4950 	svcpl	0x004f4950
      d0:	7079544f 	rsbsvc	r5, r9, pc, asr #8
      d4:	50470065 	subpl	r0, r7, r5, rrx
      d8:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; ffffffbc <_estack+0xdffcffbc>
      dc:	5f65646f 	svcpl	0x0065646f
      e0:	55004641 	strpl	r4, [r0, #-1601]	; 0x641
      e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
      e8:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
      ec:	5f747300 	svcpl	0x00747300
      f0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
      f4:	55006674 	strpl	r6, [r0, #-1652]	; 0x674
      f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
      fc:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     100:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
     104:	50470061 	subpl	r0, r7, r1, rrx
     108:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     10c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     110:	4f495047 	svcmi	0x00495047
     114:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 11c <_Min_Heap_Size+0x11c>
     118:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
     11c:	41535500 	cmpmi	r3, r0, lsl #10
     120:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
     124:	4c64726f 	sfmmi	f7, 2, [r4], #-444	; 0xfffffe44
     128:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     12c:	50470068 	subpl	r0, r7, r8, rrx
     130:	544f4f49 	strbpl	r4, [pc], #-3913	; 138 <_Min_Heap_Size+0x138>
     134:	5f657079 	svcpl	0x00657079
     138:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     13c:	00666544 	rsbeq	r6, r6, r4, asr #10
     140:	5059544f 	subspl	r5, r9, pc, asr #8
     144:	55005245 	strpl	r5, [r0, #-581]	; 0x245
     148:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     14c:	7561425f 	strbvc	r4, [r1, #-607]!	; 0x25f
     150:	74615264 	strbtvc	r5, [r1], #-612	; 0x264
     154:	4e470065 	cdpmi	0, 4, cr0, cr7, cr5, {3}
     158:	20432055 	subcs	r2, r3, r5, asr r0
     15c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     160:	30322034 	eorscc	r2, r2, r4, lsr r0
     164:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
     168:	28203632 	stmdacs	r0!, {r1, r4, r5, r9, sl, ip, sp}
     16c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
     170:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     174:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     178:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     17c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     180:	342d6465 	strtcc	r6, [sp], #-1125	; 0x465
     184:	622d385f 	eorvs	r3, sp, #6225920	; 0x5f0000
     188:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     18c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0x68
     190:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     194:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     198:	35333131 	ldrcc	r3, [r3, #-305]!	; 0x131
     19c:	2d205d38 	stccs	13, cr5, [r0, #-224]!	; 0xffffff20
     1a0:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
     1a4:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     1a8:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     1ac:	2d20346d 	cfstrscs	mvf3, [r0, #-436]!	; 0xfffffe4c
     1b0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     1b4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     1b8:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
     1bc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     1c0:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
     1c4:	6f633d65 	svcvs	0x00633d65
     1c8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     1cc:	20346d2d 	eorscs	r6, r4, sp, lsr #26
     1d0:	696c6d2d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     1d4:	656c7474 	strbvs	r7, [ip, #-1140]!	; 0x474
     1d8:	646e652d 	strbtvs	r6, [lr], #-1325	; 0x52d
     1dc:	206e6169 	rsbcs	r6, lr, r9, ror #2
     1e0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     1e4:	20626d75 	rsbcs	r6, r2, r5, ror sp
     1e8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     1ec:	4f2d2067 	svcmi	0x002d2067
     1f0:	732d2033 	teqvc	sp, #51	; 0x33
     1f4:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     1f8:	2d203939 	stccs	9, cr3, [r0, #-228]!	; 0xffffff1c
     1fc:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     200:	20393963 	eorscs	r3, r9, r3, ror #18
     204:	6166662d 	cmnvs	r6, sp, lsr #12
     208:	6d2d7473 	cfstrsvs	mvf7, [sp, #-460]!	; 0xfffffe34
     20c:	20687461 	rsbcs	r7, r8, r1, ror #8
     210:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0x62d
     214:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     218:	732d6e6f 	teqvc	sp, #1776	; 0x6f0
     21c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     220:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     224:	6164662d 	cmnvs	r4, sp, lsr #12
     228:	732d6174 	teqvc	sp, #116, 2
     22c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     230:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     234:	6f6e662d 	svcvs	0x006e662d
     238:	6d6f632d 	stclvs	3, cr6, [pc, #-180]!	; 18c <_Min_Heap_Size+0x18c>
     23c:	206e6f6d 	rsbcs	r6, lr, sp, ror #30
     240:	61702d2d 	cmnvs	r0, sp, lsr #26
     244:	206d6172 	rsbcs	r6, sp, r2, ror r1
     248:	2d78616d 	ldfcse	f6, [r8, #-436]!	; 0xfffffe4c
     24c:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     250:	692d656e 	pushvs	{r1, r2, r3, r5, r6, r8, sl, sp, lr}
     254:	736e736e 	cmnvc	lr, #-1207959551	; 0xb8000001
     258:	6e69732d 	cdpvs	3, 6, cr7, cr9, cr13, {1}
     25c:	3d656c67 	stclcc	12, cr6, [r5, #-412]!	; 0xfffffe64
     260:	30303031 	eorscc	r3, r0, r1, lsr r0
     264:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     268:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     26c:	534f006e 	movtpl	r0, #61550	; 0xf06e
     270:	44454550 	strbmi	r4, [r5], #-1360	; 0x550
     274:	6f6c0052 	svcvs	0x006c0052
     278:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     27c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     280:	00746e69 	rsbseq	r6, r4, r9, ror #28
     284:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     288:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     28c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     290:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     294:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     298:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     29c:	5f4f4950 	svcpl	0x004f4950
     2a0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     2a4:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
     2a8:	50555000 	subspl	r5, r5, r0
     2ac:	47005244 	strmi	r5, [r0, -r4, asr #4]
     2b0:	5f4f4950 	svcpl	0x004f4950
     2b4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     2b8:	004e495f 	subeq	r4, lr, pc, asr r9
     2bc:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     2c0:	43520048 	cmpmi	r2, #72	; 0x48
     2c4:	6f435f43 	svcvs	0x00435f43
     2c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     2cc:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     2d0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     2d4:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
     2d8:	5f5f0052 	svcpl	0x005f0052
     2dc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
     2e0:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     2e4:	4f495047 	svcmi	0x00495047
     2e8:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
     2ec:	70535f68 	subsvc	r5, r3, r8, ror #30
     2f0:	00646565 	rsbeq	r6, r4, r5, ror #10
     2f4:	4f495047 	svcmi	0x00495047
     2f8:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     2fc:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     300:	53550050 	cmppl	r5, #80	; 0x50
     304:	5f545241 	svcpl	0x00545241
     308:	69726150 	ldmdbvs	r2!, {r4, r6, r8, sp, lr}^
     30c:	47007974 	smlsdxmi	r0, r4, r9, r7
     310:	00525054 	subseq	r5, r2, r4, asr r0
     314:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     318:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     31c:	61686320 	cmnvs	r8, r0, lsr #6
     320:	50470072 	subpl	r0, r7, r2, ror r0
     324:	505f4f49 	subspl	r4, pc, r9, asr #30
     328:	00645075 	rsbeq	r5, r4, r5, ror r0
     32c:	4f495047 	svcmi	0x00495047
     330:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xd5f
     334:	5f6d7569 	svcpl	0x006d7569
     338:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     33c:	50470064 	subpl	r0, r7, r4, rrx
     340:	435f4f49 	cmpmi	pc, #292	; 0x124
     344:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     348:	61727567 	cmnvs	r2, r7, ror #10
     34c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     350:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     354:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     358:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     35c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     360:	53550066 	cmppl	r5, #102	; 0x66
     364:	5f545241 	svcpl	0x00545241
     368:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     36c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     370:	00666544 	rsbeq	r6, r6, r4, asr #10
     374:	4f495047 	svcmi	0x00495047
     378:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     37c:	73006465 	movwvc	r6, #1125	; 0x465
     380:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     384:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     388:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     38c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     390:	53550074 	cmppl	r5, #116	; 0x74
     394:	5f545241 	svcpl	0x00545241
     398:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     39c:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     3a0:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
     3a4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     3a8:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     3ac:	5f434352 	svcpl	0x00434352
     3b0:	31424841 	cmpcc	r2, r1, asr #16
     3b4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     3b8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     3bc:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     3c0:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
     3c4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     3c8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 3d0 <_Min_Heap_Size+0x3d0>
     3cc:	50470065 	subpl	r0, r7, r5, rrx
     3d0:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
     3d4:	5f747361 	svcpl	0x00747361
     3d8:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     3dc:	53550064 	cmppl	r5, #100	; 0x64
     3e0:	31545241 	cmpcc	r4, r1, asr #4
     3e4:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     3e8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     3ec:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     3f0:	44006e6f 	strmi	r6, [r0], #-3695	; 0xe6f
     3f4:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     3f8:	5f00454c 	svcpl	0x0000454c
     3fc:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     400:	745f3233 	ldrbvc	r3, [pc], #-563	; 408 <_Min_Stack_Size+0x8>
     404:	414e4500 	cmpmi	lr, r0, lsl #10
     408:	00454c42 	subeq	r4, r5, r2, asr #24
     40c:	4f495047 	svcmi	0x00495047
     410:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     414:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     418:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     41c:	415f4343 	cmpmi	pc, r3, asr #6
     420:	50324250 	eorspl	r4, r2, r0, asr r2
     424:	70697265 	rsbvc	r7, r9, r5, ror #4
     428:	6f6c4368 	svcvs	0x006c4368
     42c:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     430:	45520064 	ldrbmi	r0, [r2, #-100]	; 0x64
     434:	56524553 			; <UNDEFINED> instruction: 0x56524553
     438:	00304445 	eorseq	r4, r0, r5, asr #8
     43c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     440:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     444:	45520031 	ldrbmi	r0, [r2, #-49]	; 0x31
     448:	56524553 			; <UNDEFINED> instruction: 0x56524553
     44c:	00324445 	eorseq	r4, r2, r5, asr #8
     450:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     454:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     458:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     45c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     460:	00344445 	eorseq	r4, r4, r5, asr #8
     464:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     468:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     46c:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     470:	56524553 			; <UNDEFINED> instruction: 0x56524553
     474:	00364445 	eorseq	r4, r6, r5, asr #8
     478:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     47c:	705f3154 	subsvc	r3, pc, r4, asr r1	; <UNPREDICTABLE>
     480:	00737475 	rsbseq	r7, r3, r5, ror r4
     484:	4f495047 	svcmi	0x00495047
     488:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     48c:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     490:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     494:	50470066 	subpl	r0, r7, r6, rrx
     498:	505f4f49 	subspl	r4, pc, r9, asr #30
     49c:	5f645075 	svcpl	0x00645075
     4a0:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     4a4:	4d544900 	ldclmi	9, cr4, [r4, #-0]
     4a8:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     4ac:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     4b0:	50470072 	subpl	r0, r7, r2, ror r0
     4b4:	505f4f49 	subspl	r4, pc, r9, asr #30
     4b8:	5f645075 	svcpl	0x00645075
     4bc:	55504f4e 	ldrbpl	r4, [r0, #-3918]	; 0xf4e
     4c0:	55004c4c 	strpl	r4, [r0, #-3148]	; 0xc4c
     4c4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     4c8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     4cc:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     4d0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     4d4:	47007375 	smlsdxmi	r0, r5, r3, r7
     4d8:	5f4f4950 	svcpl	0x004f4950
     4dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     4e0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     4e4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     4e8:	656d0065 	strbvs	r0, [sp, #-101]!	; 0x65
     4ec:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
     4f0:	41535500 	cmpmi	r3, r0, lsl #10
     4f4:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
     4f8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     4fc:	61446576 	hvcvs	18006	; 0x4656
     500:	47006174 	smlsdxmi	r0, r4, r1, r6
     504:	5f4f4950 	svcpl	0x004f4950
     508:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     50c:	0050555f 	subseq	r5, r0, pc, asr r5
     510:	4f495047 	svcmi	0x00495047
     514:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     518:	6f434641 	svcvs	0x00434641
     51c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     520:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     524:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     528:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     52c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     530:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
     534:	00657461 	rsbeq	r7, r5, r1, ror #8
     538:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     53c:	5047004c 	subpl	r0, r7, ip, asr #32
     540:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xf49
     544:	545f6450 	ldrbpl	r6, [pc], #-1104	; 54c <_Min_Stack_Size+0x14c>
     548:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     54c:	4c006665 	stcmi	6, cr6, [r0], {101}	; 0x65
     550:	00524b43 	subseq	r4, r2, r3, asr #22
     554:	4f495047 	svcmi	0x00495047
     558:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 560 <_Min_Stack_Size+0x160>
     55c:	65500065 	ldrbvs	r0, [r0, #-101]	; 0x65
     560:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     564:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     568:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     56c:	61735500 	cmnvs	r3, r0, lsl #10
     570:	61466567 	cmpvs	r6, r7, ror #10
     574:	5f746c75 	svcpl	0x00746c75
     578:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     57c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     580:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     584:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     588:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     58c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     590:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     594:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     598:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     59c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     5a0:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     5a4:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     5a8:	61485f74 	hvcvs	34292	; 0x85f4
     5ac:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     5b0:	4d4e0072 	stclmi	0, cr0, [lr, #-456]	; 0xfffffe38
     5b4:	61485f49 	cmpvs	r8, r9, asr #30
     5b8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     5bc:	654d0072 	strbvs	r0, [sp, #-114]	; 0x72
     5c0:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
     5c4:	5f656761 	svcpl	0x00656761
     5c8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     5cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5d0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     5d4:	5f6b6369 	svcpl	0x006b6369
     5d8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     5dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5e0:	5f435653 	svcpl	0x00435653
     5e4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     5e8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5ec:	75626544 	strbvc	r6, [r2, #-1348]!	; 0x544
     5f0:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     5f4:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     5f8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     5fc:	42484100 	submi	r4, r8, #0, 2
     600:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xc31
     604:	4100524e 	tstmi	r0, lr, asr #4
     608:	52314250 	eorspl	r4, r1, #80, 4
     60c:	00525453 	subseq	r5, r2, r3, asr r4
     610:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     614:	00524e45 	subseq	r4, r2, r5, asr #28
     618:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     61c:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     620:	43444200 	movtmi	r4, #16896	; 0x4200
     624:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
     628:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     62c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     630:	52575000 	subspl	r5, r7, #0
     634:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     638:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     63c:	43535300 	cmpmi	r3, #0, 6
     640:	48005247 	stmdami	r0, {r0, r1, r2, r6, r9, ip, lr}
     644:	74534553 	ldrbvc	r4, [r3], #-1363	; 0x553
     648:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     64c:	55504300 	ldrbpl	r4, [r0, #-768]	; 0x300
     650:	41004449 	tstmi	r0, r9, asr #8
     654:	52314248 	eorspl	r4, r1, #72, 4	; 0x80000004
     658:	00525453 	subseq	r5, r2, r3, asr r4
     65c:	33424841 	movtcc	r4, #10305	; 0x2841
     660:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     664:	43530052 	cmpmi	r3, #82	; 0x52
     668:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
     66c:	41006570 	tstmi	r0, r0, ror r5
     670:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
     674:	4400524e 	strmi	r5, [r0], #-590	; 0x24e
     678:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     67c:	49005247 	stmdbmi	r0, {r0, r1, r2, r6, r9, ip, lr}
     680:	00525343 	subseq	r5, r2, r3, asr #6
     684:	4b54504f 	blmi	15147c8 <_Min_Stack_Size+0x15143c8>
     688:	00525945 	subseq	r5, r2, r5, asr #18
     68c:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     690:	43435200 	movtmi	r5, #12800	; 0x3200
     694:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     698:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     69c:	42504100 	subsmi	r4, r0, #0, 2
     6a0:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     6a4:	46430052 			; <UNDEFINED> instruction: 0x46430052
     6a8:	4f005253 	svcmi	0x00005253
     6ac:	52435450 	subpl	r5, r3, #80, 8	; 0x50000000
     6b0:	6c700031 	ldclvs	0, cr0, [r0], #-196	; 0xffffff3c
     6b4:	756f736c 	strbvc	r7, [pc, #-876]!	; 350 <_Min_Heap_Size+0x350>
     6b8:	00656372 	rsbeq	r6, r5, r2, ror r3
     6bc:	33424841 	movtcc	r4, #10305	; 0x2841
     6c0:	00524e45 	subseq	r4, r2, r5, asr #28
     6c4:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
     6c8:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     6cc:	49410070 	stmdbmi	r1, {r4, r5, r6}^
     6d0:	00524352 	subseq	r4, r2, r2, asr r3
     6d4:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     6d8:	00524746 	subseq	r4, r2, r6, asr #14
     6dc:	32425041 	subcc	r5, r2, #65	; 0x41
     6e0:	00524e45 	subseq	r4, r2, r5, asr #28
     6e4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     6e8:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
     6ec:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     6f0:	53007265 	movwpl	r7, #613	; 0x265
     6f4:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
     6f8:	73795300 	cmnvc	r9, #0, 6
     6fc:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     700:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     704:	6b636f6c 	blvs	18dc4bc <_Min_Stack_Size+0x18dc0bc>
     708:	61647055 	qdsubvs	r7, r5, r4
     70c:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	; 0xfffffe30
     710:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     714:	73795300 	cmnvc	r9, #0, 6
     718:	496d6574 	stmdbmi	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     71c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     720:	31425041 	cmpcc	r2, r1, asr #32
     724:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     728:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
     72c:	6f63766c 	svcvs	0x0063766c
     730:	4f545600 	svcmi	0x00545600
     734:	53490052 	movtpl	r0, #36946	; 0x9052
     738:	44005241 	strmi	r5, [r0], #-577	; 0x241
     73c:	00525346 	subseq	r5, r2, r6, asr #6
     740:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     744:	6f436d65 	svcvs	0x00436d65
     748:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     74c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     750:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     754:	42484100 	submi	r4, r8, #0, 2
     758:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xc32
     75c:	4d00524e 	sfmmi	f5, 4, [r0, #-312]	; 0xfffffec8
     760:	0052464d 	subseq	r4, r2, sp, asr #12
     764:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
     768:	6c437379 	mcrrvs	3, 7, r7, r3, cr9
     76c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     770:	31424841 	cmpcc	r2, r1, asr #16
     774:	00524e45 	subseq	r4, r2, r5, asr #28
     778:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     77c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     780:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     784:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     788:	4100632e 	tstmi	r0, lr, lsr #6
     78c:	00525346 	subseq	r5, r2, r6, asr #6
     790:	33424841 	movtcc	r4, #10305	; 0x2841
     794:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     798:	414c4600 	cmpmi	ip, r0, lsl #12
     79c:	545f4853 	ldrbpl	r4, [pc], #-2131	; 7a4 <_Min_Stack_Size+0x3a4>
     7a0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     7a4:	50006665 	andpl	r6, r0, r5, ror #12
     7a8:	41534c4c 	cmpmi	r3, ip, asr #24
     7ac:	47464349 	strbmi	r4, [r6, -r9, asr #6]
     7b0:	50430052 	subpl	r0, r3, r2, asr r0
     7b4:	00524341 	subseq	r4, r2, r1, asr #6
     7b8:	32425041 	subcc	r5, r2, #65	; 0x41
     7bc:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     7c0:	504f0052 	subpl	r0, pc, r2, asr r0	; <UNPREDICTABLE>
     7c4:	00524354 	subseq	r4, r2, r4, asr r3
     7c8:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     7cc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     7d0:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     7d4:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     7d8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     7dc:	564e0066 	strbpl	r0, [lr], -r6, rrx
     7e0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     7e4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     7e8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     7ec:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     7f0:	73795300 	cmnvc	r9, #0, 6
     7f4:	6b636954 	blvs	18dad4c <_Min_Stack_Size+0x18da94c>
     7f8:	4b4c435f 	blmi	131157c <_Min_Stack_Size+0x131117c>
     7fc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     800:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
     804:	5f434956 	svcpl	0x00434956
     808:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     80c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     810:	2e007463 	cdpcs	4, 0, cr7, cr0, cr3, {3}
     814:	54532f2e 	ldrbpl	r2, [r3], #-3886	; 0xf2e
     818:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     81c:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
     820:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
     824:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
     828:	465f7972 			; <UNDEFINED> instruction: 0x465f7972
     82c:	31565f57 	cmpcc	r6, r7, asr pc
     830:	312e302e 	teqcc	lr, lr, lsr #32
     834:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     838:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     83c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     840:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     844:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     848:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     84c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     850:	445f6870 	ldrbmi	r6, [pc], #-2160	; 858 <_Min_Stack_Size+0x458>
     854:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     858:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     85c:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     860:	632e6373 	teqvs	lr, #-872415231	; 0xcc000001
     864:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     868:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     86c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     870:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     874:	0070756f 	rsbseq	r7, r0, pc, ror #10
     878:	4349564e 	movtmi	r5, #38478	; 0x964e
     87c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     880:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
     884:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0x70
     888:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
     88c:	654e0052 	strbvs	r0, [lr, #-82]	; 0x52
     890:	61745377 	cmnvs	r4, r7, ror r3
     894:	53006574 	movwpl	r6, #1396	; 0x574
     898:	00524954 	subseq	r4, r2, r4, asr r9
     89c:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
     8a0:	31444556 	cmpcc	r4, r6, asr r5
     8a4:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
     8a8:	00746573 	rsbseq	r6, r4, r3, ror r5
     8ac:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     8b0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8b4:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
     8b8:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
     8bc:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xf74
     8c0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     8c4:	50434900 	subpl	r4, r3, r0, lsl #18
     8c8:	41430052 	qdaddmi	r0, r2, r3
     8cc:	0042494c 	subeq	r4, r2, ip, asr #18
     8d0:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
     8d4:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     8d8:	00627573 	rsbeq	r7, r2, r3, ror r5
     8dc:	4349564e 	movtmi	r5, #38478	; 0x964e
     8e0:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
     8e4:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
     8e8:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
     8ec:	00676966 	rsbeq	r6, r7, r6, ror #18
     8f0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     8f4:	5f6b6369 	svcpl	0x006b6369
     8f8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     8fc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     900:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     904:	00676966 	rsbeq	r6, r7, r6, ror #18
     908:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     90c:	5f6b6369 	svcpl	0x006b6369
     910:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     914:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     918:	6f697270 	svcvs	0x00697270
     91c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     920:	50534900 	subspl	r4, r3, r0, lsl #18
     924:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     928:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     92c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     930:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     934:	564e006c 	strbpl	r0, [lr], -ip, rrx
     938:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     93c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     940:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     944:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     948:	6f697250 	svcvs	0x00697250
     94c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     950:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     954:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     958:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
     95c:	5f434956 	svcpl	0x00434956
     960:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     964:	6e6e6168 	powvsez	f6, f6, #0.0
     968:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
     96c:	706d6565 	rsbvc	r6, sp, r5, ror #10
     970:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     974:	6f697250 	svcvs	0x00697250
     978:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     97c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     980:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
     984:	61547463 	cmpvs	r4, r3, ror #8
     988:	4f4c0062 	svcmi	0x004c0062
     98c:	4c004441 	cfstrsmi	mvf4, [r0], {65}	; 0x41
     990:	6f50776f 	svcvs	0x0050776f
     994:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
     998:	0065646f 	rsbeq	r6, r5, pc, ror #8
     99c:	4349564e 	movtmi	r5, #38478	; 0x964e
     9a0:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
     9a4:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     9a8:	6f724779 	svcvs	0x00724779
     9ac:	6f437075 	svcvs	0x00437075
     9b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     9b4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     9b8:	00736f70 	rsbseq	r6, r3, r0, ror pc
     9bc:	5f746942 	svcpl	0x00746942
     9c0:	00544553 	subseq	r4, r4, r3, asr r5
     9c4:	4f495047 	svcmi	0x00495047
     9c8:	6165525f 	cmnvs	r5, pc, asr r2
     9cc:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
     9d0:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
     9d4:	00617461 	rsbeq	r7, r1, r1, ror #8
     9d8:	4f495047 	svcmi	0x00495047
     9dc:	0046415f 	subeq	r4, r6, pc, asr r1
     9e0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     9e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9e8:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xf4f
     9ec:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     9f0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     9f4:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
     9f8:	006c6156 	rsbeq	r6, ip, r6, asr r1
     9fc:	5f746942 	svcpl	0x00746942
     a00:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     a04:	50470054 	subpl	r0, r7, r4, asr r0
     a08:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     a0c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     a10:	00746942 	rsbseq	r6, r4, r2, asr #18
     a14:	4f495047 	svcmi	0x00495047
     a18:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     a1c:	73746942 	cmnvc	r4, #1081344	; 0x108000
     a20:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a24:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     a28:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
     a2c:	00737469 	rsbseq	r7, r3, r9, ror #8
     a30:	4f495047 	svcmi	0x00495047
     a34:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     a38:	0074696e 	rsbseq	r6, r4, lr, ror #18
     a3c:	4f495047 	svcmi	0x00495047
     a40:	6165525f 	cmnvs	r5, pc, asr r2
     a44:	706e4964 	rsbvc	r4, lr, r4, ror #18
     a48:	61447475 	hvcvs	18245	; 0x4745
     a4c:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     a50:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     a54:	61747374 	cmnvs	r4, r4, ror r3
     a58:	00737574 	rsbseq	r7, r3, r4, ror r5
     a5c:	5f434352 	svcpl	0x00434352
     a60:	31424841 	cmpcc	r2, r1, asr #16
     a64:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a68:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
     a6c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     a70:	4700646d 	strmi	r6, [r0, -sp, ror #8]
     a74:	5f4f4950 	svcpl	0x004f4950
     a78:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     a7c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     a80:	50007463 	andpl	r7, r0, r3, ror #8
     a84:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     a88:	47006c61 	strmi	r6, [r0, -r1, ror #24]
     a8c:	5f4f4950 	svcpl	0x004f4950
     a90:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
     a94:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     a98:	50470065 	subpl	r0, r7, r5, rrx
     a9c:	525f4f49 	subspl	r4, pc, #292	; 0x124
     aa0:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     aa4:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
     aa8:	61746144 	cmnvs	r4, r4, asr #2
     aac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ab0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     ab4:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
     ab8:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     abc:	00676966 	rsbeq	r6, r7, r6, ror #18
     ac0:	41746942 	cmnmi	r4, r2, asr #18
     ac4:	6f697463 	svcvs	0x00697463
     ac8:	7563006e 	strbvc	r0, [r3, #-110]!	; 0x6e
     acc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     ad0:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
     ad4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ad8:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     adc:	00657469 	rsbeq	r7, r5, r9, ror #8
     ae0:	532f2e2e 	teqpl	pc, #736	; 0x2e0
     ae4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ae8:	39323446 	ldmdbcc	r2!, {r1, r2, r6, sl, ip, sp}
     aec:	69442d49 	stmdbvs	r4, {r0, r3, r6, r8, sl, fp, sp}^
     af0:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     af4:	5f797265 	svcpl	0x00797265
     af8:	565f5746 	ldrbpl	r5, [pc], -r6, asr #14
     afc:	2e302e31 	mrccs	14, 1, r2, cr0, cr1, {1}
     b00:	694c2f31 	stmdbvs	ip, {r0, r4, r5, r8, r9, sl, fp, sp}^
     b04:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     b08:	2f736569 	svccs	0x00736569
     b0c:	334d5453 	movtcc	r5, #54355	; 0xd453
     b10:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     b14:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
     b18:	72655064 	rsbvc	r5, r5, #100	; 0x64
     b1c:	5f687069 	svcpl	0x00687069
     b20:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     b24:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
     b28:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
     b2c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b30:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     b34:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     b38:	00632e6f 	rsbeq	r2, r3, pc, ror #28
     b3c:	4f495047 	svcmi	0x00495047
     b40:	676f545f 			; <UNDEFINED> instruction: 0x676f545f
     b44:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
     b48:	00737469 	rsbseq	r7, r3, r9, ror #8
     b4c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b50:	4700325f 	smlsdmi	r0, pc, r2, r3	; <UNPREDICTABLE>
     b54:	5f4f4950 	svcpl	0x004f4950
     b58:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     b5c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     b60:	61447475 	hvcvs	18245	; 0x4745
     b64:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     b68:	43520074 	cmpmi	r2, #116	; 0x74
     b6c:	43485f43 	movtmi	r5, #36675	; 0x8f43
     b70:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     b74:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     b78:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
     b7c:	505f4343 	subspl	r4, pc, r3, asr #6
     b80:	41534c4c 	cmpmi	r3, ip, asr #24
     b84:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
     b88:	43435200 	movtmi	r5, #12800	; 0x3200
     b8c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     b90:	44494153 	strbmi	r4, [r9], #-339	; 0x153
     b94:	00517669 	subseq	r7, r1, r9, ror #12
     b98:	5f434352 	svcpl	0x00434352
     b9c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     ba0:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
     ba4:	73005276 	movwvc	r5, #630	; 0x276
     ba8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     bac:	67657273 			; <UNDEFINED> instruction: 0x67657273
     bb0:	2f2e2e00 	svccs	0x002e2e00
     bb4:	334d5453 	movtcc	r5, #54355	; 0xd453
     bb8:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
     bbc:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
     bc0:	6f637369 	svcvs	0x00637369
     bc4:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     bc8:	5f57465f 	svcpl	0x0057465f
     bcc:	302e3156 	eorcc	r3, lr, r6, asr r1
     bd0:	4c2f312e 	stfmis	f3, [pc], #-184	; b20 <_Min_Stack_Size+0x720>
     bd4:	61726269 	cmnvs	r2, r9, ror #4
     bd8:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     bdc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     be0:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     be4:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     be8:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     bec:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     bf0:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     bf4:	2f726576 	svccs	0x00726576
     bf8:	2f637273 	svccs	0x00637273
     bfc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c00:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c04:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     c08:	00632e63 	rsbeq	r2, r3, r3, ror #28
     c0c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     c10:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
     c14:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
     c18:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     c1c:	43435200 	movtmi	r5, #12800	; 0x3200
     c20:	4f434d5f 	svcmi	0x00434d5f
     c24:	756f5331 	strbvc	r5, [pc, #-817]!	; 8fb <_Min_Stack_Size+0x4fb>
     c28:	00656372 	rsbeq	r6, r5, r2, ror r3
     c2c:	5f434352 	svcpl	0x00434352
     c30:	31425041 	cmpcc	r2, r1, asr #32
     c34:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     c38:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
     c3c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     c40:	5000646d 	andpl	r6, r0, sp, ror #8
     c44:	004e4c4c 	subeq	r4, lr, ip, asr #24
     c48:	5f434352 	svcpl	0x00434352
     c4c:	50494153 	subpl	r4, r9, r3, asr r1
     c50:	41534c4c 	cmpmi	r3, ip, asr #24
     c54:	6b6c4349 	blvs	1b11980 <_Min_Stack_Size+0x1b11580>
     c58:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     c5c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c60:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
     c64:	5000504c 	andpl	r5, r0, ip, asr #32
     c68:	00514c4c 	subseq	r4, r1, ip, asr #24
     c6c:	5f434352 	svcpl	0x00434352
     c70:	61656c43 	cmnvs	r5, r3, asr #24
     c74:	50544972 	subspl	r4, r4, r2, ror r9
     c78:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     c7c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     c80:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
     c84:	52004d4c 	andpl	r4, r0, #76, 26	; 0x1300
     c88:	415f4343 	cmpmi	pc, r3, asr #6
     c8c:	50314248 	eorspl	r4, r1, r8, asr #4
     c90:	70697265 	rsbvc	r7, r9, r5, ror #4
     c94:	43520068 	cmpmi	r2, #104	; 0x68
     c98:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     c9c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     ca0:	43435200 	movtmi	r5, #12800	; 0x3200
     ca4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     ca8:	72655032 	rsbvc	r5, r5, #50	; 0x32
     cac:	43687069 	cmnmi	r8, #105	; 0x69
     cb0:	6b636f6c 	blvs	18dca68 <_Min_Stack_Size+0x18dc668>
     cb4:	6f4d504c 	svcvs	0x004d504c
     cb8:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     cbc:	43520064 	cmpmi	r2, #100	; 0x64
     cc0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     cc4:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     cc8:	0067616c 	rsbeq	r6, r7, ip, ror #2
     ccc:	5f434352 	svcpl	0x00434352
     cd0:	74005449 	strvc	r5, [r0], #-1097	; 0x449
     cd4:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
     cd8:	43500067 	cmpmi	r0, #103	; 0x67
     cdc:	5f324b4c 	svcpl	0x00324b4c
     ce0:	71657246 	cmnvc	r5, r6, asr #4
     ce4:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     ce8:	43520079 	cmpmi	r2, #121	; 0x79
     cec:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     cf0:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     cf4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     cf8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     cfc:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
     d00:	43435200 	movtmi	r5, #12800	; 0x3200
     d04:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     d08:	6f43314b 	svcvs	0x0043314b
     d0c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d10:	43435200 	movtmi	r5, #12800	; 0x3200
     d14:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     d18:	72655033 	rsbvc	r5, r5, #51	; 0x33
     d1c:	52687069 	rsbpl	r7, r8, #105	; 0x69
     d20:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     d24:	00646d43 	rsbeq	r6, r4, r3, asr #26
     d28:	5f434352 	svcpl	0x00434352
     d2c:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     d30:	6b636f6c 	blvs	18dcae8 <_Min_Stack_Size+0x18dc6e8>
     d34:	4b4c4341 	blmi	1311a40 <_Min_Stack_Size+0x1311640>
     d38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d3c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     d40:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     d44:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     d48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     d4c:	43520067 	cmpmi	r2, #103	; 0x67
     d50:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     d54:	4b4c4353 	blmi	1311aa8 <_Min_Stack_Size+0x13116a8>
     d58:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d5c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     d60:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     d64:	6f434553 	svcvs	0x00434553
     d68:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d6c:	43435200 	movtmi	r5, #12800	; 0x3200
     d70:	414c465f 	cmpmi	ip, pc, asr r6
     d74:	43520047 	cmpmi	r2, #71	; 0x47
     d78:	61425f43 	cmpvs	r2, r3, asr #30
     d7c:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     d80:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     d84:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
     d88:	72724500 	rsbsvc	r4, r2, #0, 10
     d8c:	7453726f 	ldrbvc	r7, [r3], #-623	; 0x26f
     d90:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     d94:	43435200 	movtmi	r5, #12800	; 0x3200
     d98:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     d9c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     da0:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     da4:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     da8:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     dac:	4b4c4353 	blmi	1311b00 <_Min_Stack_Size+0x1311700>
     db0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     db4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     db8:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
     dbc:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
     dc0:	5348726f 	movtpl	r7, #33391	; 0x826f
     dc4:	61745345 	cmnvs	r4, r5, asr #6
     dc8:	70557472 	subsvc	r7, r5, r2, ror r4
     dcc:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
     dd0:	72465f4b 	subvc	r5, r6, #300	; 0x12c
     dd4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     dd8:	0079636e 	rsbseq	r6, r9, lr, ror #6
     ddc:	5f434352 	svcpl	0x00434352
     de0:	31425041 	cmpcc	r2, r1, asr #32
     de4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     de8:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
     dec:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     df0:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     df4:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     df8:	00676966 	rsbeq	r6, r7, r6, ror #18
     dfc:	5f434352 	svcpl	0x00434352
     e00:	314f434d 	cmpcc	pc, sp, asr #6
     e04:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     e08:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     e0c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     e10:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     e14:	4352004b 	cmpmi	r2, #75	; 0x4b
     e18:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     e1c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     e20:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e24:	73657270 	cmnvc	r5, #112, 4
     e28:	43520063 	cmpmi	r2, #99	; 0x63
     e2c:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
     e30:	4b4c4343 	blmi	1311b44 <_Min_Stack_Size+0x1311744>
     e34:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     e38:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     e3c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     e40:	6c424941 	mcrrvs	9, 4, r4, r2, cr1
     e44:	416b636f 	cmnmi	fp, pc, ror #6
     e48:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     e4c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     e50:	43520065 	cmpmi	r2, #101	; 0x65
     e54:	41535f43 	cmpmi	r3, r3, asr #30
     e58:	6f6c4249 	svcvs	0x006c4249
     e5c:	43426b63 	movtmi	r6, #11107	; 0x2b63
     e60:	6f534b4c 	svcvs	0x00534b4c
     e64:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     e68:	43435200 	movtmi	r5, #12800	; 0x3200
     e6c:	44544c5f 	ldrbmi	r4, [r4], #-3167	; 0xc5f
     e70:	4b4c4343 	blmi	1311b84 <_Min_Stack_Size+0x1311784>
     e74:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     e78:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     e7c:	43520067 	cmpmi	r2, #103	; 0x67
     e80:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     e84:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     e88:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e8c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     e90:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     e94:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     e98:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     e9c:	505f4343 	subspl	r4, pc, r3, asr #6
     ea0:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     ea4:	6e6f4353 	mcrvs	3, 3, r4, cr15, cr3, {2}
     ea8:	00676966 	rsbeq	r6, r7, r6, ror #18
     eac:	5f434352 	svcpl	0x00434352
     eb0:	43495348 	movtmi	r5, #37704	; 0x9348
     eb4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     eb8:	415f4343 	cmpmi	pc, r3, asr #6
     ebc:	50324248 	eorspl	r4, r2, r8, asr #4
     ec0:	70697265 	rsbvc	r7, r9, r5, ror #4
     ec4:	43520068 	cmpmi	r2, #104	; 0x68
     ec8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     ecc:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
     ed0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ed4:	43435200 	movtmi	r5, #12800	; 0x3200
     ed8:	4f434d5f 	svcmi	0x00434d5f
     edc:	76694432 			; <UNDEFINED> instruction: 0x76694432
     ee0:	43435200 	movtmi	r5, #12800	; 0x3200
     ee4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     ee8:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     eec:	6c435332 	mcrrvs	3, 3, r5, r3, cr2
     ef0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     ef4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     ef8:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     efc:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     f00:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     f04:	646d434b 	strbtvs	r4, [sp], #-843	; 0x34b
     f08:	52524500 	subspl	r4, r2, #0, 10
     f0c:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
     f10:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     f14:	6b636f6c 	blvs	18dcccc <_Min_Stack_Size+0x18dc8cc>
     f18:	75636553 	strbvc	r6, [r3, #-1363]!	; 0x553
     f1c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f20:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     f24:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
     f28:	43520064 	cmpmi	r2, #100	; 0x64
     f2c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     f30:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     f34:	51766944 	cmnpl	r6, r4, asr #18
     f38:	43435200 	movtmi	r5, #12800	; 0x3200
     f3c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     f40:	43494153 	movtmi	r4, #37203	; 0x9153
     f44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f48:	43520067 	cmpmi	r2, #103	; 0x67
     f4c:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     f50:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
     f54:	43520076 	cmpmi	r2, #118	; 0x76
     f58:	50415f43 	subpl	r5, r1, r3, asr #30
     f5c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     f60:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f64:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     f68:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
     f6c:	43435200 	movtmi	r5, #12800	; 0x3200
     f70:	4f434d5f 	svcmi	0x00434d5f
     f74:	756f5332 	strbvc	r5, [pc, #-818]!	; c4a <_Min_Stack_Size+0x84a>
     f78:	00656372 	rsbeq	r6, r5, r2, ror r3
     f7c:	5f434352 	svcpl	0x00434352
     f80:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     f84:	6f534b4c 	svcvs	0x00534b4c
     f88:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     f8c:	43435200 	movtmi	r5, #12800	; 0x3200
     f90:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     f94:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     f98:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f9c:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     fa0:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     fa4:	6f434553 	svcvs	0x00434553
     fa8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     fac:	43435200 	movtmi	r5, #12800	; 0x3200
     fb0:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     fb4:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     fb8:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     fbc:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     fc0:	00676966 	rsbeq	r6, r7, r6, ror #18
     fc4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     fc8:	004e4941 	subeq	r4, lr, r1, asr #18
     fcc:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     fd0:	00514941 	subseq	r4, r1, r1, asr #18
     fd4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     fd8:	00524941 	subseq	r4, r2, r1, asr #18
     fdc:	5f434352 	svcpl	0x00434352
     fe0:	434d4954 	movtmi	r4, #55636	; 0xd954
     fe4:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
     fe8:	61637365 	cmnvs	r3, r5, ror #6
     fec:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ff0:	5f434352 	svcpl	0x00434352
     ff4:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     ff8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     ffc:	415f4343 	cmpmi	pc, r3, asr #6
    1000:	50324248 	eorspl	r4, r2, r8, asr #4
    1004:	70697265 	rsbvc	r7, r9, r5, ror #4
    1008:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    100c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1010:	43520064 	cmpmi	r2, #100	; 0x64
    1014:	50415f43 	subpl	r5, r1, r3, asr #30
    1018:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    101c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1020:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1024:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1028:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    102c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1030:	505f4343 	subspl	r4, pc, r3, asr #6
    1034:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    1038:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    103c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1040:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1044:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1048:	756f534b 	strbvc	r5, [pc, #-843]!	; d05 <_Min_Stack_Size+0x905>
    104c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1050:	5f434352 	svcpl	0x00434352
    1054:	00455348 	subeq	r5, r5, r8, asr #6
    1058:	4b4c4350 	blmi	1311da0 <_Min_Stack_Size+0x13119a0>
    105c:	72465f31 	subvc	r5, r6, #49, 30	; 0xc4
    1060:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    1064:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1068:	41425041 	cmpmi	r2, r1, asr #32
    106c:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
    1070:	54637365 	strbtpl	r7, [r3], #-869	; 0x365
    1074:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    1078:	43435200 	movtmi	r5, #12800	; 0x3200
    107c:	6a64415f 	bvs	1911600 <_Min_Stack_Size+0x1911200>
    1080:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    1084:	61434953 	cmpvs	r3, r3, asr r9
    1088:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
    108c:	6f697461 	svcvs	0x00697461
    1090:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1094:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1098:	74736573 	ldrbtvc	r6, [r3], #-1395	; 0x573
    109c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    10a0:	4c4c5000 	marmi	acc0, r5, ip
    10a4:	4e533249 	cdpmi	2, 5, cr3, cr3, cr9, {2}
    10a8:	43435200 	movtmi	r5, #12800	; 0x3200
    10ac:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    10b0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10b4:	7246736b 	subvc	r7, r6, #-1409286143	; 0xac000001
    10b8:	52007165 	andpl	r7, r0, #1073741849	; 0x40000019
    10bc:	445f4343 	ldrbmi	r4, [pc], #-835	; 10c4 <_Min_Stack_Size+0xcc4>
    10c0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    10c4:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
    10c8:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    10cc:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
    10d0:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    10d4:	43520052 	cmpmi	r2, #82	; 0x52
    10d8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    10dc:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    10e0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    10e4:	43520073 	cmpmi	r2, #115	; 0x73
    10e8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10ec:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
    10f0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10f4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10f8:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    10fc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1100:	7300646d 	movwvc	r6, #1133	; 0x46d
    1104:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    1108:	6f637075 	svcvs	0x00637075
    110c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    1110:	43520072 	cmpmi	r2, #114	; 0x72
    1114:	50415f43 	subpl	r5, r1, r3, asr #30
    1118:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    111c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1120:	43435200 	movtmi	r5, #12800	; 0x3200
    1124:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    1128:	504b4c43 	subpl	r4, fp, r3, asr #24
    112c:	43736572 	cmnmi	r3, #478150656	; 0x1c800000
    1130:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1134:	43520067 	cmpmi	r2, #103	; 0x67
    1138:	32495f43 	subcc	r5, r9, #268	; 0x10c
    113c:	4b4c4353 	blmi	1311e90 <_Min_Stack_Size+0x1311a90>
    1140:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1144:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1148:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1044 <_Min_Stack_Size+0xc44>
    114c:	43324f43 	teqmi	r2, #268	; 0x10c
    1150:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1154:	43520067 	cmpmi	r2, #103	; 0x67
    1158:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    115c:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
    1160:	43435200 	movtmi	r5, #12800	; 0x3200
    1164:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1168:	72655031 	rsbvc	r5, r5, #49	; 0x31
    116c:	43687069 	cmnmi	r8, #105	; 0x69
    1170:	6b636f6c 	blvs	18dcf28 <_Min_Stack_Size+0x18dcb28>
    1174:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1178:	5f434352 	svcpl	0x00434352
    117c:	6f435449 	svcvs	0x00435449
    1180:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1184:	43555300 	cmpmi	r5, #0, 6
    1188:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    118c:	43435200 	movtmi	r5, #12800	; 0x3200
    1190:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1194:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1198:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    119c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    11a0:	6b636f6c 	blvs	18dcf58 <_Min_Stack_Size+0x18dcb58>
    11a4:	70795473 	rsbsvc	r5, r9, r3, ror r4
    11a8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    11ac:	43435200 	movtmi	r5, #12800	; 0x3200
    11b0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    11b4:	72655031 	rsbvc	r5, r5, #49	; 0x31
    11b8:	43687069 	cmnmi	r8, #105	; 0x69
    11bc:	6b636f6c 	blvs	18dcf74 <_Min_Stack_Size+0x18dcb74>
    11c0:	6f4d504c 	svcvs	0x004d504c
    11c4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    11c8:	43520064 	cmpmi	r2, #100	; 0x64
    11cc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    11d0:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
    11d4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    11d8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    11dc:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    11e0:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
    11e4:	72656765 	rsbvc	r6, r5, #26476544	; 0x1940000
    11e8:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    11ec:	00726564 	rsbseq	r6, r2, r4, ror #10
    11f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    11f4:	50435f54 	subpl	r5, r3, r4, asr pc
    11f8:	55004148 	strpl	r4, [r0, #-328]	; 0x148
    11fc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1200:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1204:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    1208:	6b615772 	blvs	1856fd8 <_Min_Stack_Size+0x1856bd8>
    120c:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    1210:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    1214:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1218:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    121c:	73657250 	cmnvc	r5, #80, 4
    1220:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    1224:	53550072 	cmppl	r5, #114	; 0x72
    1228:	5f545241 	svcpl	0x00545241
    122c:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    1230:	6b616572 	blvs	185a800 <_Min_Stack_Size+0x185a400>
    1234:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0x544
    1238:	654c7463 	strbvs	r7, [ip, #-1123]	; 0x463
    123c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1240:	41535500 	cmpmi	r3, r0, lsl #10
    1244:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1248:	6b636f6c 	blvs	18dd000 <_Min_Stack_Size+0x18dcc00>
    124c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1250:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1254:	00666544 	rsbeq	r6, r6, r4, asr #10
    1258:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    125c:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    1260:	41535500 	cmpmi	r3, r0, lsl #10
    1264:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    1268:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    126c:	53550070 	cmppl	r5, #112	; 0x70
    1270:	5f545241 	svcpl	0x00545241
    1274:	43414d44 	movtmi	r4, #7492	; 0x1d44
    1278:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    127c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1280:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
    1284:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    1288:	41535500 	cmpmi	r3, r0, lsl #10
    128c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1290:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
    1294:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1298:	63627061 	cmnvs	r2, #97	; 0x61
    129c:	6b636f6c 	blvs	18dd054 <_Min_Stack_Size+0x18dcc54>
    12a0:	41535500 	cmpmi	r3, r0, lsl #10
    12a4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    12a8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    12ac:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    12b0:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    12b4:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    12b8:	41535500 	cmpmi	r3, r0, lsl #10
    12bc:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    12c0:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    12c4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    12c8:	2f2e2e00 	svccs	0x002e2e00
    12cc:	334d5453 	movtcc	r5, #54355	; 0xd453
    12d0:	32344632 	eorscc	r4, r4, #52428800	; 0x3200000
    12d4:	442d4939 	strtmi	r4, [sp], #-2361	; 0x939
    12d8:	6f637369 	svcvs	0x00637369
    12dc:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    12e0:	5f57465f 	svcpl	0x0057465f
    12e4:	302e3156 	eorcc	r3, lr, r6, asr r1
    12e8:	4c2f312e 	stfmis	f3, [pc], #-184	; 1238 <_Min_Stack_Size+0xe38>
    12ec:	61726269 	cmnvs	r2, r9, ror #4
    12f0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    12f4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    12f8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    12fc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1300:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    1304:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1308:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    130c:	2f726576 	svccs	0x00726576
    1310:	2f637273 	svccs	0x00637273
    1314:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1318:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    131c:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1320:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1324:	53550063 	cmppl	r5, #99	; 0x63
    1328:	5f545241 	svcpl	0x00545241
    132c:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    1330:	6b616572 	blvs	185a900 <_Min_Stack_Size+0x185a500>
    1334:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0x544
    1338:	654c7463 	strbvs	r7, [ip, #-1123]	; 0x463
    133c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1340:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1344:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    1348:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    134c:	414c465f 	cmpmi	ip, pc, asr r6
    1350:	53550047 	cmppl	r5, #71	; 0x47
    1354:	5f545241 	svcpl	0x00545241
    1358:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    135c:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    1360:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1364:	6f6c435f 	svcvs	0x006c435f
    1368:	6e496b63 	vmlsvs.f64	d22, d9, d19
    136c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1370:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1374:	41535500 	cmpmi	r3, r0, lsl #10
    1378:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    137c:	6b636f6c 	blvs	18dd134 <_Min_Stack_Size+0x18dcd34>
    1380:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1384:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1388:	75007469 	strvc	r7, [r0, #-1129]	; 0x469
    138c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1390:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
    1394:	53550065 	cmppl	r5, #101	; 0x65
    1398:	5f545241 	svcpl	0x00545241
    139c:	61656c43 	cmnvs	r5, r3, asr #24
    13a0:	616c4672 	smcvs	50274	; 0xc462
    13a4:	53550067 	cmppl	r5, #103	; 0x67
    13a8:	5f545241 	svcpl	0x00545241
    13ac:	41746553 	cmnmi	r4, r3, asr r5
    13b0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    13b4:	55007373 	strpl	r7, [r0, #-883]	; 0x373
    13b8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    13bc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    13c0:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
    13c4:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    13c8:	53550065 	cmppl	r5, #101	; 0x65
    13cc:	5f545241 	svcpl	0x00545241
    13d0:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    13d4:	61657242 	cmnvs	r5, r2, asr #4
    13d8:	5355006b 	cmppl	r5, #107	; 0x6b
    13dc:	5f545241 	svcpl	0x00545241
    13e0:	6f435449 	svcvs	0x00435449
    13e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    13e8:	41535500 	cmpmi	r3, r0, lsl #10
    13ec:	445f5452 	ldrbmi	r5, [pc], #-1106	; 13f4 <_Min_Stack_Size+0xff4>
    13f0:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0x14d
    13f4:	53550071 	cmppl	r5, #113	; 0x71
    13f8:	78545241 	ldmdavc	r4, {r0, r6, r9, ip, lr}^
    13fc:	41535500 	cmpmi	r3, r0, lsl #10
    1400:	4f5f5452 	svcmi	0x005f5452
    1404:	6942656e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    1408:	74654d74 	strbtvc	r4, [r5], #-3444	; 0xd74
    140c:	43646f68 	cmnmi	r4, #104, 30	; 0x1a0
    1410:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    1414:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1418:	616d535f 	cmnvs	sp, pc, asr r3
    141c:	61437472 	hvcvs	14146	; 0x3742
    1420:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    1424:	53550064 	cmppl	r5, #100	; 0x64
    1428:	5f545241 	svcpl	0x00545241
    142c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1430:	00737365 	rsbseq	r7, r3, r5, ror #6
    1434:	70746962 	rsbsvc	r6, r4, r2, ror #18
    1438:	5500736f 	strpl	r7, [r0, #-879]	; 0x36f
    143c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1440:	65764f5f 	ldrbvs	r4, [r6, #-3935]!	; 0xf5f
    1444:	6d615372 	stclvs	3, cr5, [r1, #-456]!	; 0xfffffe38
    1448:	6e696c70 	mcrvs	12, 3, r6, cr9, cr0, {3}
    144c:	6d433867 	stclvs	8, cr3, [r3, #-412]	; 0xfffffe64
    1450:	53550064 	cmppl	r5, #100	; 0x64
    1454:	5f545241 	svcpl	0x00545241
    1458:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    145c:	61745354 	cmnvs	r4, r4, asr r3
    1460:	00737574 	rsbseq	r7, r3, r4, ror r5
    1464:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1468:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    146c:	646d434e 	strbtvs	r4, [sp], #-846	; 0x34e
    1470:	41535500 	cmpmi	r3, r0, lsl #10
    1474:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1478:	43414472 	movtmi	r4, #5234	; 0x1472
    147c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1480:	53550067 	cmppl	r5, #103	; 0x67
    1484:	5f545241 	svcpl	0x00545241
    1488:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    148c:	5355006b 	cmppl	r5, #107	; 0x6b
    1490:	5f545241 	svcpl	0x00545241
    1494:	41447249 	cmpmi	r4, r9, asr #4
    1498:	00646d43 	rsbeq	r6, r4, r3, asr #26
    149c:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    14a0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    14a4:	69646c61 	stmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    14a8:	65646976 	strbvs	r6, [r4, #-2422]!	; 0x976
    14ac:	53550072 	cmppl	r5, #114	; 0x72
    14b0:	5f545241 	svcpl	0x00545241
    14b4:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    14b8:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    14bc:	43414e64 	movtmi	r4, #7780	; 0x1e64
    14c0:	646d434b 	strbtvs	r4, [sp], #-843	; 0x34b
    14c4:	41535500 	cmpmi	r3, r0, lsl #10
    14c8:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    14cc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    14d0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    14d4:	43520074 	cmpmi	r2, #116	; 0x74
    14d8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    14dc:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    14e0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    14e4:	55007375 	strpl	r7, [r0, #-885]	; 0x375
    14e8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    14ec:	6f6c435f 	svcvs	0x006c435f
    14f0:	6e496b63 	vmlsvs.f64	d22, d9, d19
    14f4:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    14f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    14fc:	6b61575f 	blvs	1857280 <_Min_Stack_Size+0x1856e80>
    1500:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    1504:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1508:	53550067 	cmppl	r5, #103	; 0x67
    150c:	5f545241 	svcpl	0x00545241
    1510:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    1514:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    1518:	6d437865 	stclvs	8, cr7, [r3, #-404]	; 0xfffffe6c
    151c:	53550064 	cmppl	r5, #100	; 0x64
    1520:	5f545241 	svcpl	0x00545241
    1524:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1528:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    152c:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    1530:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1534:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0x5f
    1538:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    153c:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    1540:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1544:	4f50435f 	svcmi	0x0050435f
    1548:	7469004c 	strbtvc	r0, [r9], #-76	; 0x4c
    154c:	6b73616d 	blvs	1cd9b08 <_Min_Stack_Size+0x1cd9708>
    1550:	61737500 	cmnvs	r3, r0, lsl #10
    1554:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0x472
    1558:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    155c:	47464353 	smlsldmi	r4, r6, r3, r3
    1560:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 13ec <_Min_Stack_Size+0xfec>
    1564:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    1568:	6f697461 	svcvs	0x00697461
    156c:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    1570:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
    1574:	53595300 	cmppl	r9, #0, 6
    1578:	5f474643 	svcpl	0x00474643
    157c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1580:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xd6f
    1584:	7461736e 	strbtvc	r7, [r1], #-878	; 0x36e
    1588:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    158c:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    1590:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1594:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    1598:	47464353 	smlsldmi	r4, r6, r3, r3
    159c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    15a0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    15a4:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    15a8:	455f4746 	ldrbmi	r4, [pc, #-1862]	; e6a <_Min_Stack_Size+0xa6a>
    15ac:	4c495458 	cfstrdmi	mvd5, [r9], {88}	; 0x58
    15b0:	43656e69 	cmnmi	r5, #1680	; 0x690
    15b4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15b8:	4d430067 	stclmi	0, cr0, [r3, #-412]	; 0xfffffe64
    15bc:	00524350 	subseq	r4, r2, r0, asr r3
    15c0:	524d454d 	subpl	r4, sp, #322961408	; 0x13400000
    15c4:	5300504d 	movwpl	r5, #77	; 0x4d
    15c8:	46435359 			; <UNDEFINED> instruction: 0x46435359
    15cc:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    15d0:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    15d4:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    15d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    15dc:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    15e0:	53455200 	movtpl	r5, #20992	; 0x5200
    15e4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    15e8:	59530044 	ldmdbpl	r3, {r2, r6}^
    15ec:	47464353 	smlsldmi	r4, r6, r3, r3
    15f0:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    15f4:	5379726f 	cmnpl	r9, #-268435450	; 0xf0000006
    15f8:	70706177 	rsbsvc	r6, r0, r7, ror r1
    15fc:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1600:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    1604:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1608:	45005243 	strmi	r5, [r0, #-579]	; 0x243
    160c:	5f495458 	svcpl	0x00495458
    1610:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    1614:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1618:	53007865 	movwpl	r7, #2149	; 0x865
    161c:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1620:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    1624:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    1628:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    162c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1630:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    1634:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1638:	53006769 	movwpl	r6, #1897	; 0x769
    163c:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1640:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xf47
    1644:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1648:	616d6552 	cmnvs	sp, r2, asr r5
    164c:	59530070 	ldmdbpl	r3, {r4, r5, r6}^
    1650:	47464353 	smlsldmi	r4, r6, r3, r3
    1654:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1658:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    165c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1660:	6f505f49 	svcvs	0x00505f49
    1664:	6f537472 	svcvs	0x00537472
    1668:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    166c:	4f495047 	svcmi	0x00495047
    1670:	2e2e0078 	mcrcs	0, 1, r0, cr14, cr8, {3}
    1674:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1678:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    167c:	2d493932 	stclcs	9, cr3, [r9, #-200]	; 0xffffff38
    1680:	63736944 	cmnvs	r3, #68, 18	; 0x110000
    1684:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    1688:	57465f79 	smlsldxpl	r5, r6, r9, pc	; <UNPREDICTABLE>
    168c:	2e31565f 	mrccs	6, 1, r5, cr1, cr15, {2}
    1690:	2f312e30 	svccs	0x00312e30
    1694:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    1698:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    169c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    16a0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    16a4:	5f787834 	svcpl	0x00787834
    16a8:	50647453 	rsbpl	r7, r4, r3, asr r4
    16ac:	70697265 	rsbvc	r7, r9, r5, ror #4
    16b0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    16b4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    16b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    16bc:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    16c0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    16c4:	735f7878 	cmpvc	pc, #120, 16	; 0x780000
    16c8:	66637379 			; <UNDEFINED> instruction: 0x66637379
    16cc:	00632e67 	rsbeq	r2, r3, r7, ror #28
    16d0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    16d4:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 15c4 <_Min_Stack_Size+0x11c4>
    16d8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    16dc:	6d655279 	sfmvs	f5, 2, [r5, #-484]!	; 0xfffffe1c
    16e0:	6f437061 	svcvs	0x00437061
    16e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  30:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20363235 	eorscs	r3, r6, r5, lsr r2
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <_estack+0xdffcf2fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	33313132 	teqcc	r1, #-2147483636	; 0x8000000c
  6c:	005d3835 	subseq	r3, sp, r5, lsr r8

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
  1c:	00000016 	andeq	r0, r0, r6, lsl r0
  20:	83080e41 	movwhi	r0, #36417	; 0x8e41
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	00000018 	andeq	r0, r0, r8, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	080001e0 	stmdaeq	r0, {r5, r6, r7, r8}
  34:	00000044 	andeq	r0, r0, r4, asr #32
  38:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
  3c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  40:	180e4201 	stmdane	lr, {r0, r9, lr}
  44:	00000018 	andeq	r0, r0, r8, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	08000224 	stmdaeq	r0, {r2, r5, r9}
  50:	0000003c 	andeq	r0, r0, ip, lsr r0
  54:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
  58:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  5c:	200e4201 	andcs	r4, lr, r1, lsl #4
  60:	00000014 	andeq	r0, r0, r4, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	08000260 	stmdaeq	r0, {r5, r6, r9}
  6c:	0000002c 	andeq	r0, r0, ip, lsr #32
  70:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
  74:	00018e02 	andeq	r8, r1, r2, lsl #28
  78:	00000030 	andeq	r0, r0, r0, lsr r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	0800028c 	stmdaeq	r0, {r2, r3, r7, r9}
  84:	00000080 	andeq	r0, r0, r0, lsl #1
  88:	80100e41 	andshi	r0, r0, r1, asr #28
  8c:	82038104 	andhi	r8, r3, #4, 2
  90:	41018302 	tstmi	r1, r2, lsl #6
  94:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
  98:	06870785 	streq	r0, [r7], r5, lsl #15
  9c:	0e42058e 	cdpeq	5, 4, cr0, cr2, cr14, {4}
  a0:	0e414ea0 	cdpeq	14, 4, cr4, cr1, cr0, {5}
  a4:	0d414eb0 	stcleq	14, cr4, [r1, #-704]	; 0xfffffd40
  a8:	00000007 	andeq	r0, r0, r7
  ac:	00000014 	andeq	r0, r0, r4, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	0800030c 	stmdaeq	r0, {r2, r3, r8, r9}
  b8:	00000084 	andeq	r0, r0, r4, lsl #1
  bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
  c0:	00018e02 	andeq	r8, r1, r2, lsl #28
  c4:	0000000c 	andeq	r0, r0, ip
  c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  cc:	7c020001 	stcvc	0, cr0, [r2], {1}
  d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	000000c4 	andeq	r0, r0, r4, asr #1
  dc:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
  e0:	00000002 	andeq	r0, r0, r2
  e4:	0000000c 	andeq	r0, r0, ip
  e8:	000000c4 	andeq	r0, r0, r4, asr #1
  ec:	08000394 	stmdaeq	r0, {r2, r4, r7, r8, r9}
  f0:	00000002 	andeq	r0, r0, r2
  f4:	0000000c 	andeq	r0, r0, ip
  f8:	000000c4 	andeq	r0, r0, r4, asr #1
  fc:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
 100:	00000002 	andeq	r0, r0, r2
 104:	0000000c 	andeq	r0, r0, ip
 108:	000000c4 	andeq	r0, r0, r4, asr #1
 10c:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
 110:	00000002 	andeq	r0, r0, r2
 114:	0000000c 	andeq	r0, r0, ip
 118:	000000c4 	andeq	r0, r0, r4, asr #1
 11c:	080003a0 	stmdaeq	r0, {r5, r7, r8, r9}
 120:	00000002 	andeq	r0, r0, r2
 124:	0000000c 	andeq	r0, r0, ip
 128:	000000c4 	andeq	r0, r0, r4, asr #1
 12c:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
 130:	00000002 	andeq	r0, r0, r2
 134:	0000000c 	andeq	r0, r0, ip
 138:	000000c4 	andeq	r0, r0, r4, asr #1
 13c:	080003a8 	stmdaeq	r0, {r3, r5, r7, r8, r9}
 140:	00000002 	andeq	r0, r0, r2
 144:	0000000c 	andeq	r0, r0, ip
 148:	000000c4 	andeq	r0, r0, r4, asr #1
 14c:	080003ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9}
 150:	00000002 	andeq	r0, r0, r2
 154:	0000000c 	andeq	r0, r0, ip
 158:	000000c4 	andeq	r0, r0, r4, asr #1
 15c:	080003b0 	stmdaeq	r0, {r4, r5, r7, r8, r9}
 160:	00000002 	andeq	r0, r0, r2
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	00000010 	andeq	r0, r0, r0, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	080003b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9}
 180:	00000110 	andeq	r0, r0, r0, lsl r1
 184:	00080e51 	andeq	r0, r8, r1, asr lr
 188:	0000000c 	andeq	r0, r0, ip
 18c:	00000164 	andeq	r0, r0, r4, ror #2
 190:	080004c4 	stmdaeq	r0, {r2, r6, r7, sl}
 194:	00000070 	andeq	r0, r0, r0, ror r0
 198:	0000000c 	andeq	r0, r0, ip
 19c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	00000198 	muleq	r0, r8, r1
 1b0:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
 1b4:	00000014 	andeq	r0, r0, r4, lsl r0
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000198 	muleq	r0, r8, r1
 1c0:	08000598 	stmdaeq	r0, {r3, r4, r7, r8, sl}
 1c4:	00000078 	andeq	r0, r0, r8, ror r0
 1c8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 1cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
 1d0:	00018702 	andeq	r8, r1, r2, lsl #14
 1d4:	0000000c 	andeq	r0, r0, ip
 1d8:	00000198 	muleq	r0, r8, r1
 1dc:	08000610 	stmdaeq	r0, {r4, r9, sl}
 1e0:	00000014 	andeq	r0, r0, r4, lsl r0
 1e4:	0000000c 	andeq	r0, r0, ip
 1e8:	00000198 	muleq	r0, r8, r1
 1ec:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 1f0:	00000018 	andeq	r0, r0, r8, lsl r0
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	00000198 	muleq	r0, r8, r1
 1fc:	0800063c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl}
 200:	00000018 	andeq	r0, r0, r8, lsl r0
 204:	0000000c 	andeq	r0, r0, ip
 208:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 20c:	7c020001 	stcvc	0, cr0, [r2], {1}
 210:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 214:	00000014 	andeq	r0, r0, r4, lsl r0
 218:	00000204 	andeq	r0, r0, r4, lsl #4
 21c:	08000654 	stmdaeq	r0, {r2, r4, r6, r9, sl}
 220:	0000015c 	andeq	r0, r0, ip, asr r1
 224:	83080e41 	movwhi	r0, #36417	; 0x8e41
 228:	00018e02 	andeq	r8, r1, r2, lsl #28
 22c:	00000020 	andeq	r0, r0, r0, lsr #32
 230:	00000204 	andeq	r0, r0, r4, lsl #4
 234:	080007b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl}
 238:	000000bc 	strheq	r0, [r0], -ip
 23c:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xe43
 240:	86068507 	strhi	r8, [r6], -r7, lsl #10
 244:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 248:	8a028903 	bhi	a265c <_Min_Stack_Size+0xa225c>
 24c:	00000001 	andeq	r0, r0, r1
 250:	0000000c 	andeq	r0, r0, ip
 254:	00000204 	andeq	r0, r0, r4, lsl #4
 258:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
 25c:	00000012 	andeq	r0, r0, r2, lsl r0
 260:	00000010 	andeq	r0, r0, r0, lsl r0
 264:	00000204 	andeq	r0, r0, r4, lsl #4
 268:	08000880 	stmdaeq	r0, {r7, fp}
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
 270:	00080e41 	andeq	r0, r8, r1, asr #28
 274:	0000000c 	andeq	r0, r0, ip
 278:	00000204 	andeq	r0, r0, r4, lsl #4
 27c:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
 280:	0000000c 	andeq	r0, r0, ip
 284:	0000000c 	andeq	r0, r0, ip
 288:	00000204 	andeq	r0, r0, r4, lsl #4
 28c:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 290:	00000006 	andeq	r0, r0, r6
 294:	0000000c 	andeq	r0, r0, ip
 298:	00000204 	andeq	r0, r0, r4, lsl #4
 29c:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
 2a0:	0000000c 	andeq	r0, r0, ip
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	00000204 	andeq	r0, r0, r4, lsl #4
 2ac:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 2b0:	00000006 	andeq	r0, r0, r6
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000204 	andeq	r0, r0, r4, lsl #4
 2bc:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 2c0:	00000004 	andeq	r0, r0, r4
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	00000204 	andeq	r0, r0, r4, lsl #4
 2cc:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 2d0:	00000004 	andeq	r0, r0, r4
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	00000204 	andeq	r0, r0, r4, lsl #4
 2dc:	080008d4 	stmdaeq	r0, {r2, r4, r6, r7, fp}
 2e0:	0000000a 	andeq	r0, r0, sl
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	00000204 	andeq	r0, r0, r4, lsl #4
 2ec:	080008e0 	stmdaeq	r0, {r5, r6, r7, fp}
 2f0:	00000004 	andeq	r0, r0, r4
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	00000204 	andeq	r0, r0, r4, lsl #4
 2fc:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 300:	00000008 	andeq	r0, r0, r8
 304:	00000014 	andeq	r0, r0, r4, lsl r0
 308:	00000204 	andeq	r0, r0, r4, lsl #4
 30c:	080008ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp}
 310:	00000028 	andeq	r0, r0, r8, lsr #32
 314:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
 318:	00000001 	andeq	r0, r0, r1
 31c:	0000000c 	andeq	r0, r0, ip
 320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 324:	7c020001 	stcvc	0, cr0, [r2], {1}
 328:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 32c:	00000014 	andeq	r0, r0, r4, lsl r0
 330:	0000031c 	andeq	r0, r0, ip, lsl r3
 334:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
 338:	00000050 	andeq	r0, r0, r0, asr r0
 33c:	84080e47 	strhi	r0, [r8], #-3655	; 0xe47
 340:	00018502 	andeq	r8, r1, r2, lsl #10
 344:	0000000c 	andeq	r0, r0, ip
 348:	0000031c 	andeq	r0, r0, ip, lsl r3
 34c:	08000964 	stmdaeq	r0, {r2, r5, r6, r8, fp}
 350:	00000010 	andeq	r0, r0, r0, lsl r0
 354:	00000010 	andeq	r0, r0, r0, lsl r0
 358:	0000031c 	andeq	r0, r0, ip, lsl r3
 35c:	08000974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp}
 360:	00000038 	andeq	r0, r0, r8, lsr r0
 364:	00080e41 	andeq	r0, r8, r1, asr #28
 368:	0000000c 	andeq	r0, r0, ip
 36c:	0000031c 	andeq	r0, r0, ip, lsl r3
 370:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 374:	00000014 	andeq	r0, r0, r4, lsl r0
 378:	0000000c 	andeq	r0, r0, ip
 37c:	0000031c 	andeq	r0, r0, ip, lsl r3
 380:	080009c0 	stmdaeq	r0, {r6, r7, r8, fp}
 384:	0000000c 	andeq	r0, r0, ip
 388:	0000000c 	andeq	r0, r0, ip
 38c:	0000031c 	andeq	r0, r0, ip, lsl r3
 390:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 394:	00000020 	andeq	r0, r0, r0, lsr #32
 398:	0000000c 	andeq	r0, r0, ip
 39c:	0000031c 	andeq	r0, r0, ip, lsl r3
 3a0:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 3a4:	0000000c 	andeq	r0, r0, ip
 3a8:	00000014 	andeq	r0, r0, r4, lsl r0
 3ac:	0000031c 	andeq	r0, r0, ip, lsl r3
 3b0:	080009f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp}
 3b4:	00000024 	andeq	r0, r0, r4, lsr #32
 3b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
 3bc:	00018502 	andeq	r8, r1, r2, lsl #10
 3c0:	0000000c 	andeq	r0, r0, ip
 3c4:	0000031c 	andeq	r0, r0, ip, lsl r3
 3c8:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
 3cc:	0000000c 	andeq	r0, r0, ip
 3d0:	0000000c 	andeq	r0, r0, ip
 3d4:	0000031c 	andeq	r0, r0, ip, lsl r3
 3d8:	08000a28 	stmdaeq	r0, {r3, r5, r9, fp}
 3dc:	00000018 	andeq	r0, r0, r8, lsl r0
 3e0:	0000000c 	andeq	r0, r0, ip
 3e4:	0000031c 	andeq	r0, r0, ip, lsl r3
 3e8:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 3ec:	0000000c 	andeq	r0, r0, ip
 3f0:	0000000c 	andeq	r0, r0, ip
 3f4:	0000031c 	andeq	r0, r0, ip, lsl r3
 3f8:	08000a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp}
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	0000000c 	andeq	r0, r0, ip
 404:	0000031c 	andeq	r0, r0, ip, lsl r3
 408:	08000a64 	stmdaeq	r0, {r2, r5, r6, r9, fp}
 40c:	0000000c 	andeq	r0, r0, ip
 410:	0000000c 	andeq	r0, r0, ip
 414:	0000031c 	andeq	r0, r0, ip, lsl r3
 418:	08000a70 	stmdaeq	r0, {r4, r5, r6, r9, fp}
 41c:	0000000c 	andeq	r0, r0, ip
 420:	0000000c 	andeq	r0, r0, ip
 424:	0000031c 	andeq	r0, r0, ip, lsl r3
 428:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 42c:	00000014 	andeq	r0, r0, r4, lsl r0
 430:	0000000c 	andeq	r0, r0, ip
 434:	0000031c 	andeq	r0, r0, ip, lsl r3
 438:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 43c:	00000014 	andeq	r0, r0, r4, lsl r0
 440:	0000000c 	andeq	r0, r0, ip
 444:	0000031c 	andeq	r0, r0, ip, lsl r3
 448:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 44c:	00000014 	andeq	r0, r0, r4, lsl r0
 450:	0000000c 	andeq	r0, r0, ip
 454:	0000031c 	andeq	r0, r0, ip, lsl r3
 458:	08000ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp}
 45c:	00000010 	andeq	r0, r0, r0, lsl r0
 460:	0000000c 	andeq	r0, r0, ip
 464:	0000031c 	andeq	r0, r0, ip, lsl r3
 468:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	0000000c 	andeq	r0, r0, ip
 474:	0000031c 	andeq	r0, r0, ip, lsl r3
 478:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 47c:	00000014 	andeq	r0, r0, r4, lsl r0
 480:	0000000c 	andeq	r0, r0, ip
 484:	0000031c 	andeq	r0, r0, ip, lsl r3
 488:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 48c:	00000014 	andeq	r0, r0, r4, lsl r0
 490:	00000014 	andeq	r0, r0, r4, lsl r0
 494:	0000031c 	andeq	r0, r0, ip, lsl r3
 498:	08000b04 	stmdaeq	r0, {r2, r8, r9, fp}
 49c:	00000090 	muleq	r0, r0, r0
 4a0:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	0000031c 	andeq	r0, r0, ip, lsl r3
 4b0:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
 4b4:	00000030 	andeq	r0, r0, r0, lsr r0
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	0000031c 	andeq	r0, r0, ip, lsl r3
 4c0:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
 4c4:	0000000c 	andeq	r0, r0, ip
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	0000031c 	andeq	r0, r0, ip, lsl r3
 4d0:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
 4d4:	0000000c 	andeq	r0, r0, ip
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	0000031c 	andeq	r0, r0, ip, lsl r3
 4e0:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
 4e4:	0000000c 	andeq	r0, r0, ip
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	0000031c 	andeq	r0, r0, ip, lsl r3
 4f0:	08000be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp}
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	0000000c 	andeq	r0, r0, ip
 4fc:	0000031c 	andeq	r0, r0, ip, lsl r3
 500:	08000c00 	stmdaeq	r0, {sl, fp}
 504:	0000001c 	andeq	r0, r0, ip, lsl r0
 508:	0000000c 	andeq	r0, r0, ip
 50c:	0000031c 	andeq	r0, r0, ip, lsl r3
 510:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
 514:	00000018 	andeq	r0, r0, r8, lsl r0
 518:	0000000c 	andeq	r0, r0, ip
 51c:	0000031c 	andeq	r0, r0, ip, lsl r3
 520:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
 524:	00000018 	andeq	r0, r0, r8, lsl r0
 528:	0000000c 	andeq	r0, r0, ip
 52c:	0000031c 	andeq	r0, r0, ip, lsl r3
 530:	08000c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp}
 534:	00000018 	andeq	r0, r0, r8, lsl r0
 538:	0000000c 	andeq	r0, r0, ip
 53c:	0000031c 	andeq	r0, r0, ip, lsl r3
 540:	08000c64 	stmdaeq	r0, {r2, r5, r6, sl, fp}
 544:	0000000c 	andeq	r0, r0, ip
 548:	0000000c 	andeq	r0, r0, ip
 54c:	0000031c 	andeq	r0, r0, ip, lsl r3
 550:	08000c70 	stmdaeq	r0, {r4, r5, r6, sl, fp}
 554:	00000018 	andeq	r0, r0, r8, lsl r0
 558:	0000000c 	andeq	r0, r0, ip
 55c:	0000031c 	andeq	r0, r0, ip, lsl r3
 560:	08000c88 	stmdaeq	r0, {r3, r7, sl, fp}
 564:	00000018 	andeq	r0, r0, r8, lsl r0
 568:	0000000c 	andeq	r0, r0, ip
 56c:	0000031c 	andeq	r0, r0, ip, lsl r3
 570:	08000ca0 	stmdaeq	r0, {r5, r7, sl, fp}
 574:	00000018 	andeq	r0, r0, r8, lsl r0
 578:	0000000c 	andeq	r0, r0, ip
 57c:	0000031c 	andeq	r0, r0, ip, lsl r3
 580:	08000cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp}
 584:	00000018 	andeq	r0, r0, r8, lsl r0
 588:	0000000c 	andeq	r0, r0, ip
 58c:	0000031c 	andeq	r0, r0, ip, lsl r3
 590:	08000cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp}
 594:	00000018 	andeq	r0, r0, r8, lsl r0
 598:	0000000c 	andeq	r0, r0, ip
 59c:	0000031c 	andeq	r0, r0, ip, lsl r3
 5a0:	08000ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp}
 5a4:	00000018 	andeq	r0, r0, r8, lsl r0
 5a8:	0000000c 	andeq	r0, r0, ip
 5ac:	0000031c 	andeq	r0, r0, ip, lsl r3
 5b0:	08000d00 	stmdaeq	r0, {r8, sl, fp}
 5b4:	00000018 	andeq	r0, r0, r8, lsl r0
 5b8:	0000000c 	andeq	r0, r0, ip
 5bc:	0000031c 	andeq	r0, r0, ip, lsl r3
 5c0:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
 5c4:	00000018 	andeq	r0, r0, r8, lsl r0
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	0000031c 	andeq	r0, r0, ip, lsl r3
 5d0:	08000d30 	stmdaeq	r0, {r4, r5, r8, sl, fp}
 5d4:	00000018 	andeq	r0, r0, r8, lsl r0
 5d8:	0000000c 	andeq	r0, r0, ip
 5dc:	0000031c 	andeq	r0, r0, ip, lsl r3
 5e0:	08000d48 	stmdaeq	r0, {r3, r6, r8, sl, fp}
 5e4:	00000018 	andeq	r0, r0, r8, lsl r0
 5e8:	0000000c 	andeq	r0, r0, ip
 5ec:	0000031c 	andeq	r0, r0, ip, lsl r3
 5f0:	08000d60 	stmdaeq	r0, {r5, r6, r8, sl, fp}
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	0000000c 	andeq	r0, r0, ip
 5fc:	0000031c 	andeq	r0, r0, ip, lsl r3
 600:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
 604:	00000018 	andeq	r0, r0, r8, lsl r0
 608:	0000000c 	andeq	r0, r0, ip
 60c:	0000031c 	andeq	r0, r0, ip, lsl r3
 610:	08000d90 	stmdaeq	r0, {r4, r7, r8, sl, fp}
 614:	00000018 	andeq	r0, r0, r8, lsl r0
 618:	0000000c 	andeq	r0, r0, ip
 61c:	0000031c 	andeq	r0, r0, ip, lsl r3
 620:	08000da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp}
 624:	00000018 	andeq	r0, r0, r8, lsl r0
 628:	0000000c 	andeq	r0, r0, ip
 62c:	0000031c 	andeq	r0, r0, ip, lsl r3
 630:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 634:	00000018 	andeq	r0, r0, r8, lsl r0
 638:	0000000c 	andeq	r0, r0, ip
 63c:	0000031c 	andeq	r0, r0, ip, lsl r3
 640:	08000dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp}
 644:	00000018 	andeq	r0, r0, r8, lsl r0
 648:	0000000c 	andeq	r0, r0, ip
 64c:	0000031c 	andeq	r0, r0, ip, lsl r3
 650:	08000df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp}
 654:	00000034 	andeq	r0, r0, r4, lsr r0
 658:	0000000c 	andeq	r0, r0, ip
 65c:	0000031c 	andeq	r0, r0, ip, lsl r3
 660:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
 664:	00000010 	andeq	r0, r0, r0, lsl r0
 668:	0000000c 	andeq	r0, r0, ip
 66c:	0000031c 	andeq	r0, r0, ip, lsl r3
 670:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 674:	00000014 	andeq	r0, r0, r4, lsl r0
 678:	0000000c 	andeq	r0, r0, ip
 67c:	0000031c 	andeq	r0, r0, ip, lsl r3
 680:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
 684:	0000000c 	andeq	r0, r0, ip
 688:	0000000c 	andeq	r0, r0, ip
 68c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 690:	7c020001 	stcvc	0, cr0, [r2], {1}
 694:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 698:	00000014 	andeq	r0, r0, r4, lsl r0
 69c:	00000688 	andeq	r0, r0, r8, lsl #13
 6a0:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 6a4:	0000010c 	andeq	r0, r0, ip, lsl #2
 6a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
 6ac:	00018e02 	andeq	r8, r1, r2, lsl #28
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b4:	00000688 	andeq	r0, r0, r8, lsl #13
 6b8:	08000f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp}
 6bc:	000000c4 	andeq	r0, r0, r4, asr #1
 6c0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
 6c4:	86048505 	strhi	r8, [r4], -r5, lsl #10
 6c8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 6cc:	280e5e01 	stmdacs	lr, {r0, r9, sl, fp, ip, lr}
 6d0:	0000000c 	andeq	r0, r0, ip
 6d4:	00000688 	andeq	r0, r0, r8, lsl #13
 6d8:	08001024 	stmdaeq	r0, {r2, r5, ip}
 6dc:	00000016 	andeq	r0, r0, r6, lsl r0
 6e0:	00000014 	andeq	r0, r0, r4, lsl r0
 6e4:	00000688 	andeq	r0, r0, r8, lsl #13
 6e8:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
 6ec:	00000022 	andeq	r0, r0, r2, lsr #32
 6f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
 6f4:	00018502 	andeq	r8, r1, r2, lsl #10
 6f8:	0000000c 	andeq	r0, r0, ip
 6fc:	00000688 	andeq	r0, r0, r8, lsl #13
 700:	08001060 	stmdaeq	r0, {r5, r6, ip}
 704:	0000000c 	andeq	r0, r0, ip
 708:	0000000c 	andeq	r0, r0, ip
 70c:	00000688 	andeq	r0, r0, r8, lsl #13
 710:	0800106c 	stmdaeq	r0, {r2, r3, r5, r6, ip}
 714:	0000001a 	andeq	r0, r0, sl, lsl r0
 718:	0000000c 	andeq	r0, r0, ip
 71c:	00000688 	andeq	r0, r0, r8, lsl #13
 720:	08001088 	stmdaeq	r0, {r3, r7, ip}
 724:	00000012 	andeq	r0, r0, r2, lsl r0
 728:	0000000c 	andeq	r0, r0, ip
 72c:	00000688 	andeq	r0, r0, r8, lsl #13
 730:	0800109c 	stmdaeq	r0, {r2, r3, r4, r7, ip}
 734:	0000001a 	andeq	r0, r0, sl, lsl r0
 738:	0000000c 	andeq	r0, r0, ip
 73c:	00000688 	andeq	r0, r0, r8, lsl #13
 740:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 744:	0000001a 	andeq	r0, r0, sl, lsl r0
 748:	0000000c 	andeq	r0, r0, ip
 74c:	00000688 	andeq	r0, r0, r8, lsl #13
 750:	080010d4 	stmdaeq	r0, {r2, r4, r6, r7, ip}
 754:	00000008 	andeq	r0, r0, r8
 758:	0000000c 	andeq	r0, r0, ip
 75c:	00000688 	andeq	r0, r0, r8, lsl #13
 760:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 764:	00000008 	andeq	r0, r0, r8
 768:	0000000c 	andeq	r0, r0, ip
 76c:	00000688 	andeq	r0, r0, r8, lsl #13
 770:	080010e4 	stmdaeq	r0, {r2, r5, r6, r7, ip}
 774:	00000016 	andeq	r0, r0, r6, lsl r0
 778:	0000000c 	andeq	r0, r0, ip
 77c:	00000688 	andeq	r0, r0, r8, lsl #13
 780:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
 784:	0000001a 	andeq	r0, r0, sl, lsl r0
 788:	0000000c 	andeq	r0, r0, ip
 78c:	00000688 	andeq	r0, r0, r8, lsl #13
 790:	08001118 	stmdaeq	r0, {r3, r4, r8, ip}
 794:	00000016 	andeq	r0, r0, r6, lsl r0
 798:	0000000c 	andeq	r0, r0, ip
 79c:	00000688 	andeq	r0, r0, r8, lsl #13
 7a0:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 7a4:	00000016 	andeq	r0, r0, r6, lsl r0
 7a8:	0000000c 	andeq	r0, r0, ip
 7ac:	00000688 	andeq	r0, r0, r8, lsl #13
 7b0:	08001148 	stmdaeq	r0, {r3, r6, r8, ip}
 7b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7b8:	0000000c 	andeq	r0, r0, ip
 7bc:	00000688 	andeq	r0, r0, r8, lsl #13
 7c0:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
 7c4:	0000000c 	andeq	r0, r0, ip
 7c8:	0000000c 	andeq	r0, r0, ip
 7cc:	00000688 	andeq	r0, r0, r8, lsl #13
 7d0:	08001170 	stmdaeq	r0, {r4, r5, r6, r8, ip}
 7d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d8:	0000000c 	andeq	r0, r0, ip
 7dc:	00000688 	andeq	r0, r0, r8, lsl #13
 7e0:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 7e4:	00000012 	andeq	r0, r0, r2, lsl r0
 7e8:	0000000c 	andeq	r0, r0, ip
 7ec:	00000688 	andeq	r0, r0, r8, lsl #13
 7f0:	080011a0 	stmdaeq	r0, {r5, r7, r8, ip}
 7f4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7f8:	0000000c 	andeq	r0, r0, ip
 7fc:	00000688 	andeq	r0, r0, r8, lsl #13
 800:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
 804:	0000001a 	andeq	r0, r0, sl, lsl r0
 808:	0000000c 	andeq	r0, r0, ip
 80c:	00000688 	andeq	r0, r0, r8, lsl #13
 810:	080011d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip}
 814:	00000016 	andeq	r0, r0, r6, lsl r0
 818:	0000000c 	andeq	r0, r0, ip
 81c:	00000688 	andeq	r0, r0, r8, lsl #13
 820:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
 824:	0000001a 	andeq	r0, r0, sl, lsl r0
 828:	0000000c 	andeq	r0, r0, ip
 82c:	00000688 	andeq	r0, r0, r8, lsl #13
 830:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 834:	00000014 	andeq	r0, r0, r4, lsl r0
 838:	00000014 	andeq	r0, r0, r4, lsl r0
 83c:	00000688 	andeq	r0, r0, r8, lsl #13
 840:	08001220 	stmdaeq	r0, {r5, r9, ip}
 844:	0000003a 	andeq	r0, r0, sl, lsr r0
 848:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
 84c:	00000001 	andeq	r0, r0, r1
 850:	0000000c 	andeq	r0, r0, ip
 854:	00000688 	andeq	r0, r0, r8, lsl #13
 858:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
 85c:	0000000c 	andeq	r0, r0, ip
 860:	0000000c 	andeq	r0, r0, ip
 864:	00000688 	andeq	r0, r0, r8, lsl #13
 868:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
 86c:	00000008 	andeq	r0, r0, r8
 870:	00000014 	andeq	r0, r0, r4, lsl r0
 874:	00000688 	andeq	r0, r0, r8, lsl #13
 878:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
 87c:	0000004c 	andeq	r0, r0, ip, asr #32
 880:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
 884:	00000001 	andeq	r0, r0, r1
 888:	0000000c 	andeq	r0, r0, ip
 88c:	00000688 	andeq	r0, r0, r8, lsl #13
 890:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 894:	00000010 	andeq	r0, r0, r0, lsl r0
 898:	0000000c 	andeq	r0, r0, ip
 89c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 8a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8a8:	00000014 	andeq	r0, r0, r4, lsl r0
 8ac:	00000898 	muleq	r0, r8, r8
 8b0:	080012cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip}
 8b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
 8bc:	00018e02 	andeq	r8, r1, r2, lsl #28
 8c0:	0000000c 	andeq	r0, r0, ip
 8c4:	00000898 	muleq	r0, r8, r8
 8c8:	080012e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip}
 8cc:	0000000c 	andeq	r0, r0, ip
 8d0:	0000000c 	andeq	r0, r0, ip
 8d4:	00000898 	muleq	r0, r8, r8
 8d8:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
 8dc:	0000000c 	andeq	r0, r0, ip
 8e0:	00000014 	andeq	r0, r0, r4, lsl r0
 8e4:	00000898 	muleq	r0, r8, r8
 8e8:	08001300 	stmdaeq	r0, {r8, r9, ip}
 8ec:	0000002e 	andeq	r0, r0, lr, lsr #32
 8f0:	84040e49 	strhi	r0, [r4], #-3657	; 0xe49
 8f4:	00000001 	andeq	r0, r0, r1
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	00000898 	muleq	r0, r8, r8
 900:	08001330 	stmdaeq	r0, {r4, r5, r8, r9, ip}
 904:	0000000c 	andeq	r0, r0, ip
 908:	0000000c 	andeq	r0, r0, ip
 90c:	00000898 	muleq	r0, r8, r8
 910:	0800133c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip}
 914:	0000000c 	andeq	r0, r0, ip
 918:	0000000c 	andeq	r0, r0, ip
 91c:	00000898 	muleq	r0, r8, r8
 920:	08001348 	stmdaeq	r0, {r3, r6, r8, r9, ip}
 924:	00000010 	andeq	r0, r0, r0, lsl r0
